
eeeee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000801c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080081ac  080081ac  000181ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800823c  0800823c  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  0800823c  0800823c  0001823c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008244  08008244  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008244  08008244  00018244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008248  08008248  00018248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800824c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020174  2**0
                  CONTENTS
 10 .bss          00001cd0  20000174  20000174  00020174  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e44  20001e44  00020174  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f947  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cd6  00000000  00000000  0002faeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  000327c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b00  00000000  00000000  00033420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000244d3  00000000  00000000  00033f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010979  00000000  00000000  000583f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0e0d  00000000  00000000  00068d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139b79  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003514  00000000  00000000  00139bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000174 	.word	0x20000174
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008194 	.word	0x08008194

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000178 	.word	0x20000178
 80001cc:	08008194 	.word	0x08008194

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fa60 	bl	8000a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f864 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f91c 	bl	80007cc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000594:	f000 f8c8 	bl	8000728 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000598:	f006 fc36 	bl	8006e08 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 800059c:	4828      	ldr	r0, [pc, #160]	; (8000640 <main+0xbc>)
 800059e:	f000 fb2f 	bl	8000c00 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 80005a2:	210a      	movs	r1, #10
 80005a4:	4826      	ldr	r0, [pc, #152]	; (8000640 <main+0xbc>)
 80005a6:	f000 fbfd 	bl	8000da4 <HAL_ADC_PollForConversion>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d11c      	bne.n	80005ea <main+0x66>
	  {

		  adcreading= HAL_ADC_GetValue(&hadc1);
 80005b0:	4823      	ldr	r0, [pc, #140]	; (8000640 <main+0xbc>)
 80005b2:	f000 fc82 	bl	8000eba <HAL_ADC_GetValue>
 80005b6:	4603      	mov	r3, r0
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b22      	ldr	r3, [pc, #136]	; (8000644 <main+0xc0>)
 80005bc:	601a      	str	r2, [r3, #0]
		  sprintf(myinput, "%d\n", adcreading);
 80005be:	4b21      	ldr	r3, [pc, #132]	; (8000644 <main+0xc0>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	461a      	mov	r2, r3
 80005c4:	4920      	ldr	r1, [pc, #128]	; (8000648 <main+0xc4>)
 80005c6:	4821      	ldr	r0, [pc, #132]	; (800064c <main+0xc8>)
 80005c8:	f007 f984 	bl	80078d4 <siprintf>
		  HAL_Delay(500);
 80005cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005d0:	f000 faae 	bl	8000b30 <HAL_Delay>
		  CDC_Transmit_FS((uint8_t*) myinput, strlen(myinput));
 80005d4:	481d      	ldr	r0, [pc, #116]	; (800064c <main+0xc8>)
 80005d6:	f7ff fdfb 	bl	80001d0 <strlen>
 80005da:	4603      	mov	r3, r0
 80005dc:	4619      	mov	r1, r3
 80005de:	481b      	ldr	r0, [pc, #108]	; (800064c <main+0xc8>)
 80005e0:	f006 fcdc 	bl	8006f9c <CDC_Transmit_FS>
		  HAL_ADC_Start(&hadc1);
 80005e4:	4816      	ldr	r0, [pc, #88]	; (8000640 <main+0xbc>)
 80005e6:	f000 fb0b 	bl	8000c00 <HAL_ADC_Start>

	  }
	  if (buffer[0] != '\0'){
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <main+0xcc>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d0d7      	beq.n	80005a2 <main+0x1e>
		  sprintf(myinput, "%d\n", buffer[0]);
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <main+0xcc>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	461a      	mov	r2, r3
 80005f8:	4913      	ldr	r1, [pc, #76]	; (8000648 <main+0xc4>)
 80005fa:	4814      	ldr	r0, [pc, #80]	; (800064c <main+0xc8>)
 80005fc:	f007 f96a 	bl	80078d4 <siprintf>
		  HAL_Delay(500);
 8000600:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000604:	f000 fa94 	bl	8000b30 <HAL_Delay>
		  CDC_Transmit_FS((uint8_t*) myinput, strlen(myinput));
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <main+0xc8>)
 800060a:	f7ff fde1 	bl	80001d0 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	4619      	mov	r1, r3
 8000612:	480e      	ldr	r0, [pc, #56]	; (800064c <main+0xc8>)
 8000614:	f006 fcc2 	bl	8006f9c <CDC_Transmit_FS>
		  if (buffer[0] == '1'){
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <main+0xcc>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b31      	cmp	r3, #49	; 0x31
 800061e:	d103      	bne.n	8000628 <main+0xa4>
			  param = 1;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <main+0xd0>)
 8000622:	2201      	movs	r2, #1
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	e7bc      	b.n	80005a2 <main+0x1e>
		  }
		  else if (buffer[0] == '2'){
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <main+0xcc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b32      	cmp	r3, #50	; 0x32
 800062e:	d103      	bne.n	8000638 <main+0xb4>
			  param = 2;
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <main+0xd0>)
 8000632:	2202      	movs	r2, #2
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	e7b4      	b.n	80005a2 <main+0x1e>
		  }
		  else {
			  param = 0;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <main+0xd0>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
	  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 800063e:	e7b0      	b.n	80005a2 <main+0x1e>
 8000640:	20000190 	.word	0x20000190
 8000644:	2000021c 	.word	0x2000021c
 8000648:	080081ac 	.word	0x080081ac
 800064c:	20000000 	.word	0x20000000
 8000650:	200001d8 	.word	0x200001d8
 8000654:	20000218 	.word	0x20000218

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f007 f92c 	bl	80078c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <SystemClock_Config+0xc8>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a26      	ldr	r2, [pc, #152]	; (8000720 <SystemClock_Config+0xc8>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b24      	ldr	r3, [pc, #144]	; (8000720 <SystemClock_Config+0xc8>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <SystemClock_Config+0xcc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a20      	ldr	r2, [pc, #128]	; (8000724 <SystemClock_Config+0xcc>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <SystemClock_Config+0xcc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b4:	2301      	movs	r3, #1
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006cc:	2348      	movs	r3, #72	; 0x48
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006d4:	2303      	movs	r3, #3
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fb43 	bl	8002d68 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e8:	f000 f898 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2102      	movs	r1, #2
 8000708:	4618      	mov	r0, r3
 800070a:	f002 fda5 	bl	8003258 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000714:	f000 f882 	bl	800081c <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	; 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	463b      	mov	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_ADC1_Init+0x98>)
 800073c:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800073e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000754:	2201      	movs	r2, #1
 8000756:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_ADC1_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000768:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <MX_ADC1_Init+0xa0>)
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_ADC1_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000774:	2201      	movs	r2, #1
 8000776:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_ADC1_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000782:	2201      	movs	r2, #1
 8000784:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000786:	480e      	ldr	r0, [pc, #56]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000788:	f000 f9f6 	bl	8000b78 <HAL_ADC_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000792:	f000 f843 	bl	800081c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000796:	2301      	movs	r3, #1
 8000798:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800079a:	2301      	movs	r3, #1
 800079c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a2:	463b      	mov	r3, r7
 80007a4:	4619      	mov	r1, r3
 80007a6:	4806      	ldr	r0, [pc, #24]	; (80007c0 <MX_ADC1_Init+0x98>)
 80007a8:	f000 fb94 	bl	8000ed4 <HAL_ADC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007b2:	f000 f833 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000190 	.word	0x20000190
 80007c4:	40012000 	.word	0x40012000
 80007c8:	0f000001 	.word	0x0f000001

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_GPIO_Init+0x4c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <MX_GPIO_Init+0x4c>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_GPIO_Init+0x4c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_GPIO_Init+0x4c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a08      	ldr	r2, [pc, #32]	; (8000818 <MX_GPIO_Init+0x4c>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_GPIO_Init+0x4c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <HAL_MspInit+0x4c>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <HAL_MspInit+0x4c>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083c:	6453      	str	r3, [r2, #68]	; 0x44
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <HAL_MspInit+0x4c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <HAL_ADC_MspInit+0x7c>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d127      	bne.n	80008ea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <HAL_ADC_MspInit+0x80>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <HAL_ADC_MspInit+0x80>)
 80008a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a8:	6453      	str	r3, [r2, #68]	; 0x44
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <HAL_ADC_MspInit+0x80>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_ADC_MspInit+0x80>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_ADC_MspInit+0x80>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_ADC_MspInit+0x80>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008d2:	2302      	movs	r3, #2
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d6:	2303      	movs	r3, #3
 80008d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <HAL_ADC_MspInit+0x84>)
 80008e6:	f000 fe25 	bl	8001534 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	; 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40012000 	.word	0x40012000
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020000 	.word	0x40020000

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 f8d0 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <OTG_FS_IRQHandler+0x10>)
 800095a:	f001 f8d7 	bl	8001b0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20001708 	.word	0x20001708

08000968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000970:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <_sbrk+0x5c>)
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <_sbrk+0x60>)
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <_sbrk+0x64>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <_sbrk+0x64>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <_sbrk+0x68>)
 8000988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	429a      	cmp	r2, r3
 8000996:	d207      	bcs.n	80009a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000998:	f006 ff5c 	bl	8007854 <__errno>
 800099c:	4603      	mov	r3, r0
 800099e:	220c      	movs	r2, #12
 80009a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	e009      	b.n	80009bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <_sbrk+0x64>)
 80009b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ba:	68fb      	ldr	r3, [r7, #12]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20020000 	.word	0x20020000
 80009c8:	00000400 	.word	0x00000400
 80009cc:	20000220 	.word	0x20000220
 80009d0:	20001e48 	.word	0x20001e48

080009d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <SystemInit+0x20>)
 80009da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009de:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <SystemInit+0x20>)
 80009e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009fe:	490e      	ldr	r1, [pc, #56]	; (8000a38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a00:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a14:	4c0b      	ldr	r4, [pc, #44]	; (8000a44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a22:	f7ff ffd7 	bl	80009d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a26:	f006 ff1b 	bl	8007860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2a:	f7ff fdab 	bl	8000584 <main>
  bx  lr    
 8000a2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000a3c:	0800824c 	.word	0x0800824c
  ldr r2, =_sbss
 8000a40:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000a44:	20001e44 	.word	0x20001e44

08000a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC_IRQHandler>
	...

08000a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <HAL_Init+0x40>)
 8000a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_Init+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_Init+0x40>)
 8000a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_Init+0x40>)
 8000a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 fd1b 	bl	80014b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7a:	200f      	movs	r0, #15
 8000a7c:	f000 f808 	bl	8000a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f7ff fed2 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023c00 	.word	0x40023c00

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x54>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x58>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 fd33 	bl	800151a <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00e      	b.n	8000adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d80a      	bhi.n	8000ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 fcfb 	bl	80014c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_InitTick+0x5c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000014 	.word	0x20000014
 8000ae8:	2000001c 	.word	0x2000001c
 8000aec:	20000018 	.word	0x20000018

08000af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_IncTick+0x20>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x24>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <HAL_IncTick+0x24>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	2000001c 	.word	0x2000001c
 8000b14:	20000224 	.word	0x20000224

08000b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <HAL_GetTick+0x14>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000224 	.word	0x20000224

08000b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b38:	f7ff ffee 	bl	8000b18 <HAL_GetTick>
 8000b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b48:	d005      	beq.n	8000b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_Delay+0x44>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4413      	add	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b56:	bf00      	nop
 8000b58:	f7ff ffde 	bl	8000b18 <HAL_GetTick>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d8f7      	bhi.n	8000b58 <HAL_Delay+0x28>
  {
  }
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000001c 	.word	0x2000001c

08000b78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e033      	b.n	8000bf6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d109      	bne.n	8000baa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff fe6e 	bl	8000878 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f003 0310 	and.w	r3, r3, #16
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d118      	bne.n	8000be8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bbe:	f023 0302 	bic.w	r3, r3, #2
 8000bc2:	f043 0202 	orr.w	r2, r3, #2
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f000 faa4 	bl	8001118 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f023 0303 	bic.w	r3, r3, #3
 8000bde:	f043 0201 	orr.w	r2, r3, #1
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	641a      	str	r2, [r3, #64]	; 0x40
 8000be6:	e001      	b.n	8000bec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d101      	bne.n	8000c1a <HAL_ADC_Start+0x1a>
 8000c16:	2302      	movs	r3, #2
 8000c18:	e0b2      	b.n	8000d80 <HAL_ADC_Start+0x180>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d018      	beq.n	8000c62 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f042 0201 	orr.w	r2, r2, #1
 8000c3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c40:	4b52      	ldr	r3, [pc, #328]	; (8000d8c <HAL_ADC_Start+0x18c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a52      	ldr	r2, [pc, #328]	; (8000d90 <HAL_ADC_Start+0x190>)
 8000c46:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4a:	0c9a      	lsrs	r2, r3, #18
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c54:	e002      	b.n	8000c5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1f9      	bne.n	8000c56 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d17a      	bne.n	8000d66 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c78:	f023 0301 	bic.w	r3, r3, #1
 8000c7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d007      	beq.n	8000ca2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cae:	d106      	bne.n	8000cbe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb4:	f023 0206 	bic.w	r2, r3, #6
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	645a      	str	r2, [r3, #68]	; 0x44
 8000cbc:	e002      	b.n	8000cc4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ccc:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <HAL_ADC_Start+0x194>)
 8000cce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000cd8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 031f 	and.w	r3, r3, #31
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d12a      	bne.n	8000d3c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a2b      	ldr	r2, [pc, #172]	; (8000d98 <HAL_ADC_Start+0x198>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d015      	beq.n	8000d1c <HAL_ADC_Start+0x11c>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a29      	ldr	r2, [pc, #164]	; (8000d9c <HAL_ADC_Start+0x19c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d105      	bne.n	8000d06 <HAL_ADC_Start+0x106>
 8000cfa:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <HAL_ADC_Start+0x194>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 031f 	and.w	r3, r3, #31
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00a      	beq.n	8000d1c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a25      	ldr	r2, [pc, #148]	; (8000da0 <HAL_ADC_Start+0x1a0>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d136      	bne.n	8000d7e <HAL_ADC_Start+0x17e>
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <HAL_ADC_Start+0x194>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0310 	and.w	r3, r3, #16
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d130      	bne.n	8000d7e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d129      	bne.n	8000d7e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	e020      	b.n	8000d7e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a15      	ldr	r2, [pc, #84]	; (8000d98 <HAL_ADC_Start+0x198>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d11b      	bne.n	8000d7e <HAL_ADC_Start+0x17e>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d114      	bne.n	8000d7e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689a      	ldr	r2, [r3, #8]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	e00b      	b.n	8000d7e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f043 0210 	orr.w	r2, r3, #16
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f043 0201 	orr.w	r2, r3, #1
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	20000014 	.word	0x20000014
 8000d90:	431bde83 	.word	0x431bde83
 8000d94:	40012300 	.word	0x40012300
 8000d98:	40012000 	.word	0x40012000
 8000d9c:	40012100 	.word	0x40012100
 8000da0:	40012200 	.word	0x40012200

08000da4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dc0:	d113      	bne.n	8000dea <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dd0:	d10b      	bne.n	8000dea <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f043 0220 	orr.w	r2, r3, #32
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e063      	b.n	8000eb2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000dea:	f7ff fe95 	bl	8000b18 <HAL_GetTick>
 8000dee:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000df0:	e021      	b.n	8000e36 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df8:	d01d      	beq.n	8000e36 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d007      	beq.n	8000e10 <HAL_ADC_PollForConversion+0x6c>
 8000e00:	f7ff fe8a 	bl	8000b18 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d212      	bcs.n	8000e36 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d00b      	beq.n	8000e36 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f043 0204 	orr.w	r2, r3, #4
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e03d      	b.n	8000eb2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d1d6      	bne.n	8000df2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f06f 0212 	mvn.w	r2, #18
 8000e4c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d123      	bne.n	8000eb0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d11f      	bne.n	8000eb0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d006      	beq.n	8000e8c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d111      	bne.n	8000eb0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d105      	bne.n	8000eb0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	f043 0201 	orr.w	r2, r3, #1
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d101      	bne.n	8000ef0 <HAL_ADC_ConfigChannel+0x1c>
 8000eec:	2302      	movs	r3, #2
 8000eee:	e105      	b.n	80010fc <HAL_ADC_ConfigChannel+0x228>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b09      	cmp	r3, #9
 8000efe:	d925      	bls.n	8000f4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68d9      	ldr	r1, [r3, #12]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	3b1e      	subs	r3, #30
 8000f16:	2207      	movs	r2, #7
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43da      	mvns	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	400a      	ands	r2, r1
 8000f24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68d9      	ldr	r1, [r3, #12]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	4603      	mov	r3, r0
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4403      	add	r3, r0
 8000f3e:	3b1e      	subs	r3, #30
 8000f40:	409a      	lsls	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	430a      	orrs	r2, r1
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	e022      	b.n	8000f92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6919      	ldr	r1, [r3, #16]
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4413      	add	r3, r2
 8000f60:	2207      	movs	r2, #7
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	400a      	ands	r2, r1
 8000f6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6919      	ldr	r1, [r3, #16]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	4618      	mov	r0, r3
 8000f82:	4603      	mov	r3, r0
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4403      	add	r3, r0
 8000f88:	409a      	lsls	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d824      	bhi.n	8000fe4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	3b05      	subs	r3, #5
 8000fac:	221f      	movs	r2, #31
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	400a      	ands	r2, r1
 8000fba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	3b05      	subs	r3, #5
 8000fd6:	fa00 f203 	lsl.w	r2, r0, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	635a      	str	r2, [r3, #52]	; 0x34
 8000fe2:	e04c      	b.n	800107e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b0c      	cmp	r3, #12
 8000fea:	d824      	bhi.n	8001036 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3b23      	subs	r3, #35	; 0x23
 8000ffe:	221f      	movs	r2, #31
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43da      	mvns	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	400a      	ands	r2, r1
 800100c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	b29b      	uxth	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	3b23      	subs	r3, #35	; 0x23
 8001028:	fa00 f203 	lsl.w	r2, r0, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	430a      	orrs	r2, r1
 8001032:	631a      	str	r2, [r3, #48]	; 0x30
 8001034:	e023      	b.n	800107e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	3b41      	subs	r3, #65	; 0x41
 8001048:	221f      	movs	r2, #31
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	400a      	ands	r2, r1
 8001056:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	b29b      	uxth	r3, r3
 8001064:	4618      	mov	r0, r3
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	3b41      	subs	r3, #65	; 0x41
 8001072:	fa00 f203 	lsl.w	r2, r0, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	430a      	orrs	r2, r1
 800107c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <HAL_ADC_ConfigChannel+0x234>)
 8001080:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a21      	ldr	r2, [pc, #132]	; (800110c <HAL_ADC_ConfigChannel+0x238>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d109      	bne.n	80010a0 <HAL_ADC_ConfigChannel+0x1cc>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b12      	cmp	r3, #18
 8001092:	d105      	bne.n	80010a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a19      	ldr	r2, [pc, #100]	; (800110c <HAL_ADC_ConfigChannel+0x238>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d123      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x21e>
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b10      	cmp	r3, #16
 80010b0:	d003      	beq.n	80010ba <HAL_ADC_ConfigChannel+0x1e6>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b11      	cmp	r3, #17
 80010b8:	d11b      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b10      	cmp	r3, #16
 80010cc:	d111      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <HAL_ADC_ConfigChannel+0x23c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <HAL_ADC_ConfigChannel+0x240>)
 80010d4:	fba2 2303 	umull	r2, r3, r2, r3
 80010d8:	0c9a      	lsrs	r2, r3, #18
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010e4:	e002      	b.n	80010ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f9      	bne.n	80010e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	40012300 	.word	0x40012300
 800110c:	40012000 	.word	0x40012000
 8001110:	20000014 	.word	0x20000014
 8001114:	431bde83 	.word	0x431bde83

08001118 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001120:	4b79      	ldr	r3, [pc, #484]	; (8001308 <ADC_Init+0x1f0>)
 8001122:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	431a      	orrs	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800114c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6859      	ldr	r1, [r3, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	021a      	lsls	r2, r3, #8
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	430a      	orrs	r2, r1
 8001160:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001170:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6859      	ldr	r1, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001192:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6899      	ldr	r1, [r3, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	4a58      	ldr	r2, [pc, #352]	; (800130c <ADC_Init+0x1f4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d022      	beq.n	80011f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6899      	ldr	r1, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6899      	ldr	r1, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	e00f      	b.n	8001216 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001204:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001214:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0202 	bic.w	r2, r2, #2
 8001224:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6899      	ldr	r1, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7e1b      	ldrb	r3, [r3, #24]
 8001230:	005a      	lsls	r2, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d01b      	beq.n	800127c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001252:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001262:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6859      	ldr	r1, [r3, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	3b01      	subs	r3, #1
 8001270:	035a      	lsls	r2, r3, #13
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	430a      	orrs	r2, r1
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	e007      	b.n	800128c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800128a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	051a      	lsls	r2, r3, #20
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6899      	ldr	r1, [r3, #8]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012ce:	025a      	lsls	r2, r3, #9
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6899      	ldr	r1, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	029a      	lsls	r2, r3, #10
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	609a      	str	r2, [r3, #8]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	40012300 	.word	0x40012300
 800130c:	0f000001 	.word	0x0f000001

08001310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800132c:	4013      	ands	r3, r2
 800132e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800133c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <__NVIC_GetPriorityGrouping+0x18>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	f003 0307 	and.w	r3, r3, #7
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	2b00      	cmp	r3, #0
 8001384:	db0b      	blt.n	800139e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	f003 021f 	and.w	r2, r3, #31
 800138c:	4907      	ldr	r1, [pc, #28]	; (80013ac <__NVIC_EnableIRQ+0x38>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	095b      	lsrs	r3, r3, #5
 8001394:	2001      	movs	r0, #1
 8001396:	fa00 f202 	lsl.w	r2, r0, r2
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000e100 	.word	0xe000e100

080013b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db0a      	blt.n	80013da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	490c      	ldr	r1, [pc, #48]	; (80013fc <__NVIC_SetPriority+0x4c>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	0112      	lsls	r2, r2, #4
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	440b      	add	r3, r1
 80013d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d8:	e00a      	b.n	80013f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4908      	ldr	r1, [pc, #32]	; (8001400 <__NVIC_SetPriority+0x50>)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	3b04      	subs	r3, #4
 80013e8:	0112      	lsls	r2, r2, #4
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	440b      	add	r3, r1
 80013ee:	761a      	strb	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000e100 	.word	0xe000e100
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f1c3 0307 	rsb	r3, r3, #7
 800141e:	2b04      	cmp	r3, #4
 8001420:	bf28      	it	cs
 8001422:	2304      	movcs	r3, #4
 8001424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3304      	adds	r3, #4
 800142a:	2b06      	cmp	r3, #6
 800142c:	d902      	bls.n	8001434 <NVIC_EncodePriority+0x30>
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3b03      	subs	r3, #3
 8001432:	e000      	b.n	8001436 <NVIC_EncodePriority+0x32>
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	401a      	ands	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800144c:	f04f 31ff 	mov.w	r1, #4294967295
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	43d9      	mvns	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	4313      	orrs	r3, r2
         );
}
 800145e:	4618      	mov	r0, r3
 8001460:	3724      	adds	r7, #36	; 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800147c:	d301      	bcc.n	8001482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147e:	2301      	movs	r3, #1
 8001480:	e00f      	b.n	80014a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <SysTick_Config+0x40>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148a:	210f      	movs	r1, #15
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f7ff ff8e 	bl	80013b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <SysTick_Config+0x40>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <SysTick_Config+0x40>)
 800149c:	2207      	movs	r2, #7
 800149e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	e000e010 	.word	0xe000e010

080014b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ff29 	bl	8001310 <__NVIC_SetPriorityGrouping>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d8:	f7ff ff3e 	bl	8001358 <__NVIC_GetPriorityGrouping>
 80014dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f7ff ff8e 	bl	8001404 <NVIC_EncodePriority>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff5d 	bl	80013b0 <__NVIC_SetPriority>
}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff31 	bl	8001374 <__NVIC_EnableIRQ>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffa2 	bl	800146c <SysTick_Config>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	; 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	e16b      	b.n	8001828 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001550:	2201      	movs	r2, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	429a      	cmp	r2, r3
 800156a:	f040 815a 	bne.w	8001822 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b01      	cmp	r3, #1
 8001578:	d005      	beq.n	8001586 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001582:	2b02      	cmp	r3, #2
 8001584:	d130      	bne.n	80015e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015bc:	2201      	movs	r2, #1
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	f003 0201 	and.w	r2, r3, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d017      	beq.n	8001624 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d123      	bne.n	8001678 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	08da      	lsrs	r2, r3, #3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3208      	adds	r2, #8
 8001638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	220f      	movs	r2, #15
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	08da      	lsrs	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3208      	adds	r2, #8
 8001672:	69b9      	ldr	r1, [r7, #24]
 8001674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0203 	and.w	r2, r3, #3
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80b4 	beq.w	8001822 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b60      	ldr	r3, [pc, #384]	; (8001840 <HAL_GPIO_Init+0x30c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	4a5f      	ldr	r2, [pc, #380]	; (8001840 <HAL_GPIO_Init+0x30c>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ca:	4b5d      	ldr	r3, [pc, #372]	; (8001840 <HAL_GPIO_Init+0x30c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016d6:	4a5b      	ldr	r2, [pc, #364]	; (8001844 <HAL_GPIO_Init+0x310>)
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	3302      	adds	r3, #2
 80016de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	220f      	movs	r2, #15
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a52      	ldr	r2, [pc, #328]	; (8001848 <HAL_GPIO_Init+0x314>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d02b      	beq.n	800175a <HAL_GPIO_Init+0x226>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a51      	ldr	r2, [pc, #324]	; (800184c <HAL_GPIO_Init+0x318>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d025      	beq.n	8001756 <HAL_GPIO_Init+0x222>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a50      	ldr	r2, [pc, #320]	; (8001850 <HAL_GPIO_Init+0x31c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d01f      	beq.n	8001752 <HAL_GPIO_Init+0x21e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a4f      	ldr	r2, [pc, #316]	; (8001854 <HAL_GPIO_Init+0x320>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d019      	beq.n	800174e <HAL_GPIO_Init+0x21a>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4e      	ldr	r2, [pc, #312]	; (8001858 <HAL_GPIO_Init+0x324>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d013      	beq.n	800174a <HAL_GPIO_Init+0x216>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4d      	ldr	r2, [pc, #308]	; (800185c <HAL_GPIO_Init+0x328>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d00d      	beq.n	8001746 <HAL_GPIO_Init+0x212>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4c      	ldr	r2, [pc, #304]	; (8001860 <HAL_GPIO_Init+0x32c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d007      	beq.n	8001742 <HAL_GPIO_Init+0x20e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4b      	ldr	r2, [pc, #300]	; (8001864 <HAL_GPIO_Init+0x330>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d101      	bne.n	800173e <HAL_GPIO_Init+0x20a>
 800173a:	2307      	movs	r3, #7
 800173c:	e00e      	b.n	800175c <HAL_GPIO_Init+0x228>
 800173e:	2308      	movs	r3, #8
 8001740:	e00c      	b.n	800175c <HAL_GPIO_Init+0x228>
 8001742:	2306      	movs	r3, #6
 8001744:	e00a      	b.n	800175c <HAL_GPIO_Init+0x228>
 8001746:	2305      	movs	r3, #5
 8001748:	e008      	b.n	800175c <HAL_GPIO_Init+0x228>
 800174a:	2304      	movs	r3, #4
 800174c:	e006      	b.n	800175c <HAL_GPIO_Init+0x228>
 800174e:	2303      	movs	r3, #3
 8001750:	e004      	b.n	800175c <HAL_GPIO_Init+0x228>
 8001752:	2302      	movs	r3, #2
 8001754:	e002      	b.n	800175c <HAL_GPIO_Init+0x228>
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <HAL_GPIO_Init+0x228>
 800175a:	2300      	movs	r3, #0
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	f002 0203 	and.w	r2, r2, #3
 8001762:	0092      	lsls	r2, r2, #2
 8001764:	4093      	lsls	r3, r2
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800176c:	4935      	ldr	r1, [pc, #212]	; (8001844 <HAL_GPIO_Init+0x310>)
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	089b      	lsrs	r3, r3, #2
 8001772:	3302      	adds	r3, #2
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800177a:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <HAL_GPIO_Init+0x334>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800179e:	4a32      	ldr	r2, [pc, #200]	; (8001868 <HAL_GPIO_Init+0x334>)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017a4:	4b30      	ldr	r3, [pc, #192]	; (8001868 <HAL_GPIO_Init+0x334>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017c8:	4a27      	ldr	r2, [pc, #156]	; (8001868 <HAL_GPIO_Init+0x334>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <HAL_GPIO_Init+0x334>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017f2:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <HAL_GPIO_Init+0x334>)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f8:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <HAL_GPIO_Init+0x334>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800181c:	4a12      	ldr	r2, [pc, #72]	; (8001868 <HAL_GPIO_Init+0x334>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3301      	adds	r3, #1
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2b0f      	cmp	r3, #15
 800182c:	f67f ae90 	bls.w	8001550 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40013800 	.word	0x40013800
 8001848:	40020000 	.word	0x40020000
 800184c:	40020400 	.word	0x40020400
 8001850:	40020800 	.word	0x40020800
 8001854:	40020c00 	.word	0x40020c00
 8001858:	40021000 	.word	0x40021000
 800185c:	40021400 	.word	0x40021400
 8001860:	40021800 	.word	0x40021800
 8001864:	40021c00 	.word	0x40021c00
 8001868:	40013c00 	.word	0x40013c00

0800186c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800186c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800186e:	b08f      	sub	sp, #60	; 0x3c
 8001870:	af0a      	add	r7, sp, #40	; 0x28
 8001872:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e10f      	b.n	8001a9e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d106      	bne.n	800189e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f005 fcc7 	bl	800722c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2203      	movs	r2, #3
 80018a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f001 ffd8 	bl	8003872 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	687e      	ldr	r6, [r7, #4]
 80018ca:	466d      	mov	r5, sp
 80018cc:	f106 0410 	add.w	r4, r6, #16
 80018d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80018e0:	1d33      	adds	r3, r6, #4
 80018e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018e4:	6838      	ldr	r0, [r7, #0]
 80018e6:	f001 feaf 	bl	8003648 <USB_CoreInit>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2202      	movs	r2, #2
 80018f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0d0      	b.n	8001a9e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f001 ffc6 	bl	8003894 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	e04a      	b.n	80019a4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	333d      	adds	r3, #61	; 0x3d
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	333c      	adds	r3, #60	; 0x3c
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	b298      	uxth	r0, r3
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	3344      	adds	r3, #68	; 0x44
 800194a:	4602      	mov	r2, r0
 800194c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	3340      	adds	r3, #64	; 0x40
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	3348      	adds	r3, #72	; 0x48
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001976:	7bfa      	ldrb	r2, [r7, #15]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	334c      	adds	r3, #76	; 0x4c
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800198a:	7bfa      	ldrb	r2, [r7, #15]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	3354      	adds	r3, #84	; 0x54
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	3301      	adds	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d3af      	bcc.n	800190e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	73fb      	strb	r3, [r7, #15]
 80019b2:	e044      	b.n	8001a3e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019ca:	7bfa      	ldrb	r2, [r7, #15]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4413      	add	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4413      	add	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a0c:	7bfa      	ldrb	r2, [r7, #15]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d3b5      	bcc.n	80019b4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	603b      	str	r3, [r7, #0]
 8001a4e:	687e      	ldr	r6, [r7, #4]
 8001a50:	466d      	mov	r5, sp
 8001a52:	f106 0410 	add.w	r4, r6, #16
 8001a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a66:	1d33      	adds	r3, r6, #4
 8001a68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a6a:	6838      	ldr	r0, [r7, #0]
 8001a6c:	f001 ff5e 	bl	800392c <USB_DevInit>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d005      	beq.n	8001a82 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00d      	b.n	8001a9e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 f8ad 	bl	8004bf6 <USB_DevDisconnect>

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aa6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_PCD_Start+0x1c>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e020      	b.n	8001b04 <HAL_PCD_Start+0x5e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d109      	bne.n	8001ae6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d005      	beq.n	8001ae6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ade:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f001 feb0 	bl	8003850 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 f85d 	bl	8004bb4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b08d      	sub	sp, #52	; 0x34
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 f91b 	bl	8004d5e <USB_GetMode>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 848a 	bne.w	8002444 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f003 f87f 	bl	8004c38 <USB_ReadInterrupts>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 8480 	beq.w	8002442 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	0a1b      	lsrs	r3, r3, #8
 8001b4c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 f86c 	bl	8004c38 <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d107      	bne.n	8001b7a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695a      	ldr	r2, [r3, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f002 0202 	and.w	r2, r2, #2
 8001b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 f85a 	bl	8004c38 <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b10      	cmp	r3, #16
 8001b8c:	d161      	bne.n	8001c52 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699a      	ldr	r2, [r3, #24]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0210 	bic.w	r2, r2, #16
 8001b9c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	f003 020f 	and.w	r2, r3, #15
 8001baa:	4613      	mov	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	3304      	adds	r3, #4
 8001bbc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	0c5b      	lsrs	r3, r3, #17
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d124      	bne.n	8001c14 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d035      	beq.n	8001c42 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001be0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	461a      	mov	r2, r3
 8001be8:	6a38      	ldr	r0, [r7, #32]
 8001bea:	f002 fe91 	bl	8004910 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	691a      	ldr	r2, [r3, #16]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bfa:	441a      	add	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	6a1a      	ldr	r2, [r3, #32]
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c0c:	441a      	add	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	621a      	str	r2, [r3, #32]
 8001c12:	e016      	b.n	8001c42 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	0c5b      	lsrs	r3, r3, #17
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	2b06      	cmp	r3, #6
 8001c1e:	d110      	bne.n	8001c42 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001c26:	2208      	movs	r2, #8
 8001c28:	4619      	mov	r1, r3
 8001c2a:	6a38      	ldr	r0, [r7, #32]
 8001c2c:	f002 fe70 	bl	8004910 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	6a1a      	ldr	r2, [r3, #32]
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c3c:	441a      	add	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699a      	ldr	r2, [r3, #24]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0210 	orr.w	r2, r2, #16
 8001c50:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 ffee 	bl	8004c38 <USB_ReadInterrupts>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c66:	f040 80a7 	bne.w	8001db8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f002 fff3 	bl	8004c5e <USB_ReadDevAllOutEpInterrupt>
 8001c78:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c7a:	e099      	b.n	8001db0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 808e 	beq.w	8001da4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 f817 	bl	8004cc6 <USB_ReadDevOutEPInterrupt>
 8001c98:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00c      	beq.n	8001cbe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	015a      	lsls	r2, r3, #5
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	4413      	add	r3, r2
 8001cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001cb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 fec3 	bl	8002a44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00c      	beq.n	8001ce2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	015a      	lsls	r2, r3, #5
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001cda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 ff99 	bl	8002c14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d008      	beq.n	8001cfe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	015a      	lsls	r2, r3, #5
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	2310      	movs	r3, #16
 8001cfc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d030      	beq.n	8001d6a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d10:	2b80      	cmp	r3, #128	; 0x80
 8001d12:	d109      	bne.n	8001d28 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d26:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	78db      	ldrb	r3, [r3, #3]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d108      	bne.n	8001d58 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	4619      	mov	r1, r3
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f005 fb70 	bl	8007438 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	015a      	lsls	r2, r3, #5
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d64:	461a      	mov	r2, r3
 8001d66:	2302      	movs	r3, #2
 8001d68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	f003 0320 	and.w	r3, r3, #32
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d80:	461a      	mov	r2, r3
 8001d82:	2320      	movs	r3, #32
 8001d84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d009      	beq.n	8001da4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	015a      	lsls	r2, r3, #5
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	3301      	adds	r3, #1
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dac:	085b      	lsrs	r3, r3, #1
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f47f af62 	bne.w	8001c7c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f002 ff3b 	bl	8004c38 <USB_ReadInterrupts>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001dcc:	f040 80db 	bne.w	8001f86 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 ff5c 	bl	8004c92 <USB_ReadDevAllInEpInterrupt>
 8001dda:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001de0:	e0cd      	b.n	8001f7e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80c2 	beq.w	8001f72 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 ff82 	bl	8004d02 <USB_ReadDevInEPInterrupt>
 8001dfe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d057      	beq.n	8001eba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	2201      	movs	r2, #1
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69f9      	ldr	r1, [r7, #28]
 8001e26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d132      	bne.n	8001eae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	334c      	adds	r3, #76	; 0x4c
 8001e58:	6819      	ldr	r1, [r3, #0]
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4403      	add	r3, r0
 8001e68:	3348      	adds	r3, #72	; 0x48
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4419      	add	r1, r3
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e72:	4613      	mov	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4403      	add	r3, r0
 8001e7c:	334c      	adds	r3, #76	; 0x4c
 8001e7e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d113      	bne.n	8001eae <HAL_PCD_IRQHandler+0x3a2>
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	3354      	adds	r3, #84	; 0x54
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d108      	bne.n	8001eae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	f002 ff89 	bl	8004dc0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f005 fa3a 	bl	800732e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	2308      	movs	r3, #8
 8001ed4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eec:	461a      	mov	r2, r3
 8001eee:	2310      	movs	r3, #16
 8001ef0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f08:	461a      	mov	r2, r3
 8001f0a:	2340      	movs	r3, #64	; 0x40
 8001f0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d023      	beq.n	8001f60 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f1a:	6a38      	ldr	r0, [r7, #32]
 8001f1c:	f001 fe6a 	bl	8003bf4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	3338      	adds	r3, #56	; 0x38
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	3304      	adds	r3, #4
 8001f32:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	78db      	ldrb	r3, [r3, #3]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d108      	bne.n	8001f4e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	4619      	mov	r1, r3
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f005 fa87 	bl	800745c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fcdb 	bl	8002928 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	3301      	adds	r3, #1
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7a:	085b      	lsrs	r3, r3, #1
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f47f af2e 	bne.w	8001de2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f002 fe54 	bl	8004c38 <USB_ReadInterrupts>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f9a:	d122      	bne.n	8001fe2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001faa:	f023 0301 	bic.w	r3, r3, #1
 8001fae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d108      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 fec3 	bl	8002d50 <HAL_PCDEx_LPM_Callback>
 8001fca:	e002      	b.n	8001fd2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f005 fa25 	bl	800741c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f002 fe26 	bl	8004c38 <USB_ReadInterrupts>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ff6:	d112      	bne.n	800201e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d102      	bne.n	800200e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f005 f9e1 	bl	80073d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695a      	ldr	r2, [r3, #20]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800201c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f002 fe08 	bl	8004c38 <USB_ReadInterrupts>
 8002028:	4603      	mov	r3, r0
 800202a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002032:	f040 80b7 	bne.w	80021a4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2110      	movs	r1, #16
 8002050:	4618      	mov	r0, r3
 8002052:	f001 fdcf 	bl	8003bf4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002056:	2300      	movs	r3, #0
 8002058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800205a:	e046      	b.n	80020ea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	4413      	add	r3, r2
 8002064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002068:	461a      	mov	r2, r3
 800206a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800206e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	4413      	add	r3, r2
 8002078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002080:	0151      	lsls	r1, r2, #5
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	440a      	add	r2, r1
 8002086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800208a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800208e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	4413      	add	r3, r2
 8002098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800209c:	461a      	mov	r2, r3
 800209e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80020a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020b4:	0151      	lsls	r1, r2, #5
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	440a      	add	r2, r1
 80020ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80020c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d4:	0151      	lsls	r1, r2, #5
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	440a      	add	r2, r1
 80020da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e6:	3301      	adds	r3, #1
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d3b3      	bcc.n	800205c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002102:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002106:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	2b00      	cmp	r3, #0
 800210e:	d016      	beq.n	800213e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002120:	f043 030b 	orr.w	r3, r3, #11
 8002124:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800212e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002136:	f043 030b 	orr.w	r3, r3, #11
 800213a:	6453      	str	r3, [r2, #68]	; 0x44
 800213c:	e015      	b.n	800216a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800214c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002150:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002154:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002164:	f043 030b 	orr.w	r3, r3, #11
 8002168:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002178:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800217c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800218e:	461a      	mov	r2, r3
 8002190:	f002 fe16 	bl	8004dc0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695a      	ldr	r2, [r3, #20]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80021a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f002 fd45 	bl	8004c38 <USB_ReadInterrupts>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b8:	d124      	bne.n	8002204 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f002 fddb 	bl	8004d7a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f001 fd90 	bl	8003cee <USB_GetDevSpeed>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681c      	ldr	r4, [r3, #0]
 80021da:	f001 fa29 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 80021de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	4620      	mov	r0, r4
 80021ea:	f001 fa8f 	bl	800370c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f005 f8c5 	bl	800737e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002202:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f002 fd15 	bl	8004c38 <USB_ReadInterrupts>
 800220e:	4603      	mov	r3, r0
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b08      	cmp	r3, #8
 8002216:	d10a      	bne.n	800222e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f005 f8a2 	bl	8007362 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f002 0208 	and.w	r2, r2, #8
 800222c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f002 fd00 	bl	8004c38 <USB_ReadInterrupts>
 8002238:	4603      	mov	r3, r0
 800223a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223e:	2b80      	cmp	r3, #128	; 0x80
 8002240:	d122      	bne.n	8002288 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800224e:	2301      	movs	r3, #1
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
 8002252:	e014      	b.n	800227e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d105      	bne.n	8002278 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	b2db      	uxtb	r3, r3
 8002270:	4619      	mov	r1, r3
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fb27 	bl	80028c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	3301      	adds	r3, #1
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002284:	429a      	cmp	r2, r3
 8002286:	d3e5      	bcc.n	8002254 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f002 fcd3 	bl	8004c38 <USB_ReadInterrupts>
 8002292:	4603      	mov	r3, r0
 8002294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800229c:	d13b      	bne.n	8002316 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800229e:	2301      	movs	r3, #1
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
 80022a2:	e02b      	b.n	80022fc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	3340      	adds	r3, #64	; 0x40
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d115      	bne.n	80022f6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80022ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	da12      	bge.n	80022f6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	333f      	adds	r3, #63	; 0x3f
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	4619      	mov	r1, r3
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fae8 	bl	80028c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	3301      	adds	r3, #1
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002302:	429a      	cmp	r2, r3
 8002304:	d3ce      	bcc.n	80022a4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002314:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f002 fc8c 	bl	8004c38 <USB_ReadInterrupts>
 8002320:	4603      	mov	r3, r0
 8002322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800232a:	d155      	bne.n	80023d8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800232c:	2301      	movs	r3, #1
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
 8002330:	e045      	b.n	80023be <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	4413      	add	r3, r2
 800233a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d12e      	bne.n	80023b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800235a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800235c:	2b00      	cmp	r3, #0
 800235e:	da2b      	bge.n	80023b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800236c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002370:	429a      	cmp	r2, r3
 8002372:	d121      	bne.n	80023b8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10a      	bne.n	80023b8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b4:	6053      	str	r3, [r2, #4]
            break;
 80023b6:	e007      	b.n	80023c8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	3301      	adds	r3, #1
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d3b4      	bcc.n	8002332 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80023d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 fc2b 	bl	8004c38 <USB_ReadInterrupts>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ec:	d10a      	bne.n	8002404 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f005 f846 	bl	8007480 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002402:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f002 fc15 	bl	8004c38 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b04      	cmp	r3, #4
 8002416:	d115      	bne.n	8002444 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f005 f836 	bl	800749c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6859      	ldr	r1, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	430a      	orrs	r2, r1
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	e000      	b.n	8002444 <HAL_PCD_IRQHandler+0x938>
      return;
 8002442:	bf00      	nop
    }
  }
}
 8002444:	3734      	adds	r7, #52	; 0x34
 8002446:	46bd      	mov	sp, r7
 8002448:	bd90      	pop	{r4, r7, pc}

0800244a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	460b      	mov	r3, r1
 8002454:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_PCD_SetAddress+0x1a>
 8002460:	2302      	movs	r3, #2
 8002462:	e013      	b.n	800248c <HAL_PCD_SetAddress+0x42>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f002 fb73 	bl	8004b68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	4608      	mov	r0, r1
 800249e:	4611      	mov	r1, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	70fb      	strb	r3, [r7, #3]
 80024a6:	460b      	mov	r3, r1
 80024a8:	803b      	strh	r3, [r7, #0]
 80024aa:	4613      	mov	r3, r2
 80024ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	da0f      	bge.n	80024da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	f003 020f 	and.w	r2, r3, #15
 80024c0:	4613      	mov	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	3338      	adds	r3, #56	; 0x38
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	3304      	adds	r3, #4
 80024d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	705a      	strb	r2, [r3, #1]
 80024d8:	e00f      	b.n	80024fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	f003 020f 	and.w	r2, r3, #15
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	4413      	add	r3, r2
 80024f0:	3304      	adds	r3, #4
 80024f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	b2da      	uxtb	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002506:	883a      	ldrh	r2, [r7, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	78ba      	ldrb	r2, [r7, #2]
 8002510:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	785b      	ldrb	r3, [r3, #1]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d004      	beq.n	8002524 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002524:	78bb      	ldrb	r3, [r7, #2]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d102      	bne.n	8002530 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_PCD_EP_Open+0xaa>
 800253a:	2302      	movs	r3, #2
 800253c:	e00e      	b.n	800255c <HAL_PCD_EP_Open+0xc8>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68f9      	ldr	r1, [r7, #12]
 800254c:	4618      	mov	r0, r3
 800254e:	f001 fbf3 	bl	8003d38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800255a:	7afb      	ldrb	r3, [r7, #11]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002574:	2b00      	cmp	r3, #0
 8002576:	da0f      	bge.n	8002598 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	f003 020f 	and.w	r2, r3, #15
 800257e:	4613      	mov	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	3338      	adds	r3, #56	; 0x38
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4413      	add	r3, r2
 800258c:	3304      	adds	r3, #4
 800258e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	705a      	strb	r2, [r3, #1]
 8002596:	e00f      	b.n	80025b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	f003 020f 	and.w	r2, r3, #15
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	3304      	adds	r3, #4
 80025b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_PCD_EP_Close+0x6e>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e00e      	b.n	80025f0 <HAL_PCD_EP_Close+0x8c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68f9      	ldr	r1, [r7, #12]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f001 fc31 	bl	8003e48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	460b      	mov	r3, r1
 8002606:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002608:	7afb      	ldrb	r3, [r7, #11]
 800260a:	f003 020f 	and.w	r2, r3, #15
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4413      	add	r3, r2
 800261e:	3304      	adds	r3, #4
 8002620:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2200      	movs	r2, #0
 8002632:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2200      	movs	r2, #0
 8002638:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800263a:	7afb      	ldrb	r3, [r7, #11]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	b2da      	uxtb	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d102      	bne.n	8002654 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002654:	7afb      	ldrb	r3, [r7, #11]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	6979      	ldr	r1, [r7, #20]
 800266c:	f001 ff10 	bl	8004490 <USB_EP0StartXfer>
 8002670:	e008      	b.n	8002684 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	6979      	ldr	r1, [r7, #20]
 8002680:	f001 fcbe 	bl	8004000 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	f003 020f 	and.w	r2, r3, #15
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80026b0:	681b      	ldr	r3, [r3, #0]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	460b      	mov	r3, r1
 80026cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ce:	7afb      	ldrb	r3, [r7, #11]
 80026d0:	f003 020f 	and.w	r2, r3, #15
 80026d4:	4613      	mov	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	3338      	adds	r3, #56	; 0x38
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4413      	add	r3, r2
 80026e2:	3304      	adds	r3, #4
 80026e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2200      	movs	r2, #0
 80026f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2201      	movs	r2, #1
 80026fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026fe:	7afb      	ldrb	r3, [r7, #11]
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	b2da      	uxtb	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d102      	bne.n	8002718 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002718:	7afb      	ldrb	r3, [r7, #11]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	6979      	ldr	r1, [r7, #20]
 8002730:	f001 feae 	bl	8004490 <USB_EP0StartXfer>
 8002734:	e008      	b.n	8002748 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	6979      	ldr	r1, [r7, #20]
 8002744:	f001 fc5c 	bl	8004000 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	460b      	mov	r3, r1
 800275c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	f003 020f 	and.w	r2, r3, #15
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	429a      	cmp	r2, r3
 800276a:	d901      	bls.n	8002770 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e050      	b.n	8002812 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002774:	2b00      	cmp	r3, #0
 8002776:	da0f      	bge.n	8002798 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	f003 020f 	and.w	r2, r3, #15
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	3338      	adds	r3, #56	; 0x38
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	3304      	adds	r3, #4
 800278e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	705a      	strb	r2, [r3, #1]
 8002796:	e00d      	b.n	80027b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	3304      	adds	r3, #4
 80027ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_PCD_EP_SetStall+0x82>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e01e      	b.n	8002812 <HAL_PCD_EP_SetStall+0xc0>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68f9      	ldr	r1, [r7, #12]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 f8ec 	bl	80049c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10a      	bne.n	8002808 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	b2d9      	uxtb	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002802:	461a      	mov	r2, r3
 8002804:	f002 fadc 	bl	8004dc0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	460b      	mov	r3, r1
 8002824:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	f003 020f 	and.w	r2, r3, #15
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	d901      	bls.n	8002838 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e042      	b.n	80028be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800283c:	2b00      	cmp	r3, #0
 800283e:	da0f      	bge.n	8002860 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	f003 020f 	and.w	r2, r3, #15
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	3338      	adds	r3, #56	; 0x38
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	4413      	add	r3, r2
 8002854:	3304      	adds	r3, #4
 8002856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	705a      	strb	r2, [r3, #1]
 800285e:	e00f      	b.n	8002880 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	f003 020f 	and.w	r2, r3, #15
 8002866:	4613      	mov	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	4413      	add	r3, r2
 8002876:	3304      	adds	r3, #4
 8002878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	b2da      	uxtb	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_PCD_EP_ClrStall+0x86>
 800289c:	2302      	movs	r3, #2
 800289e:	e00e      	b.n	80028be <HAL_PCD_EP_ClrStall+0xa4>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68f9      	ldr	r1, [r7, #12]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f002 f8f4 	bl	8004a9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	460b      	mov	r3, r1
 80028d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80028d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	da0c      	bge.n	80028f4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	f003 020f 	and.w	r2, r3, #15
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	3338      	adds	r3, #56	; 0x38
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	3304      	adds	r3, #4
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	e00c      	b.n	800290e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	f003 020f 	and.w	r2, r3, #15
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	3304      	adds	r3, #4
 800290c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68f9      	ldr	r1, [r7, #12]
 8002914:	4618      	mov	r0, r3
 8002916:	f001 ff13 	bl	8004740 <USB_EPStopXfer>
 800291a:	4603      	mov	r3, r0
 800291c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800291e:	7afb      	ldrb	r3, [r7, #11]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af02      	add	r7, sp, #8
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	4613      	mov	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	3338      	adds	r3, #56	; 0x38
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	4413      	add	r3, r2
 800294c:	3304      	adds	r3, #4
 800294e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a1a      	ldr	r2, [r3, #32]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	429a      	cmp	r2, r3
 800295a:	d901      	bls.n	8002960 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e06c      	b.n	8002a3a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	429a      	cmp	r2, r3
 8002974:	d902      	bls.n	800297c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	3303      	adds	r3, #3
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002984:	e02b      	b.n	80029de <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	429a      	cmp	r2, r3
 800299a:	d902      	bls.n	80029a2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3303      	adds	r3, #3
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6919      	ldr	r1, [r3, #16]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	4603      	mov	r3, r0
 80029c0:	6978      	ldr	r0, [r7, #20]
 80029c2:	f001 ff67 	bl	8004894 <USB_WritePacket>

    ep->xfer_buff  += len;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	441a      	add	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a1a      	ldr	r2, [r3, #32]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	441a      	add	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d809      	bhi.n	8002a08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a1a      	ldr	r2, [r3, #32]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d203      	bcs.n	8002a08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1be      	bne.n	8002986 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d811      	bhi.n	8002a38 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	6939      	ldr	r1, [r7, #16]
 8002a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a34:	4013      	ands	r3, r2
 8002a36:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3720      	adds	r7, #32
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	333c      	adds	r3, #60	; 0x3c
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d17b      	bne.n	8002b72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d015      	beq.n	8002ab0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	4a61      	ldr	r2, [pc, #388]	; (8002c0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	f240 80b9 	bls.w	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80b3 	beq.w	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aac:	6093      	str	r3, [r2, #8]
 8002aae:	e0a7      	b.n	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2320      	movs	r3, #32
 8002aca:	6093      	str	r3, [r2, #8]
 8002acc:	e098      	b.n	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f040 8093 	bne.w	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	4a4b      	ldr	r2, [pc, #300]	; (8002c0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d90f      	bls.n	8002b02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af8:	461a      	mov	r2, r3
 8002afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002afe:	6093      	str	r3, [r2, #8]
 8002b00:	e07e      	b.n	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	3304      	adds	r3, #4
 8002b16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	69da      	ldr	r2, [r3, #28]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	0159      	lsls	r1, r3, #5
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	440b      	add	r3, r1
 8002b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2e:	1ad2      	subs	r2, r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d114      	bne.n	8002b64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2101      	movs	r1, #1
 8002b50:	f002 f936 	bl	8004dc0 <USB_EP0_OutStart>
 8002b54:	e006      	b.n	8002b64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	441a      	add	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	4619      	mov	r1, r3
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f004 fbc4 	bl	80072f8 <HAL_PCD_DataOutStageCallback>
 8002b70:	e046      	b.n	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	4a26      	ldr	r2, [pc, #152]	; (8002c10 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d124      	bne.n	8002bc4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b90:	461a      	mov	r2, r3
 8002b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b96:	6093      	str	r3, [r2, #8]
 8002b98:	e032      	b.n	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2320      	movs	r3, #32
 8002bb4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f004 fb9b 	bl	80072f8 <HAL_PCD_DataOutStageCallback>
 8002bc2:	e01d      	b.n	8002c00 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d114      	bne.n	8002bf4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d108      	bne.n	8002bf4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bec:	461a      	mov	r2, r3
 8002bee:	2100      	movs	r1, #0
 8002bf0:	f002 f8e6 	bl	8004dc0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f004 fb7c 	bl	80072f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	4f54300a 	.word	0x4f54300a
 8002c10:	4f54310a 	.word	0x4f54310a

08002c14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	333c      	adds	r3, #60	; 0x3c
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4a15      	ldr	r2, [pc, #84]	; (8002c9c <PCD_EP_OutSetupPacket_int+0x88>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d90e      	bls.n	8002c68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d009      	beq.n	8002c68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c60:	461a      	mov	r2, r3
 8002c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f004 fb33 	bl	80072d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <PCD_EP_OutSetupPacket_int+0x88>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d90c      	bls.n	8002c90 <PCD_EP_OutSetupPacket_int+0x7c>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d108      	bne.n	8002c90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	f002 f898 	bl	8004dc0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	4f54300a 	.word	0x4f54300a

08002ca0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	70fb      	strb	r3, [r7, #3]
 8002cac:	4613      	mov	r3, r2
 8002cae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d107      	bne.n	8002cce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002cbe:	883b      	ldrh	r3, [r7, #0]
 8002cc0:	0419      	lsls	r1, r3, #16
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28
 8002ccc:	e028      	b.n	8002d20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	4413      	add	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]
 8002ce0:	e00d      	b.n	8002cfe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	3340      	adds	r3, #64	; 0x40
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
 8002cfe:	7bfa      	ldrb	r2, [r7, #15]
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d3ec      	bcc.n	8002ce2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d08:	883b      	ldrh	r3, [r7, #0]
 8002d0a:	0418      	lsls	r0, r3, #16
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6819      	ldr	r1, [r3, #0]
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	4302      	orrs	r2, r0
 8002d18:	3340      	adds	r3, #64	; 0x40
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	460b      	mov	r3, r1
 8002d38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	887a      	ldrh	r2, [r7, #2]
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e267      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d075      	beq.n	8002e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d86:	4b88      	ldr	r3, [pc, #544]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d00c      	beq.n	8002dac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d92:	4b85      	ldr	r3, [pc, #532]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d112      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9e:	4b82      	ldr	r3, [pc, #520]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002daa:	d10b      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	4b7e      	ldr	r3, [pc, #504]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d05b      	beq.n	8002e70 <HAL_RCC_OscConfig+0x108>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d157      	bne.n	8002e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e242      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dcc:	d106      	bne.n	8002ddc <HAL_RCC_OscConfig+0x74>
 8002dce:	4b76      	ldr	r3, [pc, #472]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a75      	ldr	r2, [pc, #468]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e01d      	b.n	8002e18 <HAL_RCC_OscConfig+0xb0>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x98>
 8002de6:	4b70      	ldr	r3, [pc, #448]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6f      	ldr	r2, [pc, #444]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b6d      	ldr	r3, [pc, #436]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a6c      	ldr	r2, [pc, #432]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0xb0>
 8002e00:	4b69      	ldr	r3, [pc, #420]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a68      	ldr	r2, [pc, #416]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b66      	ldr	r3, [pc, #408]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a65      	ldr	r2, [pc, #404]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fd fe7a 	bl	8000b18 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fd fe76 	bl	8000b18 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e207      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	4b5b      	ldr	r3, [pc, #364]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0xc0>
 8002e46:	e014      	b.n	8002e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fd fe66 	bl	8000b18 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fd fe62 	bl	8000b18 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e1f3      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e62:	4b51      	ldr	r3, [pc, #324]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0xe8>
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d063      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e7e:	4b4a      	ldr	r3, [pc, #296]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8a:	4b47      	ldr	r3, [pc, #284]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d11c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e96:	4b44      	ldr	r3, [pc, #272]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d116      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea2:	4b41      	ldr	r3, [pc, #260]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_RCC_OscConfig+0x152>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e1c7      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eba:	4b3b      	ldr	r3, [pc, #236]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4937      	ldr	r1, [pc, #220]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ece:	e03a      	b.n	8002f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d020      	beq.n	8002f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed8:	4b34      	ldr	r3, [pc, #208]	; (8002fac <HAL_RCC_OscConfig+0x244>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7fd fe1b 	bl	8000b18 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee6:	f7fd fe17 	bl	8000b18 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e1a8      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef8:	4b2b      	ldr	r3, [pc, #172]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f04:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4925      	ldr	r1, [pc, #148]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
 8002f18:	e015      	b.n	8002f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	4b24      	ldr	r3, [pc, #144]	; (8002fac <HAL_RCC_OscConfig+0x244>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fd fdfa 	bl	8000b18 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f28:	f7fd fdf6 	bl	8000b18 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e187      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3a:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d036      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d016      	beq.n	8002f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5a:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <HAL_RCC_OscConfig+0x248>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fd fdda 	bl	8000b18 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f68:	f7fd fdd6 	bl	8000b18 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e167      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x200>
 8002f86:	e01b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_OscConfig+0x248>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8e:	f7fd fdc3 	bl	8000b18 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f94:	e00e      	b.n	8002fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f96:	f7fd fdbf 	bl	8000b18 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d907      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e150      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	42470000 	.word	0x42470000
 8002fb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb4:	4b88      	ldr	r3, [pc, #544]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ea      	bne.n	8002f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8097 	beq.w	80030fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd2:	4b81      	ldr	r3, [pc, #516]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10f      	bne.n	8002ffe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	4b7d      	ldr	r3, [pc, #500]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	4a7c      	ldr	r2, [pc, #496]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fec:	6413      	str	r3, [r2, #64]	; 0x40
 8002fee:	4b7a      	ldr	r3, [pc, #488]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffe:	4b77      	ldr	r3, [pc, #476]	; (80031dc <HAL_RCC_OscConfig+0x474>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d118      	bne.n	800303c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300a:	4b74      	ldr	r3, [pc, #464]	; (80031dc <HAL_RCC_OscConfig+0x474>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a73      	ldr	r2, [pc, #460]	; (80031dc <HAL_RCC_OscConfig+0x474>)
 8003010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003016:	f7fd fd7f 	bl	8000b18 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301e:	f7fd fd7b 	bl	8000b18 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e10c      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003030:	4b6a      	ldr	r3, [pc, #424]	; (80031dc <HAL_RCC_OscConfig+0x474>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d106      	bne.n	8003052 <HAL_RCC_OscConfig+0x2ea>
 8003044:	4b64      	ldr	r3, [pc, #400]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	4a63      	ldr	r2, [pc, #396]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6713      	str	r3, [r2, #112]	; 0x70
 8003050:	e01c      	b.n	800308c <HAL_RCC_OscConfig+0x324>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b05      	cmp	r3, #5
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x30c>
 800305a:	4b5f      	ldr	r3, [pc, #380]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	4a5e      	ldr	r2, [pc, #376]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003060:	f043 0304 	orr.w	r3, r3, #4
 8003064:	6713      	str	r3, [r2, #112]	; 0x70
 8003066:	4b5c      	ldr	r3, [pc, #368]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	4a5b      	ldr	r2, [pc, #364]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6713      	str	r3, [r2, #112]	; 0x70
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0x324>
 8003074:	4b58      	ldr	r3, [pc, #352]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4a57      	ldr	r2, [pc, #348]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	6713      	str	r3, [r2, #112]	; 0x70
 8003080:	4b55      	ldr	r3, [pc, #340]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	4a54      	ldr	r2, [pc, #336]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003086:	f023 0304 	bic.w	r3, r3, #4
 800308a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d015      	beq.n	80030c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003094:	f7fd fd40 	bl	8000b18 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309a:	e00a      	b.n	80030b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800309c:	f7fd fd3c 	bl	8000b18 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e0cb      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b2:	4b49      	ldr	r3, [pc, #292]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 80030b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0ee      	beq.n	800309c <HAL_RCC_OscConfig+0x334>
 80030be:	e014      	b.n	80030ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c0:	f7fd fd2a 	bl	8000b18 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c6:	e00a      	b.n	80030de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7fd fd26 	bl	8000b18 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e0b5      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030de:	4b3e      	ldr	r3, [pc, #248]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1ee      	bne.n	80030c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d105      	bne.n	80030fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f0:	4b39      	ldr	r3, [pc, #228]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	4a38      	ldr	r2, [pc, #224]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 80030f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80a1 	beq.w	8003248 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003106:	4b34      	ldr	r3, [pc, #208]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b08      	cmp	r3, #8
 8003110:	d05c      	beq.n	80031cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d141      	bne.n	800319e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311a:	4b31      	ldr	r3, [pc, #196]	; (80031e0 <HAL_RCC_OscConfig+0x478>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fd fcfa 	bl	8000b18 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003128:	f7fd fcf6 	bl	8000b18 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e087      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313a:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	019b      	lsls	r3, r3, #6
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	3b01      	subs	r3, #1
 8003160:	041b      	lsls	r3, r3, #16
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	061b      	lsls	r3, r3, #24
 800316a:	491b      	ldr	r1, [pc, #108]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <HAL_RCC_OscConfig+0x478>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7fd fccf 	bl	8000b18 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317e:	f7fd fccb 	bl	8000b18 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e05c      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x416>
 800319c:	e054      	b.n	8003248 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319e:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <HAL_RCC_OscConfig+0x478>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fd fcb8 	bl	8000b18 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fd fcb4 	bl	8000b18 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e045      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_RCC_OscConfig+0x470>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x444>
 80031ca:	e03d      	b.n	8003248 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e038      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40007000 	.word	0x40007000
 80031e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031e4:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <HAL_RCC_OscConfig+0x4ec>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d028      	beq.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d121      	bne.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d11a      	bne.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003214:	4013      	ands	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800321a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800321c:	4293      	cmp	r3, r2
 800321e:	d111      	bne.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	085b      	lsrs	r3, r3, #1
 800322c:	3b01      	subs	r3, #1
 800322e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d107      	bne.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800

08003258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0cc      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800326c:	4b68      	ldr	r3, [pc, #416]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d90c      	bls.n	8003294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b65      	ldr	r3, [pc, #404]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003282:	4b63      	ldr	r3, [pc, #396]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0b8      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d020      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032ac:	4b59      	ldr	r3, [pc, #356]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a58      	ldr	r2, [pc, #352]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c4:	4b53      	ldr	r3, [pc, #332]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	4a52      	ldr	r2, [pc, #328]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d0:	4b50      	ldr	r3, [pc, #320]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	494d      	ldr	r1, [pc, #308]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d044      	beq.n	8003378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f6:	4b47      	ldr	r3, [pc, #284]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d119      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e07f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d003      	beq.n	8003316 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003312:	2b03      	cmp	r3, #3
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003316:	4b3f      	ldr	r3, [pc, #252]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e06f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003326:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e067      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003336:	4b37      	ldr	r3, [pc, #220]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f023 0203 	bic.w	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4934      	ldr	r1, [pc, #208]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	4313      	orrs	r3, r2
 8003346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003348:	f7fd fbe6 	bl	8000b18 <HAL_GetTick>
 800334c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	e00a      	b.n	8003366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003350:	f7fd fbe2 	bl	8000b18 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e04f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 020c 	and.w	r2, r3, #12
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	429a      	cmp	r2, r3
 8003376:	d1eb      	bne.n	8003350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003378:	4b25      	ldr	r3, [pc, #148]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d20c      	bcs.n	80033a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b22      	ldr	r3, [pc, #136]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338e:	4b20      	ldr	r3, [pc, #128]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e032      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ac:	4b19      	ldr	r3, [pc, #100]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4916      	ldr	r1, [pc, #88]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ca:	4b12      	ldr	r3, [pc, #72]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	490e      	ldr	r1, [pc, #56]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033de:	f000 f821 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 80033e2:	4602      	mov	r2, r0
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	490a      	ldr	r1, [pc, #40]	; (8003418 <HAL_RCC_ClockConfig+0x1c0>)
 80033f0:	5ccb      	ldrb	r3, [r1, r3]
 80033f2:	fa22 f303 	lsr.w	r3, r2, r3
 80033f6:	4a09      	ldr	r2, [pc, #36]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_RCC_ClockConfig+0x1c8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd fb46 	bl	8000a90 <HAL_InitTick>

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40023c00 	.word	0x40023c00
 8003414:	40023800 	.word	0x40023800
 8003418:	080081f8 	.word	0x080081f8
 800341c:	20000014 	.word	0x20000014
 8003420:	20000018 	.word	0x20000018

08003424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003428:	b094      	sub	sp, #80	; 0x50
 800342a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	647b      	str	r3, [r7, #68]	; 0x44
 8003430:	2300      	movs	r3, #0
 8003432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003434:	2300      	movs	r3, #0
 8003436:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800343c:	4b79      	ldr	r3, [pc, #484]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b08      	cmp	r3, #8
 8003446:	d00d      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0x40>
 8003448:	2b08      	cmp	r3, #8
 800344a:	f200 80e1 	bhi.w	8003610 <HAL_RCC_GetSysClockFreq+0x1ec>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x34>
 8003452:	2b04      	cmp	r3, #4
 8003454:	d003      	beq.n	800345e <HAL_RCC_GetSysClockFreq+0x3a>
 8003456:	e0db      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003458:	4b73      	ldr	r3, [pc, #460]	; (8003628 <HAL_RCC_GetSysClockFreq+0x204>)
 800345a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800345c:	e0db      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800345e:	4b73      	ldr	r3, [pc, #460]	; (800362c <HAL_RCC_GetSysClockFreq+0x208>)
 8003460:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003462:	e0d8      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003464:	4b6f      	ldr	r3, [pc, #444]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800346c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800346e:	4b6d      	ldr	r3, [pc, #436]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d063      	beq.n	8003542 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347a:	4b6a      	ldr	r3, [pc, #424]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	099b      	lsrs	r3, r3, #6
 8003480:	2200      	movs	r2, #0
 8003482:	63bb      	str	r3, [r7, #56]	; 0x38
 8003484:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348c:	633b      	str	r3, [r7, #48]	; 0x30
 800348e:	2300      	movs	r3, #0
 8003490:	637b      	str	r3, [r7, #52]	; 0x34
 8003492:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003496:	4622      	mov	r2, r4
 8003498:	462b      	mov	r3, r5
 800349a:	f04f 0000 	mov.w	r0, #0
 800349e:	f04f 0100 	mov.w	r1, #0
 80034a2:	0159      	lsls	r1, r3, #5
 80034a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a8:	0150      	lsls	r0, r2, #5
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4621      	mov	r1, r4
 80034b0:	1a51      	subs	r1, r2, r1
 80034b2:	6139      	str	r1, [r7, #16]
 80034b4:	4629      	mov	r1, r5
 80034b6:	eb63 0301 	sbc.w	r3, r3, r1
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034c8:	4659      	mov	r1, fp
 80034ca:	018b      	lsls	r3, r1, #6
 80034cc:	4651      	mov	r1, sl
 80034ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034d2:	4651      	mov	r1, sl
 80034d4:	018a      	lsls	r2, r1, #6
 80034d6:	4651      	mov	r1, sl
 80034d8:	ebb2 0801 	subs.w	r8, r2, r1
 80034dc:	4659      	mov	r1, fp
 80034de:	eb63 0901 	sbc.w	r9, r3, r1
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034f6:	4690      	mov	r8, r2
 80034f8:	4699      	mov	r9, r3
 80034fa:	4623      	mov	r3, r4
 80034fc:	eb18 0303 	adds.w	r3, r8, r3
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	462b      	mov	r3, r5
 8003504:	eb49 0303 	adc.w	r3, r9, r3
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003516:	4629      	mov	r1, r5
 8003518:	024b      	lsls	r3, r1, #9
 800351a:	4621      	mov	r1, r4
 800351c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003520:	4621      	mov	r1, r4
 8003522:	024a      	lsls	r2, r1, #9
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800352a:	2200      	movs	r2, #0
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
 800352e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003530:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003534:	f7fc fea4 	bl	8000280 <__aeabi_uldivmod>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4613      	mov	r3, r2
 800353e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003540:	e058      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003542:	4b38      	ldr	r3, [pc, #224]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	099b      	lsrs	r3, r3, #6
 8003548:	2200      	movs	r2, #0
 800354a:	4618      	mov	r0, r3
 800354c:	4611      	mov	r1, r2
 800354e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003552:	623b      	str	r3, [r7, #32]
 8003554:	2300      	movs	r3, #0
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
 8003558:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800355c:	4642      	mov	r2, r8
 800355e:	464b      	mov	r3, r9
 8003560:	f04f 0000 	mov.w	r0, #0
 8003564:	f04f 0100 	mov.w	r1, #0
 8003568:	0159      	lsls	r1, r3, #5
 800356a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800356e:	0150      	lsls	r0, r2, #5
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4641      	mov	r1, r8
 8003576:	ebb2 0a01 	subs.w	sl, r2, r1
 800357a:	4649      	mov	r1, r9
 800357c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800358c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003590:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003594:	ebb2 040a 	subs.w	r4, r2, sl
 8003598:	eb63 050b 	sbc.w	r5, r3, fp
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	00eb      	lsls	r3, r5, #3
 80035a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035aa:	00e2      	lsls	r2, r4, #3
 80035ac:	4614      	mov	r4, r2
 80035ae:	461d      	mov	r5, r3
 80035b0:	4643      	mov	r3, r8
 80035b2:	18e3      	adds	r3, r4, r3
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	464b      	mov	r3, r9
 80035b8:	eb45 0303 	adc.w	r3, r5, r3
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ca:	4629      	mov	r1, r5
 80035cc:	028b      	lsls	r3, r1, #10
 80035ce:	4621      	mov	r1, r4
 80035d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035d4:	4621      	mov	r1, r4
 80035d6:	028a      	lsls	r2, r1, #10
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035de:	2200      	movs	r2, #0
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	61fa      	str	r2, [r7, #28]
 80035e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035e8:	f7fc fe4a 	bl	8000280 <__aeabi_uldivmod>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4613      	mov	r3, r2
 80035f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	3301      	adds	r3, #1
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003604:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003608:	fbb2 f3f3 	udiv	r3, r2, r3
 800360c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800360e:	e002      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_RCC_GetSysClockFreq+0x204>)
 8003612:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003618:	4618      	mov	r0, r3
 800361a:	3750      	adds	r7, #80	; 0x50
 800361c:	46bd      	mov	sp, r7
 800361e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800
 8003628:	00f42400 	.word	0x00f42400
 800362c:	007a1200 	.word	0x007a1200

08003630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <HAL_RCC_GetHCLKFreq+0x14>)
 8003636:	681b      	ldr	r3, [r3, #0]
}
 8003638:	4618      	mov	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20000014 	.word	0x20000014

08003648 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003648:	b084      	sub	sp, #16
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	f107 001c 	add.w	r0, r7, #28
 8003656:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	2b01      	cmp	r3, #1
 800365e:	d122      	bne.n	80036a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800368a:	2b01      	cmp	r3, #1
 800368c:	d105      	bne.n	800369a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f001 fbee 	bl	8004e7c <USB_CoreReset>
 80036a0:	4603      	mov	r3, r0
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	e01a      	b.n	80036dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f001 fbe2 	bl	8004e7c <USB_CoreReset>
 80036b8:	4603      	mov	r3, r0
 80036ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38
 80036ce:	e005      	b.n	80036dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d10b      	bne.n	80036fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f043 0206 	orr.w	r2, r3, #6
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003706:	b004      	add	sp, #16
 8003708:	4770      	bx	lr
	...

0800370c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	4613      	mov	r3, r2
 8003718:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	2b02      	cmp	r3, #2
 800371e:	d165      	bne.n	80037ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4a41      	ldr	r2, [pc, #260]	; (8003828 <USB_SetTurnaroundTime+0x11c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d906      	bls.n	8003736 <USB_SetTurnaroundTime+0x2a>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4a40      	ldr	r2, [pc, #256]	; (800382c <USB_SetTurnaroundTime+0x120>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d202      	bcs.n	8003736 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003730:	230f      	movs	r3, #15
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	e062      	b.n	80037fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4a3c      	ldr	r2, [pc, #240]	; (800382c <USB_SetTurnaroundTime+0x120>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d306      	bcc.n	800374c <USB_SetTurnaroundTime+0x40>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4a3b      	ldr	r2, [pc, #236]	; (8003830 <USB_SetTurnaroundTime+0x124>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d202      	bcs.n	800374c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003746:	230e      	movs	r3, #14
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	e057      	b.n	80037fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4a38      	ldr	r2, [pc, #224]	; (8003830 <USB_SetTurnaroundTime+0x124>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d306      	bcc.n	8003762 <USB_SetTurnaroundTime+0x56>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4a37      	ldr	r2, [pc, #220]	; (8003834 <USB_SetTurnaroundTime+0x128>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d202      	bcs.n	8003762 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800375c:	230d      	movs	r3, #13
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	e04c      	b.n	80037fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4a33      	ldr	r2, [pc, #204]	; (8003834 <USB_SetTurnaroundTime+0x128>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d306      	bcc.n	8003778 <USB_SetTurnaroundTime+0x6c>
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4a32      	ldr	r2, [pc, #200]	; (8003838 <USB_SetTurnaroundTime+0x12c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d802      	bhi.n	8003778 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003772:	230c      	movs	r3, #12
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	e041      	b.n	80037fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4a2f      	ldr	r2, [pc, #188]	; (8003838 <USB_SetTurnaroundTime+0x12c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d906      	bls.n	800378e <USB_SetTurnaroundTime+0x82>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4a2e      	ldr	r2, [pc, #184]	; (800383c <USB_SetTurnaroundTime+0x130>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d802      	bhi.n	800378e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003788:	230b      	movs	r3, #11
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	e036      	b.n	80037fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	4a2a      	ldr	r2, [pc, #168]	; (800383c <USB_SetTurnaroundTime+0x130>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d906      	bls.n	80037a4 <USB_SetTurnaroundTime+0x98>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4a29      	ldr	r2, [pc, #164]	; (8003840 <USB_SetTurnaroundTime+0x134>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d802      	bhi.n	80037a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800379e:	230a      	movs	r3, #10
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	e02b      	b.n	80037fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4a26      	ldr	r2, [pc, #152]	; (8003840 <USB_SetTurnaroundTime+0x134>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d906      	bls.n	80037ba <USB_SetTurnaroundTime+0xae>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4a25      	ldr	r2, [pc, #148]	; (8003844 <USB_SetTurnaroundTime+0x138>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d202      	bcs.n	80037ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80037b4:	2309      	movs	r3, #9
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	e020      	b.n	80037fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4a21      	ldr	r2, [pc, #132]	; (8003844 <USB_SetTurnaroundTime+0x138>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d306      	bcc.n	80037d0 <USB_SetTurnaroundTime+0xc4>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4a20      	ldr	r2, [pc, #128]	; (8003848 <USB_SetTurnaroundTime+0x13c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d802      	bhi.n	80037d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80037ca:	2308      	movs	r3, #8
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	e015      	b.n	80037fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <USB_SetTurnaroundTime+0x13c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d906      	bls.n	80037e6 <USB_SetTurnaroundTime+0xda>
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4a1c      	ldr	r2, [pc, #112]	; (800384c <USB_SetTurnaroundTime+0x140>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d202      	bcs.n	80037e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80037e0:	2307      	movs	r3, #7
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	e00a      	b.n	80037fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80037e6:	2306      	movs	r3, #6
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	e007      	b.n	80037fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d102      	bne.n	80037f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80037f2:	2309      	movs	r3, #9
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	e001      	b.n	80037fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80037f8:	2309      	movs	r3, #9
 80037fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	029b      	lsls	r3, r3, #10
 8003810:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003814:	431a      	orrs	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	371c      	adds	r7, #28
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	00d8acbf 	.word	0x00d8acbf
 800382c:	00e4e1c0 	.word	0x00e4e1c0
 8003830:	00f42400 	.word	0x00f42400
 8003834:	01067380 	.word	0x01067380
 8003838:	011a499f 	.word	0x011a499f
 800383c:	01312cff 	.word	0x01312cff
 8003840:	014ca43f 	.word	0x014ca43f
 8003844:	016e3600 	.word	0x016e3600
 8003848:	01a6ab1f 	.word	0x01a6ab1f
 800384c:	01e84800 	.word	0x01e84800

08003850 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f043 0201 	orr.w	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f023 0201 	bic.w	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d115      	bne.n	80038e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038c2:	2001      	movs	r0, #1
 80038c4:	f7fd f934 	bl	8000b30 <HAL_Delay>
      ms++;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3301      	adds	r3, #1
 80038cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f001 fa45 	bl	8004d5e <USB_GetMode>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d01e      	beq.n	8003918 <USB_SetCurrentMode+0x84>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b31      	cmp	r3, #49	; 0x31
 80038de:	d9f0      	bls.n	80038c2 <USB_SetCurrentMode+0x2e>
 80038e0:	e01a      	b.n	8003918 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d115      	bne.n	8003914 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038f4:	2001      	movs	r0, #1
 80038f6:	f7fd f91b 	bl	8000b30 <HAL_Delay>
      ms++;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3301      	adds	r3, #1
 80038fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f001 fa2c 	bl	8004d5e <USB_GetMode>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <USB_SetCurrentMode+0x84>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b31      	cmp	r3, #49	; 0x31
 8003910:	d9f0      	bls.n	80038f4 <USB_SetCurrentMode+0x60>
 8003912:	e001      	b.n	8003918 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e005      	b.n	8003924 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b32      	cmp	r3, #50	; 0x32
 800391c:	d101      	bne.n	8003922 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800392c:	b084      	sub	sp, #16
 800392e:	b580      	push	{r7, lr}
 8003930:	b086      	sub	sp, #24
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800393a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	e009      	b.n	8003960 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	3340      	adds	r3, #64	; 0x40
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	2200      	movs	r2, #0
 8003958:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	3301      	adds	r3, #1
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b0e      	cmp	r3, #14
 8003964:	d9f2      	bls.n	800394c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d11c      	bne.n	80039a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800397a:	f043 0302 	orr.w	r3, r3, #2
 800397e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003984:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	639a      	str	r2, [r3, #56]	; 0x38
 80039a4:	e00b      	b.n	80039be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039c4:	461a      	mov	r2, r3
 80039c6:	2300      	movs	r3, #0
 80039c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d0:	4619      	mov	r1, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d8:	461a      	mov	r2, r3
 80039da:	680b      	ldr	r3, [r1, #0]
 80039dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d10c      	bne.n	80039fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d104      	bne.n	80039f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039ea:	2100      	movs	r1, #0
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f965 	bl	8003cbc <USB_SetDevSpeed>
 80039f2:	e008      	b.n	8003a06 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039f4:	2101      	movs	r1, #1
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f960 	bl	8003cbc <USB_SetDevSpeed>
 80039fc:	e003      	b.n	8003a06 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039fe:	2103      	movs	r1, #3
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f95b 	bl	8003cbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a06:	2110      	movs	r1, #16
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f8f3 	bl	8003bf4 <USB_FlushTxFifo>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f91f 	bl	8003c5c <USB_FlushRxFifo>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2e:	461a      	mov	r2, r3
 8003a30:	2300      	movs	r3, #0
 8003a32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a46:	461a      	mov	r2, r3
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	e043      	b.n	8003ada <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a68:	d118      	bne.n	8003a9c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	e013      	b.n	8003aae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a92:	461a      	mov	r2, r3
 8003a94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e008      	b.n	8003aae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2300      	movs	r3, #0
 8003aac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aba:	461a      	mov	r2, r3
 8003abc:	2300      	movs	r3, #0
 8003abe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003acc:	461a      	mov	r2, r3
 8003ace:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ad2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d3b7      	bcc.n	8003a52 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	e043      	b.n	8003b70 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003afe:	d118      	bne.n	8003b32 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b12:	461a      	mov	r2, r3
 8003b14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e013      	b.n	8003b44 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b28:	461a      	mov	r2, r3
 8003b2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	e008      	b.n	8003b44 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3e:	461a      	mov	r2, r3
 8003b40:	2300      	movs	r3, #0
 8003b42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b50:	461a      	mov	r2, r3
 8003b52:	2300      	movs	r3, #0
 8003b54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b62:	461a      	mov	r2, r3
 8003b64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d3b7      	bcc.n	8003ae8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d105      	bne.n	8003bac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f043 0210 	orr.w	r2, r3, #16
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699a      	ldr	r2, [r3, #24]
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <USB_DevInit+0x2c4>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	f043 0208 	orr.w	r2, r3, #8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d107      	bne.n	8003be0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bd8:	f043 0304 	orr.w	r3, r3, #4
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bec:	b004      	add	sp, #16
 8003bee:	4770      	bx	lr
 8003bf0:	803c3800 	.word	0x803c3800

08003bf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3301      	adds	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <USB_FlushTxFifo+0x64>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e01b      	b.n	8003c4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	daf2      	bge.n	8003c02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	019b      	lsls	r3, r3, #6
 8003c24:	f043 0220 	orr.w	r2, r3, #32
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a08      	ldr	r2, [pc, #32]	; (8003c58 <USB_FlushTxFifo+0x64>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e006      	b.n	8003c4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b20      	cmp	r3, #32
 8003c48:	d0f0      	beq.n	8003c2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	00030d40 	.word	0x00030d40

08003c5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a11      	ldr	r2, [pc, #68]	; (8003cb8 <USB_FlushRxFifo+0x5c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e018      	b.n	8003cac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	daf2      	bge.n	8003c68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2210      	movs	r2, #16
 8003c8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4a08      	ldr	r2, [pc, #32]	; (8003cb8 <USB_FlushRxFifo+0x5c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e006      	b.n	8003cac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	2b10      	cmp	r3, #16
 8003ca8:	d0f0      	beq.n	8003c8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	00030d40 	.word	0x00030d40

08003cbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	68f9      	ldr	r1, [r7, #12]
 8003cd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b087      	sub	sp, #28
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 0306 	and.w	r3, r3, #6
 8003d06:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d102      	bne.n	8003d14 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	75fb      	strb	r3, [r7, #23]
 8003d12:	e00a      	b.n	8003d2a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d002      	beq.n	8003d20 <USB_GetDevSpeed+0x32>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b06      	cmp	r3, #6
 8003d1e:	d102      	bne.n	8003d26 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003d20:	2302      	movs	r3, #2
 8003d22:	75fb      	strb	r3, [r7, #23]
 8003d24:	e001      	b.n	8003d2a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003d26:	230f      	movs	r3, #15
 8003d28:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	785b      	ldrb	r3, [r3, #1]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d13a      	bne.n	8003dca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5a:	69da      	ldr	r2, [r3, #28]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	2101      	movs	r1, #1
 8003d66:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	68f9      	ldr	r1, [r7, #12]
 8003d6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d155      	bne.n	8003e38 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	791b      	ldrb	r3, [r3, #4]
 8003da6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003da8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	059b      	lsls	r3, r3, #22
 8003dae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003db0:	4313      	orrs	r3, r2
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	0151      	lsls	r1, r2, #5
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	440a      	add	r2, r1
 8003dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	e036      	b.n	8003e38 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd0:	69da      	ldr	r2, [r3, #28]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	2101      	movs	r1, #1
 8003ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8003de0:	041b      	lsls	r3, r3, #16
 8003de2:	68f9      	ldr	r1, [r7, #12]
 8003de4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d11a      	bne.n	8003e38 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	791b      	ldrb	r3, [r3, #4]
 8003e1c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	4313      	orrs	r3, r2
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	0151      	lsls	r1, r2, #5
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	440a      	add	r2, r1
 8003e2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e36:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	785b      	ldrb	r3, [r3, #1]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d161      	bne.n	8003f28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e7a:	d11f      	bne.n	8003ebc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	0151      	lsls	r1, r2, #5
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	440a      	add	r2, r1
 8003e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	0151      	lsls	r1, r2, #5
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	440a      	add	r2, r1
 8003eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003eba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	2101      	movs	r1, #1
 8003ece:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	68f9      	ldr	r1, [r7, #12]
 8003ed8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003edc:	4013      	ands	r3, r2
 8003ede:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f00:	4013      	ands	r3, r2
 8003f02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	0159      	lsls	r1, r3, #5
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	440b      	add	r3, r1
 8003f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4b35      	ldr	r3, [pc, #212]	; (8003ff8 <USB_DeactivateEndpoint+0x1b0>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
 8003f26:	e060      	b.n	8003fea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f3e:	d11f      	bne.n	8003f80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	0151      	lsls	r1, r2, #5
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	440a      	add	r2, r1
 8003f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	0151      	lsls	r1, r2, #5
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	440a      	add	r2, r1
 8003f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	2101      	movs	r1, #1
 8003f92:	fa01 f303 	lsl.w	r3, r1, r3
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	68f9      	ldr	r1, [r7, #12]
 8003f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003faa:	69da      	ldr	r2, [r3, #28]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	68f9      	ldr	r1, [r7, #12]
 8003fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	0159      	lsls	r1, r3, #5
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	440b      	add	r3, r1
 8003fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <USB_DeactivateEndpoint+0x1b4>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	ec337800 	.word	0xec337800
 8003ffc:	eff37800 	.word	0xeff37800

08004000 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08a      	sub	sp, #40	; 0x28
 8004004:	af02      	add	r7, sp, #8
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	4613      	mov	r3, r2
 800400c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	785b      	ldrb	r3, [r3, #1]
 800401c:	2b01      	cmp	r3, #1
 800401e:	f040 815c 	bne.w	80042da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d132      	bne.n	8004090 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	0151      	lsls	r1, r2, #5
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	440a      	add	r2, r1
 8004040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004044:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004048:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800404c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	0151      	lsls	r1, r2, #5
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	440a      	add	r2, r1
 8004064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800406c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	0151      	lsls	r1, r2, #5
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	440a      	add	r2, r1
 8004084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004088:	0cdb      	lsrs	r3, r3, #19
 800408a:	04db      	lsls	r3, r3, #19
 800408c:	6113      	str	r3, [r2, #16]
 800408e:	e074      	b.n	800417a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	0151      	lsls	r1, r2, #5
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	440a      	add	r2, r1
 80040a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040aa:	0cdb      	lsrs	r3, r3, #19
 80040ac:	04db      	lsls	r3, r3, #19
 80040ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	0151      	lsls	r1, r2, #5
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	440a      	add	r2, r1
 80040c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	6999      	ldr	r1, [r3, #24]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	440b      	add	r3, r1
 80040ec:	1e59      	subs	r1, r3, #1
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80040f6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80040f8:	4b9d      	ldr	r3, [pc, #628]	; (8004370 <USB_EPStartXfer+0x370>)
 80040fa:	400b      	ands	r3, r1
 80040fc:	69b9      	ldr	r1, [r7, #24]
 80040fe:	0148      	lsls	r0, r1, #5
 8004100:	69f9      	ldr	r1, [r7, #28]
 8004102:	4401      	add	r1, r0
 8004104:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004108:	4313      	orrs	r3, r2
 800410a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004122:	69b9      	ldr	r1, [r7, #24]
 8004124:	0148      	lsls	r0, r1, #5
 8004126:	69f9      	ldr	r1, [r7, #28]
 8004128:	4401      	add	r1, r0
 800412a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800412e:	4313      	orrs	r3, r2
 8004130:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	791b      	ldrb	r3, [r3, #4]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d11f      	bne.n	800417a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	0151      	lsls	r1, r2, #5
 800414c:	69fa      	ldr	r2, [r7, #28]
 800414e:	440a      	add	r2, r1
 8004150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004154:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004158:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	0151      	lsls	r1, r2, #5
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	440a      	add	r2, r1
 8004170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004174:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004178:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d14b      	bne.n	8004218 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d009      	beq.n	800419c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004194:	461a      	mov	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	791b      	ldrb	r3, [r3, #4]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d128      	bne.n	80041f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d110      	bne.n	80041d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	0151      	lsls	r1, r2, #5
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	440a      	add	r2, r1
 80041ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	e00f      	b.n	80041f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	0151      	lsls	r1, r2, #5
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	440a      	add	r2, r1
 80041ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	0151      	lsls	r1, r2, #5
 8004208:	69fa      	ldr	r2, [r7, #28]
 800420a:	440a      	add	r2, r1
 800420c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004210:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	e133      	b.n	8004480 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	0151      	lsls	r1, r2, #5
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	440a      	add	r2, r1
 800422e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004232:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004236:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	791b      	ldrb	r3, [r3, #4]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d015      	beq.n	800426c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 811b 	beq.w	8004480 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	2101      	movs	r1, #1
 800425c:	fa01 f303 	lsl.w	r3, r1, r3
 8004260:	69f9      	ldr	r1, [r7, #28]
 8004262:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004266:	4313      	orrs	r3, r2
 8004268:	634b      	str	r3, [r1, #52]	; 0x34
 800426a:	e109      	b.n	8004480 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d110      	bne.n	800429e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	0151      	lsls	r1, r2, #5
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	440a      	add	r2, r1
 8004292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004296:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	e00f      	b.n	80042be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	0151      	lsls	r1, r2, #5
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	440a      	add	r2, r1
 80042b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	6919      	ldr	r1, [r3, #16]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	781a      	ldrb	r2, [r3, #0]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	b298      	uxth	r0, r3
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	4603      	mov	r3, r0
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 fade 	bl	8004894 <USB_WritePacket>
 80042d8:	e0d2      	b.n	8004480 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	0151      	lsls	r1, r2, #5
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	440a      	add	r2, r1
 80042f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042f4:	0cdb      	lsrs	r3, r3, #19
 80042f6:	04db      	lsls	r3, r3, #19
 80042f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	0151      	lsls	r1, r2, #5
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	440a      	add	r2, r1
 8004310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004314:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004318:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800431c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d126      	bne.n	8004374 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800433c:	69b9      	ldr	r1, [r7, #24]
 800433e:	0148      	lsls	r0, r1, #5
 8004340:	69f9      	ldr	r1, [r7, #28]
 8004342:	4401      	add	r1, r0
 8004344:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004348:	4313      	orrs	r3, r2
 800434a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	0151      	lsls	r1, r2, #5
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	440a      	add	r2, r1
 8004362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004366:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800436a:	6113      	str	r3, [r2, #16]
 800436c:	e03a      	b.n	80043e4 <USB_EPStartXfer+0x3e4>
 800436e:	bf00      	nop
 8004370:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	699a      	ldr	r2, [r3, #24]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4413      	add	r3, r2
 800437e:	1e5a      	subs	r2, r3, #1
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	fbb2 f3f3 	udiv	r3, r2, r3
 8004388:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	8afa      	ldrh	r2, [r7, #22]
 8004390:	fb03 f202 	mul.w	r2, r3, r2
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	8afb      	ldrh	r3, [r7, #22]
 80043a8:	04d9      	lsls	r1, r3, #19
 80043aa:	4b38      	ldr	r3, [pc, #224]	; (800448c <USB_EPStartXfer+0x48c>)
 80043ac:	400b      	ands	r3, r1
 80043ae:	69b9      	ldr	r1, [r7, #24]
 80043b0:	0148      	lsls	r0, r1, #5
 80043b2:	69f9      	ldr	r1, [r7, #28]
 80043b4:	4401      	add	r1, r0
 80043b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043ba:	4313      	orrs	r3, r2
 80043bc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d4:	69b9      	ldr	r1, [r7, #24]
 80043d6:	0148      	lsls	r0, r1, #5
 80043d8:	69f9      	ldr	r1, [r7, #28]
 80043da:	4401      	add	r1, r0
 80043dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043e0:	4313      	orrs	r3, r2
 80043e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d10d      	bne.n	8004406 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d009      	beq.n	8004406 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	6919      	ldr	r1, [r3, #16]
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004402:	460a      	mov	r2, r1
 8004404:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	791b      	ldrb	r3, [r3, #4]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d128      	bne.n	8004460 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d110      	bne.n	8004440 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	0151      	lsls	r1, r2, #5
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	440a      	add	r2, r1
 8004434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004438:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e00f      	b.n	8004460 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	0151      	lsls	r1, r2, #5
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	440a      	add	r2, r1
 8004456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800445a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	0151      	lsls	r1, r2, #5
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	440a      	add	r2, r1
 8004476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800447a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800447e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	1ff80000 	.word	0x1ff80000

08004490 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	785b      	ldrb	r3, [r3, #1]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	f040 80ce 	bne.w	800464e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d132      	bne.n	8004520 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	0151      	lsls	r1, r2, #5
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	440a      	add	r2, r1
 80044d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	0151      	lsls	r1, r2, #5
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	440a      	add	r2, r1
 80044f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	0151      	lsls	r1, r2, #5
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	440a      	add	r2, r1
 8004514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004518:	0cdb      	lsrs	r3, r3, #19
 800451a:	04db      	lsls	r3, r3, #19
 800451c:	6113      	str	r3, [r2, #16]
 800451e:	e04e      	b.n	80045be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	0151      	lsls	r1, r2, #5
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	440a      	add	r2, r1
 8004536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800453a:	0cdb      	lsrs	r3, r3, #19
 800453c:	04db      	lsls	r3, r3, #19
 800453e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	0151      	lsls	r1, r2, #5
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	440a      	add	r2, r1
 8004556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800455a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800455e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004562:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	699a      	ldr	r2, [r3, #24]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	429a      	cmp	r2, r3
 800456e:	d903      	bls.n	8004578 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	0151      	lsls	r1, r2, #5
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	440a      	add	r2, r1
 800458e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004592:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004596:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ae:	6939      	ldr	r1, [r7, #16]
 80045b0:	0148      	lsls	r0, r1, #5
 80045b2:	6979      	ldr	r1, [r7, #20]
 80045b4:	4401      	add	r1, r0
 80045b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045ba:	4313      	orrs	r3, r2
 80045bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d11e      	bne.n	8004602 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d009      	beq.n	80045e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d8:	461a      	mov	r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	0151      	lsls	r1, r2, #5
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	440a      	add	r2, r1
 80045f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	e097      	b.n	8004732 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	0151      	lsls	r1, r2, #5
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	440a      	add	r2, r1
 8004618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800461c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004620:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 8083 	beq.w	8004732 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	2101      	movs	r1, #1
 800463e:	fa01 f303 	lsl.w	r3, r1, r3
 8004642:	6979      	ldr	r1, [r7, #20]
 8004644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004648:	4313      	orrs	r3, r2
 800464a:	634b      	str	r3, [r1, #52]	; 0x34
 800464c:	e071      	b.n	8004732 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	0151      	lsls	r1, r2, #5
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	440a      	add	r2, r1
 8004664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004668:	0cdb      	lsrs	r3, r3, #19
 800466a:	04db      	lsls	r3, r3, #19
 800466c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	0151      	lsls	r1, r2, #5
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	440a      	add	r2, r1
 8004684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004688:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800468c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004690:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	0151      	lsls	r1, r2, #5
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	440a      	add	r2, r1
 80046c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e0:	6939      	ldr	r1, [r7, #16]
 80046e2:	0148      	lsls	r0, r1, #5
 80046e4:	6979      	ldr	r1, [r7, #20]
 80046e6:	4401      	add	r1, r0
 80046e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046ec:	4313      	orrs	r3, r2
 80046ee:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d10d      	bne.n	8004712 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d009      	beq.n	8004712 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	6919      	ldr	r1, [r3, #16]
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470e:	460a      	mov	r2, r1
 8004710:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	0151      	lsls	r1, r2, #5
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	440a      	add	r2, r1
 8004728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800472c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004730:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	371c      	adds	r7, #28
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	785b      	ldrb	r3, [r3, #1]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d14a      	bne.n	80047f4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004776:	f040 8086 	bne.w	8004886 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	7812      	ldrb	r2, [r2, #0]
 800478e:	0151      	lsls	r1, r2, #5
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	440a      	add	r2, r1
 8004794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004798:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800479c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	7812      	ldrb	r2, [r2, #0]
 80047b2:	0151      	lsls	r1, r2, #5
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	440a      	add	r2, r1
 80047b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d902      	bls.n	80047d8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	75fb      	strb	r3, [r7, #23]
          break;
 80047d6:	e056      	b.n	8004886 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047f0:	d0e7      	beq.n	80047c2 <USB_EPStopXfer+0x82>
 80047f2:	e048      	b.n	8004886 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800480c:	d13b      	bne.n	8004886 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	7812      	ldrb	r2, [r2, #0]
 8004822:	0151      	lsls	r1, r2, #5
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	440a      	add	r2, r1
 8004828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800482c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004830:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	7812      	ldrb	r2, [r2, #0]
 8004846:	0151      	lsls	r1, r2, #5
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	440a      	add	r2, r1
 800484c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004850:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004854:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3301      	adds	r3, #1
 800485a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004862:	4293      	cmp	r3, r2
 8004864:	d902      	bls.n	800486c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	75fb      	strb	r3, [r7, #23]
          break;
 800486a:	e00c      	b.n	8004886 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004884:	d0e7      	beq.n	8004856 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004886:	7dfb      	ldrb	r3, [r7, #23]
}
 8004888:	4618      	mov	r0, r3
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004894:	b480      	push	{r7}
 8004896:	b089      	sub	sp, #36	; 0x24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	4611      	mov	r1, r2
 80048a0:	461a      	mov	r2, r3
 80048a2:	460b      	mov	r3, r1
 80048a4:	71fb      	strb	r3, [r7, #7]
 80048a6:	4613      	mov	r3, r2
 80048a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80048b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d123      	bne.n	8004902 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80048ba:	88bb      	ldrh	r3, [r7, #4]
 80048bc:	3303      	adds	r3, #3
 80048be:	089b      	lsrs	r3, r3, #2
 80048c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80048c2:	2300      	movs	r3, #0
 80048c4:	61bb      	str	r3, [r7, #24]
 80048c6:	e018      	b.n	80048fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048c8:	79fb      	ldrb	r3, [r7, #7]
 80048ca:	031a      	lsls	r2, r3, #12
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d4:	461a      	mov	r2, r3
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	3301      	adds	r3, #1
 80048e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	3301      	adds	r3, #1
 80048e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	3301      	adds	r3, #1
 80048ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	3301      	adds	r3, #1
 80048f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	3301      	adds	r3, #1
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d3e2      	bcc.n	80048c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3724      	adds	r7, #36	; 0x24
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004910:	b480      	push	{r7}
 8004912:	b08b      	sub	sp, #44	; 0x2c
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	4613      	mov	r3, r2
 800491c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	089b      	lsrs	r3, r3, #2
 800492a:	b29b      	uxth	r3, r3
 800492c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800492e:	88fb      	ldrh	r3, [r7, #6]
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004936:	2300      	movs	r3, #0
 8004938:	623b      	str	r3, [r7, #32]
 800493a:	e014      	b.n	8004966 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	601a      	str	r2, [r3, #0]
    pDest++;
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	3301      	adds	r3, #1
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	3301      	adds	r3, #1
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	3301      	adds	r3, #1
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	3301      	adds	r3, #1
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	3301      	adds	r3, #1
 8004964:	623b      	str	r3, [r7, #32]
 8004966:	6a3a      	ldr	r2, [r7, #32]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	429a      	cmp	r2, r3
 800496c:	d3e6      	bcc.n	800493c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800496e:	8bfb      	ldrh	r3, [r7, #30]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01e      	beq.n	80049b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497e:	461a      	mov	r2, r3
 8004980:	f107 0310 	add.w	r3, r7, #16
 8004984:	6812      	ldr	r2, [r2, #0]
 8004986:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	b2db      	uxtb	r3, r3
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
 8004994:	b2da      	uxtb	r2, r3
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	701a      	strb	r2, [r3, #0]
      i++;
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	3301      	adds	r3, #1
 800499e:	623b      	str	r3, [r7, #32]
      pDest++;
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	3301      	adds	r3, #1
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80049a6:	8bfb      	ldrh	r3, [r7, #30]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80049ac:	8bfb      	ldrh	r3, [r7, #30]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1ea      	bne.n	8004988 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	372c      	adds	r7, #44	; 0x2c
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	785b      	ldrb	r3, [r3, #1]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d12c      	bne.n	8004a36 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	db12      	blt.n	8004a14 <USB_EPSetStall+0x54>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00f      	beq.n	8004a14 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	0151      	lsls	r1, r2, #5
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	440a      	add	r2, r1
 8004a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a12:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	0151      	lsls	r1, r2, #5
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	440a      	add	r2, r1
 8004a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	e02b      	b.n	8004a8e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	db12      	blt.n	8004a6e <USB_EPSetStall+0xae>
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00f      	beq.n	8004a6e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	0151      	lsls	r1, r2, #5
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	440a      	add	r2, r1
 8004a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a6c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	0151      	lsls	r1, r2, #5
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	440a      	add	r2, r1
 8004a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	785b      	ldrb	r3, [r3, #1]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d128      	bne.n	8004b0a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	0151      	lsls	r1, r2, #5
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	440a      	add	r2, r1
 8004ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ad6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	791b      	ldrb	r3, [r3, #4]
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d003      	beq.n	8004ae8 <USB_EPClearStall+0x4c>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	791b      	ldrb	r3, [r3, #4]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d138      	bne.n	8004b5a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	0151      	lsls	r1, r2, #5
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	440a      	add	r2, r1
 8004afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	e027      	b.n	8004b5a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	0151      	lsls	r1, r2, #5
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	440a      	add	r2, r1
 8004b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b28:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	791b      	ldrb	r3, [r3, #4]
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d003      	beq.n	8004b3a <USB_EPClearStall+0x9e>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	791b      	ldrb	r3, [r3, #4]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d10f      	bne.n	8004b5a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	0151      	lsls	r1, r2, #5
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	440a      	add	r2, r1
 8004b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b58:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b86:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b8a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004b9c:	68f9      	ldr	r1, [r7, #12]
 8004b9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bce:	f023 0303 	bic.w	r3, r3, #3
 8004bd2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004be2:	f023 0302 	bic.w	r3, r3, #2
 8004be6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c10:	f023 0303 	bic.w	r3, r3, #3
 8004c14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c24:	f043 0302 	orr.w	r3, r3, #2
 8004c28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c50:	68fb      	ldr	r3, [r7, #12]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b085      	sub	sp, #20
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	0c1b      	lsrs	r3, r3, #16
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b085      	sub	sp, #20
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	b29b      	uxth	r3, r3
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b085      	sub	sp, #20
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b087      	sub	sp, #28
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d24:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d32:	01db      	lsls	r3, r3, #7
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d50:	68bb      	ldr	r3, [r7, #8]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d94:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d98:	f023 0307 	bic.w	r3, r3, #7
 8004d9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	333c      	adds	r3, #60	; 0x3c
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	4a26      	ldr	r2, [pc, #152]	; (8004e78 <USB_EP0_OutStart+0xb8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d90a      	bls.n	8004dfa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004df4:	d101      	bne.n	8004dfa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e037      	b.n	8004e6a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e00:	461a      	mov	r2, r3
 8004e02:	2300      	movs	r3, #0
 8004e04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e28:	f043 0318 	orr.w	r3, r3, #24
 8004e2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e3c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e40:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004e42:	7afb      	ldrb	r3, [r7, #11]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d10f      	bne.n	8004e68 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4e:	461a      	mov	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e62:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004e66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	4f54300a 	.word	0x4f54300a

08004e7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4a13      	ldr	r2, [pc, #76]	; (8004ee0 <USB_CoreReset+0x64>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e01b      	b.n	8004ed2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	daf2      	bge.n	8004e88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f043 0201 	orr.w	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <USB_CoreReset+0x64>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d901      	bls.n	8004ec4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e006      	b.n	8004ed2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d0f0      	beq.n	8004eb2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	00030d40 	.word	0x00030d40

08004ee4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ef0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004ef4:	f002 fc6a 	bl	80077cc <USBD_static_malloc>
 8004ef8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d109      	bne.n	8004f14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	32b0      	adds	r2, #176	; 0xb0
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004f10:	2302      	movs	r3, #2
 8004f12:	e0d4      	b.n	80050be <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004f14:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004f18:	2100      	movs	r1, #0
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f002 fcd2 	bl	80078c4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	32b0      	adds	r2, #176	; 0xb0
 8004f2a:	68f9      	ldr	r1, [r7, #12]
 8004f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	32b0      	adds	r2, #176	; 0xb0
 8004f3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	7c1b      	ldrb	r3, [r3, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d138      	bne.n	8004fbe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f4c:	4b5e      	ldr	r3, [pc, #376]	; (80050c8 <USBD_CDC_Init+0x1e4>)
 8004f4e:	7819      	ldrb	r1, [r3, #0]
 8004f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f54:	2202      	movs	r2, #2
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f002 fb15 	bl	8007586 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f5c:	4b5a      	ldr	r3, [pc, #360]	; (80050c8 <USBD_CDC_Init+0x1e4>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	f003 020f 	and.w	r2, r3, #15
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	440b      	add	r3, r1
 8004f70:	3324      	adds	r3, #36	; 0x24
 8004f72:	2201      	movs	r2, #1
 8004f74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f76:	4b55      	ldr	r3, [pc, #340]	; (80050cc <USBD_CDC_Init+0x1e8>)
 8004f78:	7819      	ldrb	r1, [r3, #0]
 8004f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f7e:	2202      	movs	r2, #2
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f002 fb00 	bl	8007586 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f86:	4b51      	ldr	r3, [pc, #324]	; (80050cc <USBD_CDC_Init+0x1e8>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	f003 020f 	and.w	r2, r3, #15
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	440b      	add	r3, r1
 8004f9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004fa2:	4b4b      	ldr	r3, [pc, #300]	; (80050d0 <USBD_CDC_Init+0x1ec>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	f003 020f 	and.w	r2, r3, #15
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	3326      	adds	r3, #38	; 0x26
 8004fb8:	2210      	movs	r2, #16
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	e035      	b.n	800502a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004fbe:	4b42      	ldr	r3, [pc, #264]	; (80050c8 <USBD_CDC_Init+0x1e4>)
 8004fc0:	7819      	ldrb	r1, [r3, #0]
 8004fc2:	2340      	movs	r3, #64	; 0x40
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f002 fadd 	bl	8007586 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004fcc:	4b3e      	ldr	r3, [pc, #248]	; (80050c8 <USBD_CDC_Init+0x1e4>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	f003 020f 	and.w	r2, r3, #15
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	440b      	add	r3, r1
 8004fe0:	3324      	adds	r3, #36	; 0x24
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004fe6:	4b39      	ldr	r3, [pc, #228]	; (80050cc <USBD_CDC_Init+0x1e8>)
 8004fe8:	7819      	ldrb	r1, [r3, #0]
 8004fea:	2340      	movs	r3, #64	; 0x40
 8004fec:	2202      	movs	r2, #2
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f002 fac9 	bl	8007586 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004ff4:	4b35      	ldr	r3, [pc, #212]	; (80050cc <USBD_CDC_Init+0x1e8>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	f003 020f 	and.w	r2, r3, #15
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800500c:	2201      	movs	r2, #1
 800500e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005010:	4b2f      	ldr	r3, [pc, #188]	; (80050d0 <USBD_CDC_Init+0x1ec>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	f003 020f 	and.w	r2, r3, #15
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	4613      	mov	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	440b      	add	r3, r1
 8005024:	3326      	adds	r3, #38	; 0x26
 8005026:	2210      	movs	r2, #16
 8005028:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800502a:	4b29      	ldr	r3, [pc, #164]	; (80050d0 <USBD_CDC_Init+0x1ec>)
 800502c:	7819      	ldrb	r1, [r3, #0]
 800502e:	2308      	movs	r3, #8
 8005030:	2203      	movs	r2, #3
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f002 faa7 	bl	8007586 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005038:	4b25      	ldr	r3, [pc, #148]	; (80050d0 <USBD_CDC_Init+0x1ec>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	f003 020f 	and.w	r2, r3, #15
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	3324      	adds	r3, #36	; 0x24
 800504e:	2201      	movs	r2, #1
 8005050:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	33b0      	adds	r3, #176	; 0xb0
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005088:	2302      	movs	r3, #2
 800508a:	e018      	b.n	80050be <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	7c1b      	ldrb	r3, [r3, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005094:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <USBD_CDC_Init+0x1e8>)
 8005096:	7819      	ldrb	r1, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800509e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f002 fb5e 	bl	8007764 <USBD_LL_PrepareReceive>
 80050a8:	e008      	b.n	80050bc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050aa:	4b08      	ldr	r3, [pc, #32]	; (80050cc <USBD_CDC_Init+0x1e8>)
 80050ac:	7819      	ldrb	r1, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050b4:	2340      	movs	r3, #64	; 0x40
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f002 fb54 	bl	8007764 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	200000a7 	.word	0x200000a7
 80050cc:	200000a8 	.word	0x200000a8
 80050d0:	200000a9 	.word	0x200000a9

080050d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80050e0:	4b3a      	ldr	r3, [pc, #232]	; (80051cc <USBD_CDC_DeInit+0xf8>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f002 fa73 	bl	80075d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80050ec:	4b37      	ldr	r3, [pc, #220]	; (80051cc <USBD_CDC_DeInit+0xf8>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	f003 020f 	and.w	r2, r3, #15
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	3324      	adds	r3, #36	; 0x24
 8005102:	2200      	movs	r2, #0
 8005104:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005106:	4b32      	ldr	r3, [pc, #200]	; (80051d0 <USBD_CDC_DeInit+0xfc>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f002 fa60 	bl	80075d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005112:	4b2f      	ldr	r3, [pc, #188]	; (80051d0 <USBD_CDC_DeInit+0xfc>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	f003 020f 	and.w	r2, r3, #15
 800511a:	6879      	ldr	r1, [r7, #4]
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	440b      	add	r3, r1
 8005126:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800512a:	2200      	movs	r2, #0
 800512c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800512e:	4b29      	ldr	r3, [pc, #164]	; (80051d4 <USBD_CDC_DeInit+0x100>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	4619      	mov	r1, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f002 fa4c 	bl	80075d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800513a:	4b26      	ldr	r3, [pc, #152]	; (80051d4 <USBD_CDC_DeInit+0x100>)
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	f003 020f 	and.w	r2, r3, #15
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	3324      	adds	r3, #36	; 0x24
 8005150:	2200      	movs	r2, #0
 8005152:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005154:	4b1f      	ldr	r3, [pc, #124]	; (80051d4 <USBD_CDC_DeInit+0x100>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	f003 020f 	and.w	r2, r3, #15
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	440b      	add	r3, r1
 8005168:	3326      	adds	r3, #38	; 0x26
 800516a:	2200      	movs	r2, #0
 800516c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	32b0      	adds	r2, #176	; 0xb0
 8005178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01f      	beq.n	80051c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	33b0      	adds	r3, #176	; 0xb0
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	32b0      	adds	r2, #176	; 0xb0
 800519e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f002 fb20 	bl	80077e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	32b0      	adds	r2, #176	; 0xb0
 80051b2:	2100      	movs	r1, #0
 80051b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	200000a7 	.word	0x200000a7
 80051d0:	200000a8 	.word	0x200000a8
 80051d4:	200000a9 	.word	0x200000a9

080051d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	32b0      	adds	r2, #176	; 0xb0
 80051ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005204:	2303      	movs	r3, #3
 8005206:	e0bf      	b.n	8005388 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005210:	2b00      	cmp	r3, #0
 8005212:	d050      	beq.n	80052b6 <USBD_CDC_Setup+0xde>
 8005214:	2b20      	cmp	r3, #32
 8005216:	f040 80af 	bne.w	8005378 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	88db      	ldrh	r3, [r3, #6]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d03a      	beq.n	8005298 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	b25b      	sxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	da1b      	bge.n	8005264 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	33b0      	adds	r3, #176	; 0xb0
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005242:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	88d2      	ldrh	r2, [r2, #6]
 8005248:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	88db      	ldrh	r3, [r3, #6]
 800524e:	2b07      	cmp	r3, #7
 8005250:	bf28      	it	cs
 8005252:	2307      	movcs	r3, #7
 8005254:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	89fa      	ldrh	r2, [r7, #14]
 800525a:	4619      	mov	r1, r3
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f001 fd53 	bl	8006d08 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005262:	e090      	b.n	8005386 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	785a      	ldrb	r2, [r3, #1]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	88db      	ldrh	r3, [r3, #6]
 8005272:	2b3f      	cmp	r3, #63	; 0x3f
 8005274:	d803      	bhi.n	800527e <USBD_CDC_Setup+0xa6>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	88db      	ldrh	r3, [r3, #6]
 800527a:	b2da      	uxtb	r2, r3
 800527c:	e000      	b.n	8005280 <USBD_CDC_Setup+0xa8>
 800527e:	2240      	movs	r2, #64	; 0x40
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005286:	6939      	ldr	r1, [r7, #16]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800528e:	461a      	mov	r2, r3
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f001 fd65 	bl	8006d60 <USBD_CtlPrepareRx>
      break;
 8005296:	e076      	b.n	8005386 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	33b0      	adds	r3, #176	; 0xb0
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	7850      	ldrb	r0, [r2, #1]
 80052ae:	2200      	movs	r2, #0
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	4798      	blx	r3
      break;
 80052b4:	e067      	b.n	8005386 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	785b      	ldrb	r3, [r3, #1]
 80052ba:	2b0b      	cmp	r3, #11
 80052bc:	d851      	bhi.n	8005362 <USBD_CDC_Setup+0x18a>
 80052be:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <USBD_CDC_Setup+0xec>)
 80052c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c4:	080052f5 	.word	0x080052f5
 80052c8:	08005371 	.word	0x08005371
 80052cc:	08005363 	.word	0x08005363
 80052d0:	08005363 	.word	0x08005363
 80052d4:	08005363 	.word	0x08005363
 80052d8:	08005363 	.word	0x08005363
 80052dc:	08005363 	.word	0x08005363
 80052e0:	08005363 	.word	0x08005363
 80052e4:	08005363 	.word	0x08005363
 80052e8:	08005363 	.word	0x08005363
 80052ec:	0800531f 	.word	0x0800531f
 80052f0:	08005349 	.word	0x08005349
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d107      	bne.n	8005310 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005300:	f107 030a 	add.w	r3, r7, #10
 8005304:	2202      	movs	r2, #2
 8005306:	4619      	mov	r1, r3
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f001 fcfd 	bl	8006d08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800530e:	e032      	b.n	8005376 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f001 fc87 	bl	8006c26 <USBD_CtlError>
            ret = USBD_FAIL;
 8005318:	2303      	movs	r3, #3
 800531a:	75fb      	strb	r3, [r7, #23]
          break;
 800531c:	e02b      	b.n	8005376 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b03      	cmp	r3, #3
 8005328:	d107      	bne.n	800533a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800532a:	f107 030d 	add.w	r3, r7, #13
 800532e:	2201      	movs	r2, #1
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f001 fce8 	bl	8006d08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005338:	e01d      	b.n	8005376 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800533a:	6839      	ldr	r1, [r7, #0]
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f001 fc72 	bl	8006c26 <USBD_CtlError>
            ret = USBD_FAIL;
 8005342:	2303      	movs	r3, #3
 8005344:	75fb      	strb	r3, [r7, #23]
          break;
 8005346:	e016      	b.n	8005376 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b03      	cmp	r3, #3
 8005352:	d00f      	beq.n	8005374 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005354:	6839      	ldr	r1, [r7, #0]
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f001 fc65 	bl	8006c26 <USBD_CtlError>
            ret = USBD_FAIL;
 800535c:	2303      	movs	r3, #3
 800535e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005360:	e008      	b.n	8005374 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005362:	6839      	ldr	r1, [r7, #0]
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f001 fc5e 	bl	8006c26 <USBD_CtlError>
          ret = USBD_FAIL;
 800536a:	2303      	movs	r3, #3
 800536c:	75fb      	strb	r3, [r7, #23]
          break;
 800536e:	e002      	b.n	8005376 <USBD_CDC_Setup+0x19e>
          break;
 8005370:	bf00      	nop
 8005372:	e008      	b.n	8005386 <USBD_CDC_Setup+0x1ae>
          break;
 8005374:	bf00      	nop
      }
      break;
 8005376:	e006      	b.n	8005386 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005378:	6839      	ldr	r1, [r7, #0]
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f001 fc53 	bl	8006c26 <USBD_CtlError>
      ret = USBD_FAIL;
 8005380:	2303      	movs	r3, #3
 8005382:	75fb      	strb	r3, [r7, #23]
      break;
 8005384:	bf00      	nop
  }

  return (uint8_t)ret;
 8005386:	7dfb      	ldrb	r3, [r7, #23]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80053a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	32b0      	adds	r2, #176	; 0xb0
 80053ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e065      	b.n	8005486 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	32b0      	adds	r2, #176	; 0xb0
 80053c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80053ca:	78fb      	ldrb	r3, [r7, #3]
 80053cc:	f003 020f 	and.w	r2, r3, #15
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	4613      	mov	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	3318      	adds	r3, #24
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d02f      	beq.n	8005444 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	f003 020f 	and.w	r2, r3, #15
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	3318      	adds	r3, #24
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	78fb      	ldrb	r3, [r7, #3]
 80053fc:	f003 010f 	and.w	r1, r3, #15
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	460b      	mov	r3, r1
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	440b      	add	r3, r1
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4403      	add	r3, r0
 800540c:	3348      	adds	r3, #72	; 0x48
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	fbb2 f1f3 	udiv	r1, r2, r3
 8005414:	fb01 f303 	mul.w	r3, r1, r3
 8005418:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800541a:	2b00      	cmp	r3, #0
 800541c:	d112      	bne.n	8005444 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800541e:	78fb      	ldrb	r3, [r7, #3]
 8005420:	f003 020f 	and.w	r2, r3, #15
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	3318      	adds	r3, #24
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005436:	78f9      	ldrb	r1, [r7, #3]
 8005438:	2300      	movs	r3, #0
 800543a:	2200      	movs	r2, #0
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f002 f970 	bl	8007722 <USBD_LL_Transmit>
 8005442:	e01f      	b.n	8005484 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2200      	movs	r2, #0
 8005448:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	33b0      	adds	r3, #176	; 0xb0
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d010      	beq.n	8005484 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	33b0      	adds	r3, #176	; 0xb0
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005480:	78fa      	ldrb	r2, [r7, #3]
 8005482:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	460b      	mov	r3, r1
 8005498:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	32b0      	adds	r2, #176	; 0xb0
 80054a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	32b0      	adds	r2, #176	; 0xb0
 80054b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80054bc:	2303      	movs	r3, #3
 80054be:	e01a      	b.n	80054f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80054c0:	78fb      	ldrb	r3, [r7, #3]
 80054c2:	4619      	mov	r1, r3
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f002 f96e 	bl	80077a6 <USBD_LL_GetRxDataSize>
 80054ca:	4602      	mov	r2, r0
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	33b0      	adds	r3, #176	; 0xb0
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80054f0:	4611      	mov	r1, r2
 80054f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	32b0      	adds	r2, #176	; 0xb0
 8005510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005514:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800551c:	2303      	movs	r3, #3
 800551e:	e025      	b.n	800556c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	33b0      	adds	r3, #176	; 0xb0
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01a      	beq.n	800556a <USBD_CDC_EP0_RxReady+0x6c>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800553a:	2bff      	cmp	r3, #255	; 0xff
 800553c:	d015      	beq.n	800556a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	33b0      	adds	r3, #176	; 0xb0
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005556:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800555e:	b292      	uxth	r2, r2
 8005560:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	22ff      	movs	r2, #255	; 0xff
 8005566:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800557c:	2182      	movs	r1, #130	; 0x82
 800557e:	4818      	ldr	r0, [pc, #96]	; (80055e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005580:	f000 fd19 	bl	8005fb6 <USBD_GetEpDesc>
 8005584:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005586:	2101      	movs	r1, #1
 8005588:	4815      	ldr	r0, [pc, #84]	; (80055e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800558a:	f000 fd14 	bl	8005fb6 <USBD_GetEpDesc>
 800558e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005590:	2181      	movs	r1, #129	; 0x81
 8005592:	4813      	ldr	r0, [pc, #76]	; (80055e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005594:	f000 fd0f 	bl	8005fb6 <USBD_GetEpDesc>
 8005598:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2210      	movs	r2, #16
 80055a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d006      	beq.n	80055ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055b4:	711a      	strb	r2, [r3, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d006      	beq.n	80055ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c8:	711a      	strb	r2, [r3, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2243      	movs	r2, #67	; 0x43
 80055d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80055d4:	4b02      	ldr	r3, [pc, #8]	; (80055e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000064 	.word	0x20000064

080055e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055ec:	2182      	movs	r1, #130	; 0x82
 80055ee:	4818      	ldr	r0, [pc, #96]	; (8005650 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80055f0:	f000 fce1 	bl	8005fb6 <USBD_GetEpDesc>
 80055f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055f6:	2101      	movs	r1, #1
 80055f8:	4815      	ldr	r0, [pc, #84]	; (8005650 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80055fa:	f000 fcdc 	bl	8005fb6 <USBD_GetEpDesc>
 80055fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005600:	2181      	movs	r1, #129	; 0x81
 8005602:	4813      	ldr	r0, [pc, #76]	; (8005650 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005604:	f000 fcd7 	bl	8005fb6 <USBD_GetEpDesc>
 8005608:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2210      	movs	r2, #16
 8005614:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d006      	beq.n	800562a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2200      	movs	r2, #0
 8005620:	711a      	strb	r2, [r3, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f042 0202 	orr.w	r2, r2, #2
 8005628:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d006      	beq.n	800563e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	711a      	strb	r2, [r3, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f042 0202 	orr.w	r2, r2, #2
 800563c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2243      	movs	r2, #67	; 0x43
 8005642:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005644:	4b02      	ldr	r3, [pc, #8]	; (8005650 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000064 	.word	0x20000064

08005654 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800565c:	2182      	movs	r1, #130	; 0x82
 800565e:	4818      	ldr	r0, [pc, #96]	; (80056c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005660:	f000 fca9 	bl	8005fb6 <USBD_GetEpDesc>
 8005664:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005666:	2101      	movs	r1, #1
 8005668:	4815      	ldr	r0, [pc, #84]	; (80056c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800566a:	f000 fca4 	bl	8005fb6 <USBD_GetEpDesc>
 800566e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005670:	2181      	movs	r1, #129	; 0x81
 8005672:	4813      	ldr	r0, [pc, #76]	; (80056c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005674:	f000 fc9f 	bl	8005fb6 <USBD_GetEpDesc>
 8005678:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2210      	movs	r2, #16
 8005684:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d006      	beq.n	800569a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	2200      	movs	r2, #0
 8005690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005694:	711a      	strb	r2, [r3, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d006      	beq.n	80056ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056a8:	711a      	strb	r2, [r3, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2243      	movs	r2, #67	; 0x43
 80056b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80056b4:	4b02      	ldr	r3, [pc, #8]	; (80056c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000064 	.word	0x20000064

080056c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	220a      	movs	r2, #10
 80056d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80056d2:	4b03      	ldr	r3, [pc, #12]	; (80056e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	20000020 	.word	0x20000020

080056e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e009      	b.n	800570c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	33b0      	adds	r3, #176	; 0xb0
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	32b0      	adds	r2, #176	; 0xb0
 800572e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005732:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800573a:	2303      	movs	r3, #3
 800573c:	e008      	b.n	8005750 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	371c      	adds	r7, #28
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	32b0      	adds	r2, #176	; 0xb0
 8005770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005774:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800577c:	2303      	movs	r3, #3
 800577e:	e004      	b.n	800578a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	32b0      	adds	r2, #176	; 0xb0
 80057aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80057b0:	2301      	movs	r3, #1
 80057b2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	32b0      	adds	r2, #176	; 0xb0
 80057be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e025      	b.n	8005816 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d11f      	bne.n	8005814 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80057dc:	4b10      	ldr	r3, [pc, #64]	; (8005820 <USBD_CDC_TransmitPacket+0x88>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	f003 020f 	and.w	r2, r3, #15
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	4613      	mov	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4403      	add	r3, r0
 80057f6:	3318      	adds	r3, #24
 80057f8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80057fa:	4b09      	ldr	r3, [pc, #36]	; (8005820 <USBD_CDC_TransmitPacket+0x88>)
 80057fc:	7819      	ldrb	r1, [r3, #0]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f001 ff89 	bl	8007722 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005814:	7bfb      	ldrb	r3, [r7, #15]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	200000a7 	.word	0x200000a7

08005824 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	4613      	mov	r3, r2
 8005830:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005838:	2303      	movs	r3, #3
 800583a:	e01f      	b.n	800587c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	79fa      	ldrb	r2, [r7, #7]
 800586e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f001 fe21 	bl	80074b8 <USBD_LL_Init>
 8005876:	4603      	mov	r3, r0
 8005878:	75fb      	strb	r3, [r7, #23]

  return ret;
 800587a:	7dfb      	ldrb	r3, [r7, #23]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005898:	2303      	movs	r3, #3
 800589a:	e025      	b.n	80058e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	32ae      	adds	r2, #174	; 0xae
 80058ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00f      	beq.n	80058d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	32ae      	adds	r2, #174	; 0xae
 80058c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	f107 020e 	add.w	r2, r7, #14
 80058cc:	4610      	mov	r0, r2
 80058ce:	4798      	blx	r3
 80058d0:	4602      	mov	r2, r0
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f001 fe29 	bl	8007550 <USBD_LL_Start>
 80058fe:	4603      	mov	r3, r0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005910:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005912:	4618      	mov	r0, r3
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	460b      	mov	r3, r1
 8005928:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d009      	beq.n	800594c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	78fa      	ldrb	r2, [r7, #3]
 8005942:	4611      	mov	r1, r2
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	4798      	blx	r3
 8005948:	4603      	mov	r3, r0
 800594a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	460b      	mov	r3, r1
 8005960:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	78fa      	ldrb	r2, [r7, #3]
 8005970:	4611      	mov	r1, r2
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	4798      	blx	r3
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800597c:	2303      	movs	r3, #3
 800597e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005980:	7bfb      	ldrb	r3, [r7, #15]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b084      	sub	sp, #16
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	4618      	mov	r0, r3
 800599e:	f001 f908 	bl	8006bb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80059b0:	461a      	mov	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d01a      	beq.n	80059fc <USBD_LL_SetupStage+0x72>
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d822      	bhi.n	8005a10 <USBD_LL_SetupStage+0x86>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <USBD_LL_SetupStage+0x4a>
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d00a      	beq.n	80059e8 <USBD_LL_SetupStage+0x5e>
 80059d2:	e01d      	b.n	8005a10 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059da:	4619      	mov	r1, r3
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fb5f 	bl	80060a0 <USBD_StdDevReq>
 80059e2:	4603      	mov	r3, r0
 80059e4:	73fb      	strb	r3, [r7, #15]
      break;
 80059e6:	e020      	b.n	8005a2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fbc7 	bl	8006184 <USBD_StdItfReq>
 80059f6:	4603      	mov	r3, r0
 80059f8:	73fb      	strb	r3, [r7, #15]
      break;
 80059fa:	e016      	b.n	8005a2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fc29 	bl	800625c <USBD_StdEPReq>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a0e:	e00c      	b.n	8005a2a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f001 fdf6 	bl	8007610 <USBD_LL_StallEP>
 8005a24:	4603      	mov	r3, r0
 8005a26:	73fb      	strb	r3, [r7, #15]
      break;
 8005a28:	bf00      	nop
  }

  return ret;
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005a46:	7afb      	ldrb	r3, [r7, #11]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d16e      	bne.n	8005b2a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	f040 8098 	bne.w	8005b90 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d913      	bls.n	8005a94 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	1ad2      	subs	r2, r2, r3
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	4293      	cmp	r3, r2
 8005a84:	bf28      	it	cs
 8005a86:	4613      	movcs	r3, r2
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f001 f984 	bl	8006d9a <USBD_CtlContinueRx>
 8005a92:	e07d      	b.n	8005b90 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a9a:	f003 031f 	and.w	r3, r3, #31
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d014      	beq.n	8005acc <USBD_LL_DataOutStage+0x98>
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d81d      	bhi.n	8005ae2 <USBD_LL_DataOutStage+0xae>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <USBD_LL_DataOutStage+0x7c>
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d003      	beq.n	8005ab6 <USBD_LL_DataOutStage+0x82>
 8005aae:	e018      	b.n	8005ae2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	75bb      	strb	r3, [r7, #22]
            break;
 8005ab4:	e018      	b.n	8005ae8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	4619      	mov	r1, r3
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 fa5e 	bl	8005f82 <USBD_CoreFindIF>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	75bb      	strb	r3, [r7, #22]
            break;
 8005aca:	e00d      	b.n	8005ae8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 fa60 	bl	8005f9c <USBD_CoreFindEP>
 8005adc:	4603      	mov	r3, r0
 8005ade:	75bb      	strb	r3, [r7, #22]
            break;
 8005ae0:	e002      	b.n	8005ae8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	75bb      	strb	r3, [r7, #22]
            break;
 8005ae6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005ae8:	7dbb      	ldrb	r3, [r7, #22]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d119      	bne.n	8005b22 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d113      	bne.n	8005b22 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005afa:	7dba      	ldrb	r2, [r7, #22]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	32ae      	adds	r2, #174	; 0xae
 8005b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00b      	beq.n	8005b22 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005b0a:	7dba      	ldrb	r2, [r7, #22]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005b12:	7dba      	ldrb	r2, [r7, #22]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	32ae      	adds	r2, #174	; 0xae
 8005b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f001 f94a 	bl	8006dbc <USBD_CtlSendStatus>
 8005b28:	e032      	b.n	8005b90 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005b2a:	7afb      	ldrb	r3, [r7, #11]
 8005b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	4619      	mov	r1, r3
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 fa31 	bl	8005f9c <USBD_CoreFindEP>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b3e:	7dbb      	ldrb	r3, [r7, #22]
 8005b40:	2bff      	cmp	r3, #255	; 0xff
 8005b42:	d025      	beq.n	8005b90 <USBD_LL_DataOutStage+0x15c>
 8005b44:	7dbb      	ldrb	r3, [r7, #22]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d122      	bne.n	8005b90 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d117      	bne.n	8005b86 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b56:	7dba      	ldrb	r2, [r7, #22]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	32ae      	adds	r2, #174	; 0xae
 8005b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00f      	beq.n	8005b86 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005b66:	7dba      	ldrb	r2, [r7, #22]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b6e:	7dba      	ldrb	r2, [r7, #22]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	32ae      	adds	r2, #174	; 0xae
 8005b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	7afa      	ldrb	r2, [r7, #11]
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	4798      	blx	r3
 8005b82:	4603      	mov	r3, r0
 8005b84:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
 8005b8e:	e000      	b.n	8005b92 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b086      	sub	sp, #24
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	60f8      	str	r0, [r7, #12]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	607a      	str	r2, [r7, #4]
 8005ba6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005ba8:	7afb      	ldrb	r3, [r7, #11]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d16f      	bne.n	8005c8e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3314      	adds	r3, #20
 8005bb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d15a      	bne.n	8005c74 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d914      	bls.n	8005bf4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	1ad2      	subs	r2, r2, r3
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f001 f8ac 	bl	8006d3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005be6:	2300      	movs	r3, #0
 8005be8:	2200      	movs	r2, #0
 8005bea:	2100      	movs	r1, #0
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f001 fdb9 	bl	8007764 <USBD_LL_PrepareReceive>
 8005bf2:	e03f      	b.n	8005c74 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d11c      	bne.n	8005c3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d316      	bcc.n	8005c3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d20f      	bcs.n	8005c3a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f001 f88d 	bl	8006d3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2100      	movs	r1, #0
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f001 fd96 	bl	8007764 <USBD_LL_PrepareReceive>
 8005c38:	e01c      	b.n	8005c74 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d10f      	bne.n	8005c66 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d009      	beq.n	8005c66 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c66:	2180      	movs	r1, #128	; 0x80
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f001 fcd1 	bl	8007610 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f001 f8b7 	bl	8006de2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d03a      	beq.n	8005cf4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f7ff fe42 	bl	8005908 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c8c:	e032      	b.n	8005cf4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c8e:	7afb      	ldrb	r3, [r7, #11]
 8005c90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	4619      	mov	r1, r3
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f97f 	bl	8005f9c <USBD_CoreFindEP>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ca2:	7dfb      	ldrb	r3, [r7, #23]
 8005ca4:	2bff      	cmp	r3, #255	; 0xff
 8005ca6:	d025      	beq.n	8005cf4 <USBD_LL_DataInStage+0x15a>
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d122      	bne.n	8005cf4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d11c      	bne.n	8005cf4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005cba:	7dfa      	ldrb	r2, [r7, #23]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	32ae      	adds	r2, #174	; 0xae
 8005cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d014      	beq.n	8005cf4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005cca:	7dfa      	ldrb	r2, [r7, #23]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005cd2:	7dfa      	ldrb	r2, [r7, #23]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	32ae      	adds	r2, #174	; 0xae
 8005cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	7afa      	ldrb	r2, [r7, #11]
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	4798      	blx	r3
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005cea:	7dbb      	ldrb	r3, [r7, #22]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005cf0:	7dbb      	ldrb	r3, [r7, #22]
 8005cf2:	e000      	b.n	8005cf6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d014      	beq.n	8005d64 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00e      	beq.n	8005d64 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6852      	ldr	r2, [r2, #4]
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	4611      	mov	r1, r2
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	4798      	blx	r3
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005d60:	2303      	movs	r3, #3
 8005d62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d64:	2340      	movs	r3, #64	; 0x40
 8005d66:	2200      	movs	r2, #0
 8005d68:	2100      	movs	r1, #0
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f001 fc0b 	bl	8007586 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2240      	movs	r2, #64	; 0x40
 8005d7c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d80:	2340      	movs	r3, #64	; 0x40
 8005d82:	2200      	movs	r2, #0
 8005d84:	2180      	movs	r1, #128	; 0x80
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f001 fbfd 	bl	8007586 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2240      	movs	r2, #64	; 0x40
 8005d96:	621a      	str	r2, [r3, #32]

  return ret;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	78fa      	ldrb	r2, [r7, #3]
 8005db2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2204      	movs	r2, #4
 8005ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d106      	bne.n	8005e10 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b082      	sub	sp, #8
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d110      	bne.n	8005e54 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00b      	beq.n	8005e54 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	460b      	mov	r3, r1
 8005e68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	32ae      	adds	r2, #174	; 0xae
 8005e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e01c      	b.n	8005eba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d115      	bne.n	8005eb8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	32ae      	adds	r2, #174	; 0xae
 8005e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00b      	beq.n	8005eb8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	32ae      	adds	r2, #174	; 0xae
 8005eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	78fa      	ldrb	r2, [r7, #3]
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	32ae      	adds	r2, #174	; 0xae
 8005ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e01c      	b.n	8005f1e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d115      	bne.n	8005f1c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	32ae      	adds	r2, #174	; 0xae
 8005efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	32ae      	adds	r2, #174	; 0xae
 8005f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	78fa      	ldrb	r2, [r7, #3]
 8005f16:	4611      	mov	r1, r2
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00e      	beq.n	8005f78 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6852      	ldr	r2, [r2, #4]
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	4611      	mov	r1, r2
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	4798      	blx	r3
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f74:	2303      	movs	r3, #3
 8005f76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f8e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005fa8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b086      	sub	sp, #24
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	885b      	ldrh	r3, [r3, #2]
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d920      	bls.n	8006020 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005fe6:	e013      	b.n	8006010 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005fe8:	f107 030a 	add.w	r3, r7, #10
 8005fec:	4619      	mov	r1, r3
 8005fee:	6978      	ldr	r0, [r7, #20]
 8005ff0:	f000 f81b 	bl	800602a <USBD_GetNextDesc>
 8005ff4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	2b05      	cmp	r3, #5
 8005ffc:	d108      	bne.n	8006010 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	789b      	ldrb	r3, [r3, #2]
 8006006:	78fa      	ldrb	r2, [r7, #3]
 8006008:	429a      	cmp	r2, r3
 800600a:	d008      	beq.n	800601e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800600c:	2300      	movs	r3, #0
 800600e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	885b      	ldrh	r3, [r3, #2]
 8006014:	b29a      	uxth	r2, r3
 8006016:	897b      	ldrh	r3, [r7, #10]
 8006018:	429a      	cmp	r2, r3
 800601a:	d8e5      	bhi.n	8005fe8 <USBD_GetEpDesc+0x32>
 800601c:	e000      	b.n	8006020 <USBD_GetEpDesc+0x6a>
          break;
 800601e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006020:	693b      	ldr	r3, [r7, #16]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800602a:	b480      	push	{r7}
 800602c:	b085      	sub	sp, #20
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	881a      	ldrh	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	4413      	add	r3, r2
 8006044:	b29a      	uxth	r2, r3
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4413      	add	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006056:	68fb      	ldr	r3, [r7, #12]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	3301      	adds	r3, #1
 800607a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006082:	8a3b      	ldrh	r3, [r7, #16]
 8006084:	021b      	lsls	r3, r3, #8
 8006086:	b21a      	sxth	r2, r3
 8006088:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800608c:	4313      	orrs	r3, r2
 800608e:	b21b      	sxth	r3, r3
 8006090:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006092:	89fb      	ldrh	r3, [r7, #14]
}
 8006094:	4618      	mov	r0, r3
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060b6:	2b40      	cmp	r3, #64	; 0x40
 80060b8:	d005      	beq.n	80060c6 <USBD_StdDevReq+0x26>
 80060ba:	2b40      	cmp	r3, #64	; 0x40
 80060bc:	d857      	bhi.n	800616e <USBD_StdDevReq+0xce>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00f      	beq.n	80060e2 <USBD_StdDevReq+0x42>
 80060c2:	2b20      	cmp	r3, #32
 80060c4:	d153      	bne.n	800616e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	32ae      	adds	r2, #174	; 0xae
 80060d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4798      	blx	r3
 80060dc:	4603      	mov	r3, r0
 80060de:	73fb      	strb	r3, [r7, #15]
      break;
 80060e0:	e04a      	b.n	8006178 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	2b09      	cmp	r3, #9
 80060e8:	d83b      	bhi.n	8006162 <USBD_StdDevReq+0xc2>
 80060ea:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <USBD_StdDevReq+0x50>)
 80060ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f0:	08006145 	.word	0x08006145
 80060f4:	08006159 	.word	0x08006159
 80060f8:	08006163 	.word	0x08006163
 80060fc:	0800614f 	.word	0x0800614f
 8006100:	08006163 	.word	0x08006163
 8006104:	08006123 	.word	0x08006123
 8006108:	08006119 	.word	0x08006119
 800610c:	08006163 	.word	0x08006163
 8006110:	0800613b 	.word	0x0800613b
 8006114:	0800612d 	.word	0x0800612d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fa3c 	bl	8006598 <USBD_GetDescriptor>
          break;
 8006120:	e024      	b.n	800616c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fba1 	bl	800686c <USBD_SetAddress>
          break;
 800612a:	e01f      	b.n	800616c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800612c:	6839      	ldr	r1, [r7, #0]
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fbe0 	bl	80068f4 <USBD_SetConfig>
 8006134:	4603      	mov	r3, r0
 8006136:	73fb      	strb	r3, [r7, #15]
          break;
 8006138:	e018      	b.n	800616c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fc83 	bl	8006a48 <USBD_GetConfig>
          break;
 8006142:	e013      	b.n	800616c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006144:	6839      	ldr	r1, [r7, #0]
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fcb4 	bl	8006ab4 <USBD_GetStatus>
          break;
 800614c:	e00e      	b.n	800616c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fce3 	bl	8006b1c <USBD_SetFeature>
          break;
 8006156:	e009      	b.n	800616c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fd07 	bl	8006b6e <USBD_ClrFeature>
          break;
 8006160:	e004      	b.n	800616c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006162:	6839      	ldr	r1, [r7, #0]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fd5e 	bl	8006c26 <USBD_CtlError>
          break;
 800616a:	bf00      	nop
      }
      break;
 800616c:	e004      	b.n	8006178 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fd58 	bl	8006c26 <USBD_CtlError>
      break;
 8006176:	bf00      	nop
  }

  return ret;
 8006178:	7bfb      	ldrb	r3, [r7, #15]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop

08006184 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800619a:	2b40      	cmp	r3, #64	; 0x40
 800619c:	d005      	beq.n	80061aa <USBD_StdItfReq+0x26>
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d852      	bhi.n	8006248 <USBD_StdItfReq+0xc4>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <USBD_StdItfReq+0x26>
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d14e      	bne.n	8006248 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d840      	bhi.n	800623a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	889b      	ldrh	r3, [r3, #4]
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d836      	bhi.n	8006230 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	889b      	ldrh	r3, [r3, #4]
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7ff fed9 	bl	8005f82 <USBD_CoreFindIF>
 80061d0:	4603      	mov	r3, r0
 80061d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061d4:	7bbb      	ldrb	r3, [r7, #14]
 80061d6:	2bff      	cmp	r3, #255	; 0xff
 80061d8:	d01d      	beq.n	8006216 <USBD_StdItfReq+0x92>
 80061da:	7bbb      	ldrb	r3, [r7, #14]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d11a      	bne.n	8006216 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80061e0:	7bba      	ldrb	r2, [r7, #14]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	32ae      	adds	r2, #174	; 0xae
 80061e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00f      	beq.n	8006210 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80061f0:	7bba      	ldrb	r2, [r7, #14]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061f8:	7bba      	ldrb	r2, [r7, #14]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	32ae      	adds	r2, #174	; 0xae
 80061fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	4798      	blx	r3
 800620a:	4603      	mov	r3, r0
 800620c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800620e:	e004      	b.n	800621a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006210:	2303      	movs	r3, #3
 8006212:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006214:	e001      	b.n	800621a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006216:	2303      	movs	r3, #3
 8006218:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	88db      	ldrh	r3, [r3, #6]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d110      	bne.n	8006244 <USBD_StdItfReq+0xc0>
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10d      	bne.n	8006244 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fdc7 	bl	8006dbc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800622e:	e009      	b.n	8006244 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fcf7 	bl	8006c26 <USBD_CtlError>
          break;
 8006238:	e004      	b.n	8006244 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800623a:	6839      	ldr	r1, [r7, #0]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fcf2 	bl	8006c26 <USBD_CtlError>
          break;
 8006242:	e000      	b.n	8006246 <USBD_StdItfReq+0xc2>
          break;
 8006244:	bf00      	nop
      }
      break;
 8006246:	e004      	b.n	8006252 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fceb 	bl	8006c26 <USBD_CtlError>
      break;
 8006250:	bf00      	nop
  }

  return ret;
 8006252:	7bfb      	ldrb	r3, [r7, #15]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	889b      	ldrh	r3, [r3, #4]
 800626e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006278:	2b40      	cmp	r3, #64	; 0x40
 800627a:	d007      	beq.n	800628c <USBD_StdEPReq+0x30>
 800627c:	2b40      	cmp	r3, #64	; 0x40
 800627e:	f200 817f 	bhi.w	8006580 <USBD_StdEPReq+0x324>
 8006282:	2b00      	cmp	r3, #0
 8006284:	d02a      	beq.n	80062dc <USBD_StdEPReq+0x80>
 8006286:	2b20      	cmp	r3, #32
 8006288:	f040 817a 	bne.w	8006580 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800628c:	7bbb      	ldrb	r3, [r7, #14]
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7ff fe83 	bl	8005f9c <USBD_CoreFindEP>
 8006296:	4603      	mov	r3, r0
 8006298:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800629a:	7b7b      	ldrb	r3, [r7, #13]
 800629c:	2bff      	cmp	r3, #255	; 0xff
 800629e:	f000 8174 	beq.w	800658a <USBD_StdEPReq+0x32e>
 80062a2:	7b7b      	ldrb	r3, [r7, #13]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f040 8170 	bne.w	800658a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80062aa:	7b7a      	ldrb	r2, [r7, #13]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80062b2:	7b7a      	ldrb	r2, [r7, #13]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	32ae      	adds	r2, #174	; 0xae
 80062b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 8163 	beq.w	800658a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80062c4:	7b7a      	ldrb	r2, [r7, #13]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	32ae      	adds	r2, #174	; 0xae
 80062ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
 80062d6:	4603      	mov	r3, r0
 80062d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062da:	e156      	b.n	800658a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	785b      	ldrb	r3, [r3, #1]
 80062e0:	2b03      	cmp	r3, #3
 80062e2:	d008      	beq.n	80062f6 <USBD_StdEPReq+0x9a>
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	f300 8145 	bgt.w	8006574 <USBD_StdEPReq+0x318>
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 809b 	beq.w	8006426 <USBD_StdEPReq+0x1ca>
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d03c      	beq.n	800636e <USBD_StdEPReq+0x112>
 80062f4:	e13e      	b.n	8006574 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d002      	beq.n	8006308 <USBD_StdEPReq+0xac>
 8006302:	2b03      	cmp	r3, #3
 8006304:	d016      	beq.n	8006334 <USBD_StdEPReq+0xd8>
 8006306:	e02c      	b.n	8006362 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006308:	7bbb      	ldrb	r3, [r7, #14]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00d      	beq.n	800632a <USBD_StdEPReq+0xce>
 800630e:	7bbb      	ldrb	r3, [r7, #14]
 8006310:	2b80      	cmp	r3, #128	; 0x80
 8006312:	d00a      	beq.n	800632a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006314:	7bbb      	ldrb	r3, [r7, #14]
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f001 f979 	bl	8007610 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800631e:	2180      	movs	r1, #128	; 0x80
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f001 f975 	bl	8007610 <USBD_LL_StallEP>
 8006326:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006328:	e020      	b.n	800636c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800632a:	6839      	ldr	r1, [r7, #0]
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fc7a 	bl	8006c26 <USBD_CtlError>
              break;
 8006332:	e01b      	b.n	800636c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	885b      	ldrh	r3, [r3, #2]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10e      	bne.n	800635a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00b      	beq.n	800635a <USBD_StdEPReq+0xfe>
 8006342:	7bbb      	ldrb	r3, [r7, #14]
 8006344:	2b80      	cmp	r3, #128	; 0x80
 8006346:	d008      	beq.n	800635a <USBD_StdEPReq+0xfe>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	88db      	ldrh	r3, [r3, #6]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d104      	bne.n	800635a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006350:	7bbb      	ldrb	r3, [r7, #14]
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 f95b 	bl	8007610 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fd2e 	bl	8006dbc <USBD_CtlSendStatus>

              break;
 8006360:	e004      	b.n	800636c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006362:	6839      	ldr	r1, [r7, #0]
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fc5e 	bl	8006c26 <USBD_CtlError>
              break;
 800636a:	bf00      	nop
          }
          break;
 800636c:	e107      	b.n	800657e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d002      	beq.n	8006380 <USBD_StdEPReq+0x124>
 800637a:	2b03      	cmp	r3, #3
 800637c:	d016      	beq.n	80063ac <USBD_StdEPReq+0x150>
 800637e:	e04b      	b.n	8006418 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006380:	7bbb      	ldrb	r3, [r7, #14]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00d      	beq.n	80063a2 <USBD_StdEPReq+0x146>
 8006386:	7bbb      	ldrb	r3, [r7, #14]
 8006388:	2b80      	cmp	r3, #128	; 0x80
 800638a:	d00a      	beq.n	80063a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800638c:	7bbb      	ldrb	r3, [r7, #14]
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f001 f93d 	bl	8007610 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006396:	2180      	movs	r1, #128	; 0x80
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f001 f939 	bl	8007610 <USBD_LL_StallEP>
 800639e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063a0:	e040      	b.n	8006424 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fc3e 	bl	8006c26 <USBD_CtlError>
              break;
 80063aa:	e03b      	b.n	8006424 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	885b      	ldrh	r3, [r3, #2]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d136      	bne.n	8006422 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063b4:	7bbb      	ldrb	r3, [r7, #14]
 80063b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063be:	7bbb      	ldrb	r3, [r7, #14]
 80063c0:	4619      	mov	r1, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f001 f943 	bl	800764e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fcf7 	bl	8006dbc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80063ce:	7bbb      	ldrb	r3, [r7, #14]
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff fde2 	bl	8005f9c <USBD_CoreFindEP>
 80063d8:	4603      	mov	r3, r0
 80063da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063dc:	7b7b      	ldrb	r3, [r7, #13]
 80063de:	2bff      	cmp	r3, #255	; 0xff
 80063e0:	d01f      	beq.n	8006422 <USBD_StdEPReq+0x1c6>
 80063e2:	7b7b      	ldrb	r3, [r7, #13]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d11c      	bne.n	8006422 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80063e8:	7b7a      	ldrb	r2, [r7, #13]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80063f0:	7b7a      	ldrb	r2, [r7, #13]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	32ae      	adds	r2, #174	; 0xae
 80063f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d010      	beq.n	8006422 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006400:	7b7a      	ldrb	r2, [r7, #13]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	32ae      	adds	r2, #174	; 0xae
 8006406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	4798      	blx	r3
 8006412:	4603      	mov	r3, r0
 8006414:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006416:	e004      	b.n	8006422 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fc03 	bl	8006c26 <USBD_CtlError>
              break;
 8006420:	e000      	b.n	8006424 <USBD_StdEPReq+0x1c8>
              break;
 8006422:	bf00      	nop
          }
          break;
 8006424:	e0ab      	b.n	800657e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d002      	beq.n	8006438 <USBD_StdEPReq+0x1dc>
 8006432:	2b03      	cmp	r3, #3
 8006434:	d032      	beq.n	800649c <USBD_StdEPReq+0x240>
 8006436:	e097      	b.n	8006568 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006438:	7bbb      	ldrb	r3, [r7, #14]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d007      	beq.n	800644e <USBD_StdEPReq+0x1f2>
 800643e:	7bbb      	ldrb	r3, [r7, #14]
 8006440:	2b80      	cmp	r3, #128	; 0x80
 8006442:	d004      	beq.n	800644e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fbed 	bl	8006c26 <USBD_CtlError>
                break;
 800644c:	e091      	b.n	8006572 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800644e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006452:	2b00      	cmp	r3, #0
 8006454:	da0b      	bge.n	800646e <USBD_StdEPReq+0x212>
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	3310      	adds	r3, #16
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	4413      	add	r3, r2
 800646a:	3304      	adds	r3, #4
 800646c:	e00b      	b.n	8006486 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800646e:	7bbb      	ldrb	r3, [r7, #14]
 8006470:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006474:	4613      	mov	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	4413      	add	r3, r2
 8006484:	3304      	adds	r3, #4
 8006486:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2202      	movs	r2, #2
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fc37 	bl	8006d08 <USBD_CtlSendData>
              break;
 800649a:	e06a      	b.n	8006572 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800649c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	da11      	bge.n	80064c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064a4:	7bbb      	ldrb	r3, [r7, #14]
 80064a6:	f003 020f 	and.w	r2, r3, #15
 80064aa:	6879      	ldr	r1, [r7, #4]
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	440b      	add	r3, r1
 80064b6:	3324      	adds	r3, #36	; 0x24
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d117      	bne.n	80064ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fbb0 	bl	8006c26 <USBD_CtlError>
                  break;
 80064c6:	e054      	b.n	8006572 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
 80064ca:	f003 020f 	and.w	r2, r3, #15
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	4613      	mov	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	440b      	add	r3, r1
 80064da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d104      	bne.n	80064ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fb9d 	bl	8006c26 <USBD_CtlError>
                  break;
 80064ec:	e041      	b.n	8006572 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	da0b      	bge.n	800650e <USBD_StdEPReq+0x2b2>
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	3310      	adds	r3, #16
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	4413      	add	r3, r2
 800650a:	3304      	adds	r3, #4
 800650c:	e00b      	b.n	8006526 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800650e:	7bbb      	ldrb	r3, [r7, #14]
 8006510:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	4413      	add	r3, r2
 8006524:	3304      	adds	r3, #4
 8006526:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <USBD_StdEPReq+0x2d8>
 800652e:	7bbb      	ldrb	r3, [r7, #14]
 8006530:	2b80      	cmp	r3, #128	; 0x80
 8006532:	d103      	bne.n	800653c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2200      	movs	r2, #0
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	e00e      	b.n	800655a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800653c:	7bbb      	ldrb	r3, [r7, #14]
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 f8a3 	bl	800768c <USBD_LL_IsStallEP>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2201      	movs	r2, #1
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	e002      	b.n	800655a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2202      	movs	r2, #2
 800655e:	4619      	mov	r1, r3
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fbd1 	bl	8006d08 <USBD_CtlSendData>
              break;
 8006566:	e004      	b.n	8006572 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fb5b 	bl	8006c26 <USBD_CtlError>
              break;
 8006570:	bf00      	nop
          }
          break;
 8006572:	e004      	b.n	800657e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fb55 	bl	8006c26 <USBD_CtlError>
          break;
 800657c:	bf00      	nop
      }
      break;
 800657e:	e005      	b.n	800658c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fb4f 	bl	8006c26 <USBD_CtlError>
      break;
 8006588:	e000      	b.n	800658c <USBD_StdEPReq+0x330>
      break;
 800658a:	bf00      	nop
  }

  return ret;
 800658c:	7bfb      	ldrb	r3, [r7, #15]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	885b      	ldrh	r3, [r3, #2]
 80065b2:	0a1b      	lsrs	r3, r3, #8
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b01      	subs	r3, #1
 80065b8:	2b06      	cmp	r3, #6
 80065ba:	f200 8128 	bhi.w	800680e <USBD_GetDescriptor+0x276>
 80065be:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <USBD_GetDescriptor+0x2c>)
 80065c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c4:	080065e1 	.word	0x080065e1
 80065c8:	080065f9 	.word	0x080065f9
 80065cc:	08006639 	.word	0x08006639
 80065d0:	0800680f 	.word	0x0800680f
 80065d4:	0800680f 	.word	0x0800680f
 80065d8:	080067af 	.word	0x080067af
 80065dc:	080067db 	.word	0x080067db
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	7c12      	ldrb	r2, [r2, #16]
 80065ec:	f107 0108 	add.w	r1, r7, #8
 80065f0:	4610      	mov	r0, r2
 80065f2:	4798      	blx	r3
 80065f4:	60f8      	str	r0, [r7, #12]
      break;
 80065f6:	e112      	b.n	800681e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	7c1b      	ldrb	r3, [r3, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10d      	bne.n	800661c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006608:	f107 0208 	add.w	r2, r7, #8
 800660c:	4610      	mov	r0, r2
 800660e:	4798      	blx	r3
 8006610:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3301      	adds	r3, #1
 8006616:	2202      	movs	r2, #2
 8006618:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800661a:	e100      	b.n	800681e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	f107 0208 	add.w	r2, r7, #8
 8006628:	4610      	mov	r0, r2
 800662a:	4798      	blx	r3
 800662c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3301      	adds	r3, #1
 8006632:	2202      	movs	r2, #2
 8006634:	701a      	strb	r2, [r3, #0]
      break;
 8006636:	e0f2      	b.n	800681e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	885b      	ldrh	r3, [r3, #2]
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b05      	cmp	r3, #5
 8006640:	f200 80ac 	bhi.w	800679c <USBD_GetDescriptor+0x204>
 8006644:	a201      	add	r2, pc, #4	; (adr r2, 800664c <USBD_GetDescriptor+0xb4>)
 8006646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664a:	bf00      	nop
 800664c:	08006665 	.word	0x08006665
 8006650:	08006699 	.word	0x08006699
 8006654:	080066cd 	.word	0x080066cd
 8006658:	08006701 	.word	0x08006701
 800665c:	08006735 	.word	0x08006735
 8006660:	08006769 	.word	0x08006769
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00b      	beq.n	8006688 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	7c12      	ldrb	r2, [r2, #16]
 800667c:	f107 0108 	add.w	r1, r7, #8
 8006680:	4610      	mov	r0, r2
 8006682:	4798      	blx	r3
 8006684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006686:	e091      	b.n	80067ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 facb 	bl	8006c26 <USBD_CtlError>
            err++;
 8006690:	7afb      	ldrb	r3, [r7, #11]
 8006692:	3301      	adds	r3, #1
 8006694:	72fb      	strb	r3, [r7, #11]
          break;
 8006696:	e089      	b.n	80067ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	7c12      	ldrb	r2, [r2, #16]
 80066b0:	f107 0108 	add.w	r1, r7, #8
 80066b4:	4610      	mov	r0, r2
 80066b6:	4798      	blx	r3
 80066b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ba:	e077      	b.n	80067ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fab1 	bl	8006c26 <USBD_CtlError>
            err++;
 80066c4:	7afb      	ldrb	r3, [r7, #11]
 80066c6:	3301      	adds	r3, #1
 80066c8:	72fb      	strb	r3, [r7, #11]
          break;
 80066ca:	e06f      	b.n	80067ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00b      	beq.n	80066f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	7c12      	ldrb	r2, [r2, #16]
 80066e4:	f107 0108 	add.w	r1, r7, #8
 80066e8:	4610      	mov	r0, r2
 80066ea:	4798      	blx	r3
 80066ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ee:	e05d      	b.n	80067ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fa97 	bl	8006c26 <USBD_CtlError>
            err++;
 80066f8:	7afb      	ldrb	r3, [r7, #11]
 80066fa:	3301      	adds	r3, #1
 80066fc:	72fb      	strb	r3, [r7, #11]
          break;
 80066fe:	e055      	b.n	80067ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00b      	beq.n	8006724 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	7c12      	ldrb	r2, [r2, #16]
 8006718:	f107 0108 	add.w	r1, r7, #8
 800671c:	4610      	mov	r0, r2
 800671e:	4798      	blx	r3
 8006720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006722:	e043      	b.n	80067ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fa7d 	bl	8006c26 <USBD_CtlError>
            err++;
 800672c:	7afb      	ldrb	r3, [r7, #11]
 800672e:	3301      	adds	r3, #1
 8006730:	72fb      	strb	r3, [r7, #11]
          break;
 8006732:	e03b      	b.n	80067ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00b      	beq.n	8006758 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	7c12      	ldrb	r2, [r2, #16]
 800674c:	f107 0108 	add.w	r1, r7, #8
 8006750:	4610      	mov	r0, r2
 8006752:	4798      	blx	r3
 8006754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006756:	e029      	b.n	80067ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fa63 	bl	8006c26 <USBD_CtlError>
            err++;
 8006760:	7afb      	ldrb	r3, [r7, #11]
 8006762:	3301      	adds	r3, #1
 8006764:	72fb      	strb	r3, [r7, #11]
          break;
 8006766:	e021      	b.n	80067ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00b      	beq.n	800678c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	7c12      	ldrb	r2, [r2, #16]
 8006780:	f107 0108 	add.w	r1, r7, #8
 8006784:	4610      	mov	r0, r2
 8006786:	4798      	blx	r3
 8006788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800678a:	e00f      	b.n	80067ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fa49 	bl	8006c26 <USBD_CtlError>
            err++;
 8006794:	7afb      	ldrb	r3, [r7, #11]
 8006796:	3301      	adds	r3, #1
 8006798:	72fb      	strb	r3, [r7, #11]
          break;
 800679a:	e007      	b.n	80067ac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fa41 	bl	8006c26 <USBD_CtlError>
          err++;
 80067a4:	7afb      	ldrb	r3, [r7, #11]
 80067a6:	3301      	adds	r3, #1
 80067a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80067aa:	bf00      	nop
      }
      break;
 80067ac:	e037      	b.n	800681e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	7c1b      	ldrb	r3, [r3, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067be:	f107 0208 	add.w	r2, r7, #8
 80067c2:	4610      	mov	r0, r2
 80067c4:	4798      	blx	r3
 80067c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067c8:	e029      	b.n	800681e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fa2a 	bl	8006c26 <USBD_CtlError>
        err++;
 80067d2:	7afb      	ldrb	r3, [r7, #11]
 80067d4:	3301      	adds	r3, #1
 80067d6:	72fb      	strb	r3, [r7, #11]
      break;
 80067d8:	e021      	b.n	800681e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	7c1b      	ldrb	r3, [r3, #16]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10d      	bne.n	80067fe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ea:	f107 0208 	add.w	r2, r7, #8
 80067ee:	4610      	mov	r0, r2
 80067f0:	4798      	blx	r3
 80067f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	3301      	adds	r3, #1
 80067f8:	2207      	movs	r2, #7
 80067fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067fc:	e00f      	b.n	800681e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fa10 	bl	8006c26 <USBD_CtlError>
        err++;
 8006806:	7afb      	ldrb	r3, [r7, #11]
 8006808:	3301      	adds	r3, #1
 800680a:	72fb      	strb	r3, [r7, #11]
      break;
 800680c:	e007      	b.n	800681e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fa08 	bl	8006c26 <USBD_CtlError>
      err++;
 8006816:	7afb      	ldrb	r3, [r7, #11]
 8006818:	3301      	adds	r3, #1
 800681a:	72fb      	strb	r3, [r7, #11]
      break;
 800681c:	bf00      	nop
  }

  if (err != 0U)
 800681e:	7afb      	ldrb	r3, [r7, #11]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d11e      	bne.n	8006862 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	88db      	ldrh	r3, [r3, #6]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d016      	beq.n	800685a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800682c:	893b      	ldrh	r3, [r7, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00e      	beq.n	8006850 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	88da      	ldrh	r2, [r3, #6]
 8006836:	893b      	ldrh	r3, [r7, #8]
 8006838:	4293      	cmp	r3, r2
 800683a:	bf28      	it	cs
 800683c:	4613      	movcs	r3, r2
 800683e:	b29b      	uxth	r3, r3
 8006840:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006842:	893b      	ldrh	r3, [r7, #8]
 8006844:	461a      	mov	r2, r3
 8006846:	68f9      	ldr	r1, [r7, #12]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fa5d 	bl	8006d08 <USBD_CtlSendData>
 800684e:	e009      	b.n	8006864 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f9e7 	bl	8006c26 <USBD_CtlError>
 8006858:	e004      	b.n	8006864 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 faae 	bl	8006dbc <USBD_CtlSendStatus>
 8006860:	e000      	b.n	8006864 <USBD_GetDescriptor+0x2cc>
    return;
 8006862:	bf00      	nop
  }
}
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop

0800686c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	889b      	ldrh	r3, [r3, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d131      	bne.n	80068e2 <USBD_SetAddress+0x76>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	88db      	ldrh	r3, [r3, #6]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d12d      	bne.n	80068e2 <USBD_SetAddress+0x76>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	885b      	ldrh	r3, [r3, #2]
 800688a:	2b7f      	cmp	r3, #127	; 0x7f
 800688c:	d829      	bhi.n	80068e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	885b      	ldrh	r3, [r3, #2]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006898:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d104      	bne.n	80068b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f9bc 	bl	8006c26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ae:	e01d      	b.n	80068ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	7bfa      	ldrb	r2, [r7, #15]
 80068b4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 ff11 	bl	80076e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fa7a 	bl	8006dbc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d004      	beq.n	80068d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2202      	movs	r2, #2
 80068d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d6:	e009      	b.n	80068ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e0:	e004      	b.n	80068ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f99e 	bl	8006c26 <USBD_CtlError>
  }
}
 80068ea:	bf00      	nop
 80068ec:	bf00      	nop
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	885b      	ldrh	r3, [r3, #2]
 8006906:	b2da      	uxtb	r2, r3
 8006908:	4b4e      	ldr	r3, [pc, #312]	; (8006a44 <USBD_SetConfig+0x150>)
 800690a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800690c:	4b4d      	ldr	r3, [pc, #308]	; (8006a44 <USBD_SetConfig+0x150>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d905      	bls.n	8006920 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f985 	bl	8006c26 <USBD_CtlError>
    return USBD_FAIL;
 800691c:	2303      	movs	r3, #3
 800691e:	e08c      	b.n	8006a3a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d002      	beq.n	8006932 <USBD_SetConfig+0x3e>
 800692c:	2b03      	cmp	r3, #3
 800692e:	d029      	beq.n	8006984 <USBD_SetConfig+0x90>
 8006930:	e075      	b.n	8006a1e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006932:	4b44      	ldr	r3, [pc, #272]	; (8006a44 <USBD_SetConfig+0x150>)
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d020      	beq.n	800697c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800693a:	4b42      	ldr	r3, [pc, #264]	; (8006a44 <USBD_SetConfig+0x150>)
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006944:	4b3f      	ldr	r3, [pc, #252]	; (8006a44 <USBD_SetConfig+0x150>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fe ffe7 	bl	800591e <USBD_SetClassConfig>
 8006950:	4603      	mov	r3, r0
 8006952:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006954:	7bfb      	ldrb	r3, [r7, #15]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d008      	beq.n	800696c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f962 	bl	8006c26 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2202      	movs	r2, #2
 8006966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800696a:	e065      	b.n	8006a38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fa25 	bl	8006dbc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2203      	movs	r2, #3
 8006976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800697a:	e05d      	b.n	8006a38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fa1d 	bl	8006dbc <USBD_CtlSendStatus>
      break;
 8006982:	e059      	b.n	8006a38 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006984:	4b2f      	ldr	r3, [pc, #188]	; (8006a44 <USBD_SetConfig+0x150>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d112      	bne.n	80069b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006994:	4b2b      	ldr	r3, [pc, #172]	; (8006a44 <USBD_SetConfig+0x150>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800699e:	4b29      	ldr	r3, [pc, #164]	; (8006a44 <USBD_SetConfig+0x150>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7fe ffd6 	bl	8005956 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa06 	bl	8006dbc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069b0:	e042      	b.n	8006a38 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80069b2:	4b24      	ldr	r3, [pc, #144]	; (8006a44 <USBD_SetConfig+0x150>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d02a      	beq.n	8006a16 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7fe ffc4 	bl	8005956 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069ce:	4b1d      	ldr	r3, [pc, #116]	; (8006a44 <USBD_SetConfig+0x150>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	461a      	mov	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069d8:	4b1a      	ldr	r3, [pc, #104]	; (8006a44 <USBD_SetConfig+0x150>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	4619      	mov	r1, r3
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7fe ff9d 	bl	800591e <USBD_SetClassConfig>
 80069e4:	4603      	mov	r3, r0
 80069e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00f      	beq.n	8006a0e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f918 	bl	8006c26 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fe ffa9 	bl	8005956 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a0c:	e014      	b.n	8006a38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f9d4 	bl	8006dbc <USBD_CtlSendStatus>
      break;
 8006a14:	e010      	b.n	8006a38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f9d0 	bl	8006dbc <USBD_CtlSendStatus>
      break;
 8006a1c:	e00c      	b.n	8006a38 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f900 	bl	8006c26 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a26:	4b07      	ldr	r3, [pc, #28]	; (8006a44 <USBD_SetConfig+0x150>)
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7fe ff92 	bl	8005956 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a32:	2303      	movs	r3, #3
 8006a34:	73fb      	strb	r3, [r7, #15]
      break;
 8006a36:	bf00      	nop
  }

  return ret;
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20000228 	.word	0x20000228

08006a48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	88db      	ldrh	r3, [r3, #6]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d004      	beq.n	8006a64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f8e2 	bl	8006c26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a62:	e023      	b.n	8006aac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	dc02      	bgt.n	8006a76 <USBD_GetConfig+0x2e>
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	dc03      	bgt.n	8006a7c <USBD_GetConfig+0x34>
 8006a74:	e015      	b.n	8006aa2 <USBD_GetConfig+0x5a>
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d00b      	beq.n	8006a92 <USBD_GetConfig+0x4a>
 8006a7a:	e012      	b.n	8006aa2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3308      	adds	r3, #8
 8006a86:	2201      	movs	r2, #1
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f93c 	bl	8006d08 <USBD_CtlSendData>
        break;
 8006a90:	e00c      	b.n	8006aac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3304      	adds	r3, #4
 8006a96:	2201      	movs	r2, #1
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f934 	bl	8006d08 <USBD_CtlSendData>
        break;
 8006aa0:	e004      	b.n	8006aac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f8be 	bl	8006c26 <USBD_CtlError>
        break;
 8006aaa:	bf00      	nop
}
 8006aac:	bf00      	nop
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d81e      	bhi.n	8006b0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	88db      	ldrh	r3, [r3, #6]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d004      	beq.n	8006ade <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f8a5 	bl	8006c26 <USBD_CtlError>
        break;
 8006adc:	e01a      	b.n	8006b14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	f043 0202 	orr.w	r2, r3, #2
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	330c      	adds	r3, #12
 8006afe:	2202      	movs	r2, #2
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f900 	bl	8006d08 <USBD_CtlSendData>
      break;
 8006b08:	e004      	b.n	8006b14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f88a 	bl	8006c26 <USBD_CtlError>
      break;
 8006b12:	bf00      	nop
  }
}
 8006b14:	bf00      	nop
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	885b      	ldrh	r3, [r3, #2]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d107      	bne.n	8006b3e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f940 	bl	8006dbc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b3c:	e013      	b.n	8006b66 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	885b      	ldrh	r3, [r3, #2]
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d10b      	bne.n	8006b5e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	889b      	ldrh	r3, [r3, #4]
 8006b4a:	0a1b      	lsrs	r3, r3, #8
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f930 	bl	8006dbc <USBD_CtlSendStatus>
}
 8006b5c:	e003      	b.n	8006b66 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f860 	bl	8006c26 <USBD_CtlError>
}
 8006b66:	bf00      	nop
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b082      	sub	sp, #8
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	3b01      	subs	r3, #1
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d80b      	bhi.n	8006b9e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	885b      	ldrh	r3, [r3, #2]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d10c      	bne.n	8006ba8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f910 	bl	8006dbc <USBD_CtlSendStatus>
      }
      break;
 8006b9c:	e004      	b.n	8006ba8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f840 	bl	8006c26 <USBD_CtlError>
      break;
 8006ba6:	e000      	b.n	8006baa <USBD_ClrFeature+0x3c>
      break;
 8006ba8:	bf00      	nop
  }
}
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	781a      	ldrb	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	781a      	ldrb	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f7ff fa41 	bl	8006064 <SWAPBYTE>
 8006be2:	4603      	mov	r3, r0
 8006be4:	461a      	mov	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3301      	adds	r3, #1
 8006bee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f7ff fa34 	bl	8006064 <SWAPBYTE>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	461a      	mov	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3301      	adds	r3, #1
 8006c08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f7ff fa27 	bl	8006064 <SWAPBYTE>
 8006c16:	4603      	mov	r3, r0
 8006c18:	461a      	mov	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	80da      	strh	r2, [r3, #6]
}
 8006c1e:	bf00      	nop
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b082      	sub	sp, #8
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c30:	2180      	movs	r1, #128	; 0x80
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fcec 	bl	8007610 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c38:	2100      	movs	r1, #0
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fce8 	bl	8007610 <USBD_LL_StallEP>
}
 8006c40:	bf00      	nop
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d036      	beq.n	8006ccc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c62:	6938      	ldr	r0, [r7, #16]
 8006c64:	f000 f836 	bl	8006cd4 <USBD_GetLen>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	7812      	ldrb	r2, [r2, #0]
 8006c80:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c82:	7dfb      	ldrb	r3, [r7, #23]
 8006c84:	3301      	adds	r3, #1
 8006c86:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	2203      	movs	r2, #3
 8006c90:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	3301      	adds	r3, #1
 8006c96:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c98:	e013      	b.n	8006cc2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	7812      	ldrb	r2, [r2, #0]
 8006ca4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	613b      	str	r3, [r7, #16]
    idx++;
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	2200      	movs	r2, #0
 8006cba:	701a      	strb	r2, [r3, #0]
    idx++;
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1e7      	bne.n	8006c9a <USBD_GetString+0x52>
 8006cca:	e000      	b.n	8006cce <USBD_GetString+0x86>
    return;
 8006ccc:	bf00      	nop
  }
}
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ce4:	e005      	b.n	8006cf2 <USBD_GetLen+0x1e>
  {
    len++;
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1f5      	bne.n	8006ce6 <USBD_GetLen+0x12>
  }

  return len;
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 fcf7 	bl	8007722 <USBD_LL_Transmit>

  return USBD_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b084      	sub	sp, #16
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	2100      	movs	r1, #0
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 fce6 	bl	8007722 <USBD_LL_Transmit>

  return USBD_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2203      	movs	r2, #3
 8006d70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	2100      	movs	r1, #0
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 fcea 	bl	8007764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	60f8      	str	r0, [r7, #12]
 8006da2:	60b9      	str	r1, [r7, #8]
 8006da4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	2100      	movs	r1, #0
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 fcd9 	bl	8007764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2204      	movs	r2, #4
 8006dc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dcc:	2300      	movs	r3, #0
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fca5 	bl	8007722 <USBD_LL_Transmit>

  return USBD_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b082      	sub	sp, #8
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2205      	movs	r2, #5
 8006dee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006df2:	2300      	movs	r3, #0
 8006df4:	2200      	movs	r2, #0
 8006df6:	2100      	movs	r1, #0
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fcb3 	bl	8007764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4912      	ldr	r1, [pc, #72]	; (8006e58 <MX_USB_DEVICE_Init+0x50>)
 8006e10:	4812      	ldr	r0, [pc, #72]	; (8006e5c <MX_USB_DEVICE_Init+0x54>)
 8006e12:	f7fe fd07 	bl	8005824 <USBD_Init>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e1c:	f7f9 fcfe 	bl	800081c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e20:	490f      	ldr	r1, [pc, #60]	; (8006e60 <MX_USB_DEVICE_Init+0x58>)
 8006e22:	480e      	ldr	r0, [pc, #56]	; (8006e5c <MX_USB_DEVICE_Init+0x54>)
 8006e24:	f7fe fd2e 	bl	8005884 <USBD_RegisterClass>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e2e:	f7f9 fcf5 	bl	800081c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e32:	490c      	ldr	r1, [pc, #48]	; (8006e64 <MX_USB_DEVICE_Init+0x5c>)
 8006e34:	4809      	ldr	r0, [pc, #36]	; (8006e5c <MX_USB_DEVICE_Init+0x54>)
 8006e36:	f7fe fc55 	bl	80056e4 <USBD_CDC_RegisterInterface>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e40:	f7f9 fcec 	bl	800081c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e44:	4805      	ldr	r0, [pc, #20]	; (8006e5c <MX_USB_DEVICE_Init+0x54>)
 8006e46:	f7fe fd53 	bl	80058f0 <USBD_Start>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e50:	f7f9 fce4 	bl	800081c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e54:	bf00      	nop
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	200000c0 	.word	0x200000c0
 8006e5c:	2000022c 	.word	0x2000022c
 8006e60:	2000002c 	.word	0x2000002c
 8006e64:	200000ac 	.word	0x200000ac

08006e68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4905      	ldr	r1, [pc, #20]	; (8006e84 <CDC_Init_FS+0x1c>)
 8006e70:	4805      	ldr	r0, [pc, #20]	; (8006e88 <CDC_Init_FS+0x20>)
 8006e72:	f7fe fc51 	bl	8005718 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e76:	4905      	ldr	r1, [pc, #20]	; (8006e8c <CDC_Init_FS+0x24>)
 8006e78:	4803      	ldr	r0, [pc, #12]	; (8006e88 <CDC_Init_FS+0x20>)
 8006e7a:	f7fe fc6f 	bl	800575c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000d08 	.word	0x20000d08
 8006e88:	2000022c 	.word	0x2000022c
 8006e8c:	20000508 	.word	0x20000508

08006e90 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	6039      	str	r1, [r7, #0]
 8006eaa:	71fb      	strb	r3, [r7, #7]
 8006eac:	4613      	mov	r3, r2
 8006eae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	2b23      	cmp	r3, #35	; 0x23
 8006eb4:	d84a      	bhi.n	8006f4c <CDC_Control_FS+0xac>
 8006eb6:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <CDC_Control_FS+0x1c>)
 8006eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebc:	08006f4d 	.word	0x08006f4d
 8006ec0:	08006f4d 	.word	0x08006f4d
 8006ec4:	08006f4d 	.word	0x08006f4d
 8006ec8:	08006f4d 	.word	0x08006f4d
 8006ecc:	08006f4d 	.word	0x08006f4d
 8006ed0:	08006f4d 	.word	0x08006f4d
 8006ed4:	08006f4d 	.word	0x08006f4d
 8006ed8:	08006f4d 	.word	0x08006f4d
 8006edc:	08006f4d 	.word	0x08006f4d
 8006ee0:	08006f4d 	.word	0x08006f4d
 8006ee4:	08006f4d 	.word	0x08006f4d
 8006ee8:	08006f4d 	.word	0x08006f4d
 8006eec:	08006f4d 	.word	0x08006f4d
 8006ef0:	08006f4d 	.word	0x08006f4d
 8006ef4:	08006f4d 	.word	0x08006f4d
 8006ef8:	08006f4d 	.word	0x08006f4d
 8006efc:	08006f4d 	.word	0x08006f4d
 8006f00:	08006f4d 	.word	0x08006f4d
 8006f04:	08006f4d 	.word	0x08006f4d
 8006f08:	08006f4d 	.word	0x08006f4d
 8006f0c:	08006f4d 	.word	0x08006f4d
 8006f10:	08006f4d 	.word	0x08006f4d
 8006f14:	08006f4d 	.word	0x08006f4d
 8006f18:	08006f4d 	.word	0x08006f4d
 8006f1c:	08006f4d 	.word	0x08006f4d
 8006f20:	08006f4d 	.word	0x08006f4d
 8006f24:	08006f4d 	.word	0x08006f4d
 8006f28:	08006f4d 	.word	0x08006f4d
 8006f2c:	08006f4d 	.word	0x08006f4d
 8006f30:	08006f4d 	.word	0x08006f4d
 8006f34:	08006f4d 	.word	0x08006f4d
 8006f38:	08006f4d 	.word	0x08006f4d
 8006f3c:	08006f4d 	.word	0x08006f4d
 8006f40:	08006f4d 	.word	0x08006f4d
 8006f44:	08006f4d 	.word	0x08006f4d
 8006f48:	08006f4d 	.word	0x08006f4d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f4c:	bf00      	nop
  }

  return (USBD_OK);
 8006f4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  memset (buffer, '\0', 64); // clear the buffer
 8006f66:	2240      	movs	r2, #64	; 0x40
 8006f68:	2100      	movs	r1, #0
 8006f6a:	480b      	ldr	r0, [pc, #44]	; (8006f98 <CDC_Receive_FS+0x3c>)
 8006f6c:	f000 fcaa 	bl	80078c4 <memset>
	  uint8_t len = (uint8_t) *Len;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	73fb      	strb	r3, [r7, #15]
	  memcpy(buffer, Buf, len); // copy the data to the buffer
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	4806      	ldr	r0, [pc, #24]	; (8006f98 <CDC_Receive_FS+0x3c>)
 8006f7e:	f000 fc93 	bl	80078a8 <memcpy>
	  memset(Buf, '\0', len); // clear the Buf also
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
 8006f84:	461a      	mov	r2, r3
 8006f86:	2100      	movs	r1, #0
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fc9b 	bl	80078c4 <memset>

  /* USER CODE END 6 */
}
 8006f8e:	bf00      	nop
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	200001d8 	.word	0x200001d8

08006f9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006fac:	4b0d      	ldr	r3, [pc, #52]	; (8006fe4 <CDC_Transmit_FS+0x48>)
 8006fae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fb2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e00b      	b.n	8006fda <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006fc2:	887b      	ldrh	r3, [r7, #2]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	4806      	ldr	r0, [pc, #24]	; (8006fe4 <CDC_Transmit_FS+0x48>)
 8006fca:	f7fe fba5 	bl	8005718 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006fce:	4805      	ldr	r0, [pc, #20]	; (8006fe4 <CDC_Transmit_FS+0x48>)
 8006fd0:	f7fe fbe2 	bl	8005798 <USBD_CDC_TransmitPacket>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	2000022c 	.word	0x2000022c

08006fe8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
	...

0800700c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	6039      	str	r1, [r7, #0]
 8007016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2212      	movs	r2, #18
 800701c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800701e:	4b03      	ldr	r3, [pc, #12]	; (800702c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	200000dc 	.word	0x200000dc

08007030 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	6039      	str	r1, [r7, #0]
 800703a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2204      	movs	r2, #4
 8007040:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007042:	4b03      	ldr	r3, [pc, #12]	; (8007050 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	200000f0 	.word	0x200000f0

08007054 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	6039      	str	r1, [r7, #0]
 800705e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007060:	79fb      	ldrb	r3, [r7, #7]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d105      	bne.n	8007072 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	4907      	ldr	r1, [pc, #28]	; (8007088 <USBD_FS_ProductStrDescriptor+0x34>)
 800706a:	4808      	ldr	r0, [pc, #32]	; (800708c <USBD_FS_ProductStrDescriptor+0x38>)
 800706c:	f7ff fdec 	bl	8006c48 <USBD_GetString>
 8007070:	e004      	b.n	800707c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	4904      	ldr	r1, [pc, #16]	; (8007088 <USBD_FS_ProductStrDescriptor+0x34>)
 8007076:	4805      	ldr	r0, [pc, #20]	; (800708c <USBD_FS_ProductStrDescriptor+0x38>)
 8007078:	f7ff fde6 	bl	8006c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800707c:	4b02      	ldr	r3, [pc, #8]	; (8007088 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800707e:	4618      	mov	r0, r3
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20001508 	.word	0x20001508
 800708c:	080081b0 	.word	0x080081b0

08007090 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	4603      	mov	r3, r0
 8007098:	6039      	str	r1, [r7, #0]
 800709a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	4904      	ldr	r1, [pc, #16]	; (80070b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80070a0:	4804      	ldr	r0, [pc, #16]	; (80070b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80070a2:	f7ff fdd1 	bl	8006c48 <USBD_GetString>
  return USBD_StrDesc;
 80070a6:	4b02      	ldr	r3, [pc, #8]	; (80070b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	20001508 	.word	0x20001508
 80070b4:	080081c8 	.word	0x080081c8

080070b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	6039      	str	r1, [r7, #0]
 80070c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	221a      	movs	r2, #26
 80070c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070ca:	f000 f843 	bl	8007154 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80070ce:	4b02      	ldr	r3, [pc, #8]	; (80070d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	200000f4 	.word	0x200000f4

080070dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	4603      	mov	r3, r0
 80070e4:	6039      	str	r1, [r7, #0]
 80070e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070e8:	79fb      	ldrb	r3, [r7, #7]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d105      	bne.n	80070fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	4907      	ldr	r1, [pc, #28]	; (8007110 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070f2:	4808      	ldr	r0, [pc, #32]	; (8007114 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070f4:	f7ff fda8 	bl	8006c48 <USBD_GetString>
 80070f8:	e004      	b.n	8007104 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	4904      	ldr	r1, [pc, #16]	; (8007110 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070fe:	4805      	ldr	r0, [pc, #20]	; (8007114 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007100:	f7ff fda2 	bl	8006c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007104:	4b02      	ldr	r3, [pc, #8]	; (8007110 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007106:	4618      	mov	r0, r3
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20001508 	.word	0x20001508
 8007114:	080081dc 	.word	0x080081dc

08007118 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	6039      	str	r1, [r7, #0]
 8007122:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d105      	bne.n	8007136 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	4907      	ldr	r1, [pc, #28]	; (800714c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800712e:	4808      	ldr	r0, [pc, #32]	; (8007150 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007130:	f7ff fd8a 	bl	8006c48 <USBD_GetString>
 8007134:	e004      	b.n	8007140 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	4904      	ldr	r1, [pc, #16]	; (800714c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800713a:	4805      	ldr	r0, [pc, #20]	; (8007150 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800713c:	f7ff fd84 	bl	8006c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007140:	4b02      	ldr	r3, [pc, #8]	; (800714c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20001508 	.word	0x20001508
 8007150:	080081e8 	.word	0x080081e8

08007154 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800715a:	4b0f      	ldr	r3, [pc, #60]	; (8007198 <Get_SerialNum+0x44>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007160:	4b0e      	ldr	r3, [pc, #56]	; (800719c <Get_SerialNum+0x48>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007166:	4b0e      	ldr	r3, [pc, #56]	; (80071a0 <Get_SerialNum+0x4c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4413      	add	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d009      	beq.n	800718e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800717a:	2208      	movs	r2, #8
 800717c:	4909      	ldr	r1, [pc, #36]	; (80071a4 <Get_SerialNum+0x50>)
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 f814 	bl	80071ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007184:	2204      	movs	r2, #4
 8007186:	4908      	ldr	r1, [pc, #32]	; (80071a8 <Get_SerialNum+0x54>)
 8007188:	68b8      	ldr	r0, [r7, #8]
 800718a:	f000 f80f 	bl	80071ac <IntToUnicode>
  }
}
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	1fff7a10 	.word	0x1fff7a10
 800719c:	1fff7a14 	.word	0x1fff7a14
 80071a0:	1fff7a18 	.word	0x1fff7a18
 80071a4:	200000f6 	.word	0x200000f6
 80071a8:	20000106 	.word	0x20000106

080071ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	4613      	mov	r3, r2
 80071b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80071be:	2300      	movs	r3, #0
 80071c0:	75fb      	strb	r3, [r7, #23]
 80071c2:	e027      	b.n	8007214 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	0f1b      	lsrs	r3, r3, #28
 80071c8:	2b09      	cmp	r3, #9
 80071ca:	d80b      	bhi.n	80071e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	0f1b      	lsrs	r3, r3, #28
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	4619      	mov	r1, r3
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	440b      	add	r3, r1
 80071dc:	3230      	adds	r2, #48	; 0x30
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	701a      	strb	r2, [r3, #0]
 80071e2:	e00a      	b.n	80071fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	0f1b      	lsrs	r3, r3, #28
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	4619      	mov	r1, r3
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	440b      	add	r3, r1
 80071f4:	3237      	adds	r2, #55	; 0x37
 80071f6:	b2d2      	uxtb	r2, r2
 80071f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	011b      	lsls	r3, r3, #4
 80071fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007200:	7dfb      	ldrb	r3, [r7, #23]
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	3301      	adds	r3, #1
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	4413      	add	r3, r2
 800720a:	2200      	movs	r2, #0
 800720c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800720e:	7dfb      	ldrb	r3, [r7, #23]
 8007210:	3301      	adds	r3, #1
 8007212:	75fb      	strb	r3, [r7, #23]
 8007214:	7dfa      	ldrb	r2, [r7, #23]
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	429a      	cmp	r2, r3
 800721a:	d3d3      	bcc.n	80071c4 <IntToUnicode+0x18>
  }
}
 800721c:	bf00      	nop
 800721e:	bf00      	nop
 8007220:	371c      	adds	r7, #28
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
	...

0800722c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08a      	sub	sp, #40	; 0x28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007234:	f107 0314 	add.w	r3, r7, #20
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	605a      	str	r2, [r3, #4]
 800723e:	609a      	str	r2, [r3, #8]
 8007240:	60da      	str	r2, [r3, #12]
 8007242:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800724c:	d13a      	bne.n	80072c4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800724e:	2300      	movs	r3, #0
 8007250:	613b      	str	r3, [r7, #16]
 8007252:	4b1e      	ldr	r3, [pc, #120]	; (80072cc <HAL_PCD_MspInit+0xa0>)
 8007254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007256:	4a1d      	ldr	r2, [pc, #116]	; (80072cc <HAL_PCD_MspInit+0xa0>)
 8007258:	f043 0301 	orr.w	r3, r3, #1
 800725c:	6313      	str	r3, [r2, #48]	; 0x30
 800725e:	4b1b      	ldr	r3, [pc, #108]	; (80072cc <HAL_PCD_MspInit+0xa0>)
 8007260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	613b      	str	r3, [r7, #16]
 8007268:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800726a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800726e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007270:	2302      	movs	r3, #2
 8007272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007274:	2300      	movs	r3, #0
 8007276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007278:	2303      	movs	r3, #3
 800727a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800727c:	230a      	movs	r3, #10
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007280:	f107 0314 	add.w	r3, r7, #20
 8007284:	4619      	mov	r1, r3
 8007286:	4812      	ldr	r0, [pc, #72]	; (80072d0 <HAL_PCD_MspInit+0xa4>)
 8007288:	f7fa f954 	bl	8001534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800728c:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <HAL_PCD_MspInit+0xa0>)
 800728e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007290:	4a0e      	ldr	r2, [pc, #56]	; (80072cc <HAL_PCD_MspInit+0xa0>)
 8007292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007296:	6353      	str	r3, [r2, #52]	; 0x34
 8007298:	2300      	movs	r3, #0
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	4b0b      	ldr	r3, [pc, #44]	; (80072cc <HAL_PCD_MspInit+0xa0>)
 800729e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a0:	4a0a      	ldr	r2, [pc, #40]	; (80072cc <HAL_PCD_MspInit+0xa0>)
 80072a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072a6:	6453      	str	r3, [r2, #68]	; 0x44
 80072a8:	4b08      	ldr	r3, [pc, #32]	; (80072cc <HAL_PCD_MspInit+0xa0>)
 80072aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072b0:	60fb      	str	r3, [r7, #12]
 80072b2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80072b4:	2200      	movs	r2, #0
 80072b6:	2100      	movs	r1, #0
 80072b8:	2043      	movs	r0, #67	; 0x43
 80072ba:	f7fa f904 	bl	80014c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80072be:	2043      	movs	r0, #67	; 0x43
 80072c0:	f7fa f91d 	bl	80014fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80072c4:	bf00      	nop
 80072c6:	3728      	adds	r7, #40	; 0x28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	40023800 	.word	0x40023800
 80072d0:	40020000 	.word	0x40020000

080072d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80072e8:	4619      	mov	r1, r3
 80072ea:	4610      	mov	r0, r2
 80072ec:	f7fe fb4d 	bl	800598a <USBD_LL_SetupStage>
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800730a:	78fa      	ldrb	r2, [r7, #3]
 800730c:	6879      	ldr	r1, [r7, #4]
 800730e:	4613      	mov	r3, r2
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	4413      	add	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	440b      	add	r3, r1
 8007318:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	78fb      	ldrb	r3, [r7, #3]
 8007320:	4619      	mov	r1, r3
 8007322:	f7fe fb87 	bl	8005a34 <USBD_LL_DataOutStage>
}
 8007326:	bf00      	nop
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	460b      	mov	r3, r1
 8007338:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007340:	78fa      	ldrb	r2, [r7, #3]
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	4613      	mov	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	440b      	add	r3, r1
 800734e:	334c      	adds	r3, #76	; 0x4c
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	4619      	mov	r1, r3
 8007356:	f7fe fc20 	bl	8005b9a <USBD_LL_DataInStage>
}
 800735a:	bf00      	nop
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe fd54 	bl	8005e1e <USBD_LL_SOF>
}
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007386:	2301      	movs	r3, #1
 8007388:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d102      	bne.n	8007398 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007392:	2300      	movs	r3, #0
 8007394:	73fb      	strb	r3, [r7, #15]
 8007396:	e008      	b.n	80073aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	2b02      	cmp	r3, #2
 800739e:	d102      	bne.n	80073a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80073a0:	2301      	movs	r3, #1
 80073a2:	73fb      	strb	r3, [r7, #15]
 80073a4:	e001      	b.n	80073aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80073a6:	f7f9 fa39 	bl	800081c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073b0:	7bfa      	ldrb	r2, [r7, #15]
 80073b2:	4611      	mov	r1, r2
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe fcf4 	bl	8005da2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fe fc9c 	bl	8005cfe <USBD_LL_Reset>
}
 80073c6:	bf00      	nop
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fe fcef 	bl	8005dc2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6812      	ldr	r2, [r2, #0]
 80073f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073f6:	f043 0301 	orr.w	r3, r3, #1
 80073fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d005      	beq.n	8007410 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007404:	4b04      	ldr	r3, [pc, #16]	; (8007418 <HAL_PCD_SuspendCallback+0x48>)
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	4a03      	ldr	r2, [pc, #12]	; (8007418 <HAL_PCD_SuspendCallback+0x48>)
 800740a:	f043 0306 	orr.w	r3, r3, #6
 800740e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	e000ed00 	.word	0xe000ed00

0800741c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe fcdf 	bl	8005dee <USBD_LL_Resume>
}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800744a:	78fa      	ldrb	r2, [r7, #3]
 800744c:	4611      	mov	r1, r2
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe fd37 	bl	8005ec2 <USBD_LL_IsoOUTIncomplete>
}
 8007454:	bf00      	nop
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800746e:	78fa      	ldrb	r2, [r7, #3]
 8007470:	4611      	mov	r1, r2
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe fcf3 	bl	8005e5e <USBD_LL_IsoINIncomplete>
}
 8007478:	bf00      	nop
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe fd49 	bl	8005f26 <USBD_LL_DevConnected>
}
 8007494:	bf00      	nop
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fe fd46 	bl	8005f3c <USBD_LL_DevDisconnected>
}
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d13c      	bne.n	8007542 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80074c8:	4a20      	ldr	r2, [pc, #128]	; (800754c <USBD_LL_Init+0x94>)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a1e      	ldr	r2, [pc, #120]	; (800754c <USBD_LL_Init+0x94>)
 80074d4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074d8:	4b1c      	ldr	r3, [pc, #112]	; (800754c <USBD_LL_Init+0x94>)
 80074da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80074de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80074e0:	4b1a      	ldr	r3, [pc, #104]	; (800754c <USBD_LL_Init+0x94>)
 80074e2:	2204      	movs	r2, #4
 80074e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80074e6:	4b19      	ldr	r3, [pc, #100]	; (800754c <USBD_LL_Init+0x94>)
 80074e8:	2202      	movs	r2, #2
 80074ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074ec:	4b17      	ldr	r3, [pc, #92]	; (800754c <USBD_LL_Init+0x94>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074f2:	4b16      	ldr	r3, [pc, #88]	; (800754c <USBD_LL_Init+0x94>)
 80074f4:	2202      	movs	r2, #2
 80074f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074f8:	4b14      	ldr	r3, [pc, #80]	; (800754c <USBD_LL_Init+0x94>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80074fe:	4b13      	ldr	r3, [pc, #76]	; (800754c <USBD_LL_Init+0x94>)
 8007500:	2200      	movs	r2, #0
 8007502:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007504:	4b11      	ldr	r3, [pc, #68]	; (800754c <USBD_LL_Init+0x94>)
 8007506:	2200      	movs	r2, #0
 8007508:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800750a:	4b10      	ldr	r3, [pc, #64]	; (800754c <USBD_LL_Init+0x94>)
 800750c:	2200      	movs	r2, #0
 800750e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007510:	4b0e      	ldr	r3, [pc, #56]	; (800754c <USBD_LL_Init+0x94>)
 8007512:	2200      	movs	r2, #0
 8007514:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007516:	480d      	ldr	r0, [pc, #52]	; (800754c <USBD_LL_Init+0x94>)
 8007518:	f7fa f9a8 	bl	800186c <HAL_PCD_Init>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007522:	f7f9 f97b 	bl	800081c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007526:	2180      	movs	r1, #128	; 0x80
 8007528:	4808      	ldr	r0, [pc, #32]	; (800754c <USBD_LL_Init+0x94>)
 800752a:	f7fb fc00 	bl	8002d2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800752e:	2240      	movs	r2, #64	; 0x40
 8007530:	2100      	movs	r1, #0
 8007532:	4806      	ldr	r0, [pc, #24]	; (800754c <USBD_LL_Init+0x94>)
 8007534:	f7fb fbb4 	bl	8002ca0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007538:	2280      	movs	r2, #128	; 0x80
 800753a:	2101      	movs	r1, #1
 800753c:	4803      	ldr	r0, [pc, #12]	; (800754c <USBD_LL_Init+0x94>)
 800753e:	f7fb fbaf 	bl	8002ca0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20001708 	.word	0x20001708

08007550 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007566:	4618      	mov	r0, r3
 8007568:	f7fa fa9d 	bl	8001aa6 <HAL_PCD_Start>
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	4618      	mov	r0, r3
 8007574:	f000 f942 	bl	80077fc <USBD_Get_USB_Status>
 8007578:	4603      	mov	r3, r0
 800757a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800757c:	7bbb      	ldrb	r3, [r7, #14]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	4608      	mov	r0, r1
 8007590:	4611      	mov	r1, r2
 8007592:	461a      	mov	r2, r3
 8007594:	4603      	mov	r3, r0
 8007596:	70fb      	strb	r3, [r7, #3]
 8007598:	460b      	mov	r3, r1
 800759a:	70bb      	strb	r3, [r7, #2]
 800759c:	4613      	mov	r3, r2
 800759e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80075ae:	78bb      	ldrb	r3, [r7, #2]
 80075b0:	883a      	ldrh	r2, [r7, #0]
 80075b2:	78f9      	ldrb	r1, [r7, #3]
 80075b4:	f7fa ff6e 	bl	8002494 <HAL_PCD_EP_Open>
 80075b8:	4603      	mov	r3, r0
 80075ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 f91c 	bl	80077fc <USBD_Get_USB_Status>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b084      	sub	sp, #16
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	460b      	mov	r3, r1
 80075dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075ec:	78fa      	ldrb	r2, [r7, #3]
 80075ee:	4611      	mov	r1, r2
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fa ffb7 	bl	8002564 <HAL_PCD_EP_Close>
 80075f6:	4603      	mov	r3, r0
 80075f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 f8fd 	bl	80077fc <USBD_Get_USB_Status>
 8007602:	4603      	mov	r3, r0
 8007604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007606:	7bbb      	ldrb	r3, [r7, #14]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800762a:	78fa      	ldrb	r2, [r7, #3]
 800762c:	4611      	mov	r1, r2
 800762e:	4618      	mov	r0, r3
 8007630:	f7fb f88f 	bl	8002752 <HAL_PCD_EP_SetStall>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 f8de 	bl	80077fc <USBD_Get_USB_Status>
 8007640:	4603      	mov	r3, r0
 8007642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007644:	7bbb      	ldrb	r3, [r7, #14]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	460b      	mov	r3, r1
 8007658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007668:	78fa      	ldrb	r2, [r7, #3]
 800766a:	4611      	mov	r1, r2
 800766c:	4618      	mov	r0, r3
 800766e:	f7fb f8d4 	bl	800281a <HAL_PCD_EP_ClrStall>
 8007672:	4603      	mov	r3, r0
 8007674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	4618      	mov	r0, r3
 800767a:	f000 f8bf 	bl	80077fc <USBD_Get_USB_Status>
 800767e:	4603      	mov	r3, r0
 8007680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007682:	7bbb      	ldrb	r3, [r7, #14]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800769e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80076a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	da0b      	bge.n	80076c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80076a8:	78fb      	ldrb	r3, [r7, #3]
 80076aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ae:	68f9      	ldr	r1, [r7, #12]
 80076b0:	4613      	mov	r3, r2
 80076b2:	00db      	lsls	r3, r3, #3
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	333e      	adds	r3, #62	; 0x3e
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	e00b      	b.n	80076d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076c6:	68f9      	ldr	r1, [r7, #12]
 80076c8:	4613      	mov	r3, r2
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	440b      	add	r3, r1
 80076d2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80076d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076fe:	78fa      	ldrb	r2, [r7, #3]
 8007700:	4611      	mov	r1, r2
 8007702:	4618      	mov	r0, r3
 8007704:	f7fa fea1 	bl	800244a <HAL_PCD_SetAddress>
 8007708:	4603      	mov	r3, r0
 800770a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800770c:	7bfb      	ldrb	r3, [r7, #15]
 800770e:	4618      	mov	r0, r3
 8007710:	f000 f874 	bl	80077fc <USBD_Get_USB_Status>
 8007714:	4603      	mov	r3, r0
 8007716:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007718:	7bbb      	ldrb	r3, [r7, #14]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b086      	sub	sp, #24
 8007726:	af00      	add	r7, sp, #0
 8007728:	60f8      	str	r0, [r7, #12]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	603b      	str	r3, [r7, #0]
 800772e:	460b      	mov	r3, r1
 8007730:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007740:	7af9      	ldrb	r1, [r7, #11]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	f7fa ffba 	bl	80026be <HAL_PCD_EP_Transmit>
 800774a:	4603      	mov	r3, r0
 800774c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	4618      	mov	r0, r3
 8007752:	f000 f853 	bl	80077fc <USBD_Get_USB_Status>
 8007756:	4603      	mov	r3, r0
 8007758:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800775a:	7dbb      	ldrb	r3, [r7, #22]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3718      	adds	r7, #24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	607a      	str	r2, [r7, #4]
 800776e:	603b      	str	r3, [r7, #0]
 8007770:	460b      	mov	r3, r1
 8007772:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007782:	7af9      	ldrb	r1, [r7, #11]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	f7fa ff36 	bl	80025f8 <HAL_PCD_EP_Receive>
 800778c:	4603      	mov	r3, r0
 800778e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007790:	7dfb      	ldrb	r3, [r7, #23]
 8007792:	4618      	mov	r0, r3
 8007794:	f000 f832 	bl	80077fc <USBD_Get_USB_Status>
 8007798:	4603      	mov	r3, r0
 800779a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800779c:	7dbb      	ldrb	r3, [r7, #22]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b082      	sub	sp, #8
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	460b      	mov	r3, r1
 80077b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077b8:	78fa      	ldrb	r2, [r7, #3]
 80077ba:	4611      	mov	r1, r2
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fa ff66 	bl	800268e <HAL_PCD_EP_GetRxCount>
 80077c2:	4603      	mov	r3, r0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80077d4:	4b03      	ldr	r3, [pc, #12]	; (80077e4 <USBD_static_malloc+0x18>)
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	20001c14 	.word	0x20001c14

080077e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]

}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	4603      	mov	r3, r0
 8007804:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800780a:	79fb      	ldrb	r3, [r7, #7]
 800780c:	2b03      	cmp	r3, #3
 800780e:	d817      	bhi.n	8007840 <USBD_Get_USB_Status+0x44>
 8007810:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <USBD_Get_USB_Status+0x1c>)
 8007812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007816:	bf00      	nop
 8007818:	08007829 	.word	0x08007829
 800781c:	0800782f 	.word	0x0800782f
 8007820:	08007835 	.word	0x08007835
 8007824:	0800783b 	.word	0x0800783b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	73fb      	strb	r3, [r7, #15]
    break;
 800782c:	e00b      	b.n	8007846 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800782e:	2303      	movs	r3, #3
 8007830:	73fb      	strb	r3, [r7, #15]
    break;
 8007832:	e008      	b.n	8007846 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007834:	2301      	movs	r3, #1
 8007836:	73fb      	strb	r3, [r7, #15]
    break;
 8007838:	e005      	b.n	8007846 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800783a:	2303      	movs	r3, #3
 800783c:	73fb      	strb	r3, [r7, #15]
    break;
 800783e:	e002      	b.n	8007846 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007840:	2303      	movs	r3, #3
 8007842:	73fb      	strb	r3, [r7, #15]
    break;
 8007844:	bf00      	nop
  }
  return usb_status;
 8007846:	7bfb      	ldrb	r3, [r7, #15]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <__errno>:
 8007854:	4b01      	ldr	r3, [pc, #4]	; (800785c <__errno+0x8>)
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	20000110 	.word	0x20000110

08007860 <__libc_init_array>:
 8007860:	b570      	push	{r4, r5, r6, lr}
 8007862:	4d0d      	ldr	r5, [pc, #52]	; (8007898 <__libc_init_array+0x38>)
 8007864:	4c0d      	ldr	r4, [pc, #52]	; (800789c <__libc_init_array+0x3c>)
 8007866:	1b64      	subs	r4, r4, r5
 8007868:	10a4      	asrs	r4, r4, #2
 800786a:	2600      	movs	r6, #0
 800786c:	42a6      	cmp	r6, r4
 800786e:	d109      	bne.n	8007884 <__libc_init_array+0x24>
 8007870:	4d0b      	ldr	r5, [pc, #44]	; (80078a0 <__libc_init_array+0x40>)
 8007872:	4c0c      	ldr	r4, [pc, #48]	; (80078a4 <__libc_init_array+0x44>)
 8007874:	f000 fc8e 	bl	8008194 <_init>
 8007878:	1b64      	subs	r4, r4, r5
 800787a:	10a4      	asrs	r4, r4, #2
 800787c:	2600      	movs	r6, #0
 800787e:	42a6      	cmp	r6, r4
 8007880:	d105      	bne.n	800788e <__libc_init_array+0x2e>
 8007882:	bd70      	pop	{r4, r5, r6, pc}
 8007884:	f855 3b04 	ldr.w	r3, [r5], #4
 8007888:	4798      	blx	r3
 800788a:	3601      	adds	r6, #1
 800788c:	e7ee      	b.n	800786c <__libc_init_array+0xc>
 800788e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007892:	4798      	blx	r3
 8007894:	3601      	adds	r6, #1
 8007896:	e7f2      	b.n	800787e <__libc_init_array+0x1e>
 8007898:	08008244 	.word	0x08008244
 800789c:	08008244 	.word	0x08008244
 80078a0:	08008244 	.word	0x08008244
 80078a4:	08008248 	.word	0x08008248

080078a8 <memcpy>:
 80078a8:	440a      	add	r2, r1
 80078aa:	4291      	cmp	r1, r2
 80078ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80078b0:	d100      	bne.n	80078b4 <memcpy+0xc>
 80078b2:	4770      	bx	lr
 80078b4:	b510      	push	{r4, lr}
 80078b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078be:	4291      	cmp	r1, r2
 80078c0:	d1f9      	bne.n	80078b6 <memcpy+0xe>
 80078c2:	bd10      	pop	{r4, pc}

080078c4 <memset>:
 80078c4:	4402      	add	r2, r0
 80078c6:	4603      	mov	r3, r0
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d100      	bne.n	80078ce <memset+0xa>
 80078cc:	4770      	bx	lr
 80078ce:	f803 1b01 	strb.w	r1, [r3], #1
 80078d2:	e7f9      	b.n	80078c8 <memset+0x4>

080078d4 <siprintf>:
 80078d4:	b40e      	push	{r1, r2, r3}
 80078d6:	b500      	push	{lr}
 80078d8:	b09c      	sub	sp, #112	; 0x70
 80078da:	ab1d      	add	r3, sp, #116	; 0x74
 80078dc:	9002      	str	r0, [sp, #8]
 80078de:	9006      	str	r0, [sp, #24]
 80078e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078e4:	4809      	ldr	r0, [pc, #36]	; (800790c <siprintf+0x38>)
 80078e6:	9107      	str	r1, [sp, #28]
 80078e8:	9104      	str	r1, [sp, #16]
 80078ea:	4909      	ldr	r1, [pc, #36]	; (8007910 <siprintf+0x3c>)
 80078ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80078f0:	9105      	str	r1, [sp, #20]
 80078f2:	6800      	ldr	r0, [r0, #0]
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	a902      	add	r1, sp, #8
 80078f8:	f000 f868 	bl	80079cc <_svfiprintf_r>
 80078fc:	9b02      	ldr	r3, [sp, #8]
 80078fe:	2200      	movs	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	b01c      	add	sp, #112	; 0x70
 8007904:	f85d eb04 	ldr.w	lr, [sp], #4
 8007908:	b003      	add	sp, #12
 800790a:	4770      	bx	lr
 800790c:	20000110 	.word	0x20000110
 8007910:	ffff0208 	.word	0xffff0208

08007914 <__ssputs_r>:
 8007914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007918:	688e      	ldr	r6, [r1, #8]
 800791a:	429e      	cmp	r6, r3
 800791c:	4682      	mov	sl, r0
 800791e:	460c      	mov	r4, r1
 8007920:	4690      	mov	r8, r2
 8007922:	461f      	mov	r7, r3
 8007924:	d838      	bhi.n	8007998 <__ssputs_r+0x84>
 8007926:	898a      	ldrh	r2, [r1, #12]
 8007928:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800792c:	d032      	beq.n	8007994 <__ssputs_r+0x80>
 800792e:	6825      	ldr	r5, [r4, #0]
 8007930:	6909      	ldr	r1, [r1, #16]
 8007932:	eba5 0901 	sub.w	r9, r5, r1
 8007936:	6965      	ldr	r5, [r4, #20]
 8007938:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800793c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007940:	3301      	adds	r3, #1
 8007942:	444b      	add	r3, r9
 8007944:	106d      	asrs	r5, r5, #1
 8007946:	429d      	cmp	r5, r3
 8007948:	bf38      	it	cc
 800794a:	461d      	movcc	r5, r3
 800794c:	0553      	lsls	r3, r2, #21
 800794e:	d531      	bpl.n	80079b4 <__ssputs_r+0xa0>
 8007950:	4629      	mov	r1, r5
 8007952:	f000 fb55 	bl	8008000 <_malloc_r>
 8007956:	4606      	mov	r6, r0
 8007958:	b950      	cbnz	r0, 8007970 <__ssputs_r+0x5c>
 800795a:	230c      	movs	r3, #12
 800795c:	f8ca 3000 	str.w	r3, [sl]
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007966:	81a3      	strh	r3, [r4, #12]
 8007968:	f04f 30ff 	mov.w	r0, #4294967295
 800796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007970:	6921      	ldr	r1, [r4, #16]
 8007972:	464a      	mov	r2, r9
 8007974:	f7ff ff98 	bl	80078a8 <memcpy>
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800797e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007982:	81a3      	strh	r3, [r4, #12]
 8007984:	6126      	str	r6, [r4, #16]
 8007986:	6165      	str	r5, [r4, #20]
 8007988:	444e      	add	r6, r9
 800798a:	eba5 0509 	sub.w	r5, r5, r9
 800798e:	6026      	str	r6, [r4, #0]
 8007990:	60a5      	str	r5, [r4, #8]
 8007992:	463e      	mov	r6, r7
 8007994:	42be      	cmp	r6, r7
 8007996:	d900      	bls.n	800799a <__ssputs_r+0x86>
 8007998:	463e      	mov	r6, r7
 800799a:	6820      	ldr	r0, [r4, #0]
 800799c:	4632      	mov	r2, r6
 800799e:	4641      	mov	r1, r8
 80079a0:	f000 faa8 	bl	8007ef4 <memmove>
 80079a4:	68a3      	ldr	r3, [r4, #8]
 80079a6:	1b9b      	subs	r3, r3, r6
 80079a8:	60a3      	str	r3, [r4, #8]
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	4433      	add	r3, r6
 80079ae:	6023      	str	r3, [r4, #0]
 80079b0:	2000      	movs	r0, #0
 80079b2:	e7db      	b.n	800796c <__ssputs_r+0x58>
 80079b4:	462a      	mov	r2, r5
 80079b6:	f000 fb97 	bl	80080e8 <_realloc_r>
 80079ba:	4606      	mov	r6, r0
 80079bc:	2800      	cmp	r0, #0
 80079be:	d1e1      	bne.n	8007984 <__ssputs_r+0x70>
 80079c0:	6921      	ldr	r1, [r4, #16]
 80079c2:	4650      	mov	r0, sl
 80079c4:	f000 fab0 	bl	8007f28 <_free_r>
 80079c8:	e7c7      	b.n	800795a <__ssputs_r+0x46>
	...

080079cc <_svfiprintf_r>:
 80079cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d0:	4698      	mov	r8, r3
 80079d2:	898b      	ldrh	r3, [r1, #12]
 80079d4:	061b      	lsls	r3, r3, #24
 80079d6:	b09d      	sub	sp, #116	; 0x74
 80079d8:	4607      	mov	r7, r0
 80079da:	460d      	mov	r5, r1
 80079dc:	4614      	mov	r4, r2
 80079de:	d50e      	bpl.n	80079fe <_svfiprintf_r+0x32>
 80079e0:	690b      	ldr	r3, [r1, #16]
 80079e2:	b963      	cbnz	r3, 80079fe <_svfiprintf_r+0x32>
 80079e4:	2140      	movs	r1, #64	; 0x40
 80079e6:	f000 fb0b 	bl	8008000 <_malloc_r>
 80079ea:	6028      	str	r0, [r5, #0]
 80079ec:	6128      	str	r0, [r5, #16]
 80079ee:	b920      	cbnz	r0, 80079fa <_svfiprintf_r+0x2e>
 80079f0:	230c      	movs	r3, #12
 80079f2:	603b      	str	r3, [r7, #0]
 80079f4:	f04f 30ff 	mov.w	r0, #4294967295
 80079f8:	e0d1      	b.n	8007b9e <_svfiprintf_r+0x1d2>
 80079fa:	2340      	movs	r3, #64	; 0x40
 80079fc:	616b      	str	r3, [r5, #20]
 80079fe:	2300      	movs	r3, #0
 8007a00:	9309      	str	r3, [sp, #36]	; 0x24
 8007a02:	2320      	movs	r3, #32
 8007a04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a08:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a0c:	2330      	movs	r3, #48	; 0x30
 8007a0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007bb8 <_svfiprintf_r+0x1ec>
 8007a12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a16:	f04f 0901 	mov.w	r9, #1
 8007a1a:	4623      	mov	r3, r4
 8007a1c:	469a      	mov	sl, r3
 8007a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a22:	b10a      	cbz	r2, 8007a28 <_svfiprintf_r+0x5c>
 8007a24:	2a25      	cmp	r2, #37	; 0x25
 8007a26:	d1f9      	bne.n	8007a1c <_svfiprintf_r+0x50>
 8007a28:	ebba 0b04 	subs.w	fp, sl, r4
 8007a2c:	d00b      	beq.n	8007a46 <_svfiprintf_r+0x7a>
 8007a2e:	465b      	mov	r3, fp
 8007a30:	4622      	mov	r2, r4
 8007a32:	4629      	mov	r1, r5
 8007a34:	4638      	mov	r0, r7
 8007a36:	f7ff ff6d 	bl	8007914 <__ssputs_r>
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	f000 80aa 	beq.w	8007b94 <_svfiprintf_r+0x1c8>
 8007a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a42:	445a      	add	r2, fp
 8007a44:	9209      	str	r2, [sp, #36]	; 0x24
 8007a46:	f89a 3000 	ldrb.w	r3, [sl]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 80a2 	beq.w	8007b94 <_svfiprintf_r+0x1c8>
 8007a50:	2300      	movs	r3, #0
 8007a52:	f04f 32ff 	mov.w	r2, #4294967295
 8007a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a5a:	f10a 0a01 	add.w	sl, sl, #1
 8007a5e:	9304      	str	r3, [sp, #16]
 8007a60:	9307      	str	r3, [sp, #28]
 8007a62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a66:	931a      	str	r3, [sp, #104]	; 0x68
 8007a68:	4654      	mov	r4, sl
 8007a6a:	2205      	movs	r2, #5
 8007a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a70:	4851      	ldr	r0, [pc, #324]	; (8007bb8 <_svfiprintf_r+0x1ec>)
 8007a72:	f7f8 fbb5 	bl	80001e0 <memchr>
 8007a76:	9a04      	ldr	r2, [sp, #16]
 8007a78:	b9d8      	cbnz	r0, 8007ab2 <_svfiprintf_r+0xe6>
 8007a7a:	06d0      	lsls	r0, r2, #27
 8007a7c:	bf44      	itt	mi
 8007a7e:	2320      	movmi	r3, #32
 8007a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a84:	0711      	lsls	r1, r2, #28
 8007a86:	bf44      	itt	mi
 8007a88:	232b      	movmi	r3, #43	; 0x2b
 8007a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a92:	2b2a      	cmp	r3, #42	; 0x2a
 8007a94:	d015      	beq.n	8007ac2 <_svfiprintf_r+0xf6>
 8007a96:	9a07      	ldr	r2, [sp, #28]
 8007a98:	4654      	mov	r4, sl
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	f04f 0c0a 	mov.w	ip, #10
 8007aa0:	4621      	mov	r1, r4
 8007aa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aa6:	3b30      	subs	r3, #48	; 0x30
 8007aa8:	2b09      	cmp	r3, #9
 8007aaa:	d94e      	bls.n	8007b4a <_svfiprintf_r+0x17e>
 8007aac:	b1b0      	cbz	r0, 8007adc <_svfiprintf_r+0x110>
 8007aae:	9207      	str	r2, [sp, #28]
 8007ab0:	e014      	b.n	8007adc <_svfiprintf_r+0x110>
 8007ab2:	eba0 0308 	sub.w	r3, r0, r8
 8007ab6:	fa09 f303 	lsl.w	r3, r9, r3
 8007aba:	4313      	orrs	r3, r2
 8007abc:	9304      	str	r3, [sp, #16]
 8007abe:	46a2      	mov	sl, r4
 8007ac0:	e7d2      	b.n	8007a68 <_svfiprintf_r+0x9c>
 8007ac2:	9b03      	ldr	r3, [sp, #12]
 8007ac4:	1d19      	adds	r1, r3, #4
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	9103      	str	r1, [sp, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	bfbb      	ittet	lt
 8007ace:	425b      	neglt	r3, r3
 8007ad0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ad4:	9307      	strge	r3, [sp, #28]
 8007ad6:	9307      	strlt	r3, [sp, #28]
 8007ad8:	bfb8      	it	lt
 8007ada:	9204      	strlt	r2, [sp, #16]
 8007adc:	7823      	ldrb	r3, [r4, #0]
 8007ade:	2b2e      	cmp	r3, #46	; 0x2e
 8007ae0:	d10c      	bne.n	8007afc <_svfiprintf_r+0x130>
 8007ae2:	7863      	ldrb	r3, [r4, #1]
 8007ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ae6:	d135      	bne.n	8007b54 <_svfiprintf_r+0x188>
 8007ae8:	9b03      	ldr	r3, [sp, #12]
 8007aea:	1d1a      	adds	r2, r3, #4
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	9203      	str	r2, [sp, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	bfb8      	it	lt
 8007af4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007af8:	3402      	adds	r4, #2
 8007afa:	9305      	str	r3, [sp, #20]
 8007afc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007bc8 <_svfiprintf_r+0x1fc>
 8007b00:	7821      	ldrb	r1, [r4, #0]
 8007b02:	2203      	movs	r2, #3
 8007b04:	4650      	mov	r0, sl
 8007b06:	f7f8 fb6b 	bl	80001e0 <memchr>
 8007b0a:	b140      	cbz	r0, 8007b1e <_svfiprintf_r+0x152>
 8007b0c:	2340      	movs	r3, #64	; 0x40
 8007b0e:	eba0 000a 	sub.w	r0, r0, sl
 8007b12:	fa03 f000 	lsl.w	r0, r3, r0
 8007b16:	9b04      	ldr	r3, [sp, #16]
 8007b18:	4303      	orrs	r3, r0
 8007b1a:	3401      	adds	r4, #1
 8007b1c:	9304      	str	r3, [sp, #16]
 8007b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b22:	4826      	ldr	r0, [pc, #152]	; (8007bbc <_svfiprintf_r+0x1f0>)
 8007b24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b28:	2206      	movs	r2, #6
 8007b2a:	f7f8 fb59 	bl	80001e0 <memchr>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d038      	beq.n	8007ba4 <_svfiprintf_r+0x1d8>
 8007b32:	4b23      	ldr	r3, [pc, #140]	; (8007bc0 <_svfiprintf_r+0x1f4>)
 8007b34:	bb1b      	cbnz	r3, 8007b7e <_svfiprintf_r+0x1b2>
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	3307      	adds	r3, #7
 8007b3a:	f023 0307 	bic.w	r3, r3, #7
 8007b3e:	3308      	adds	r3, #8
 8007b40:	9303      	str	r3, [sp, #12]
 8007b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b44:	4433      	add	r3, r6
 8007b46:	9309      	str	r3, [sp, #36]	; 0x24
 8007b48:	e767      	b.n	8007a1a <_svfiprintf_r+0x4e>
 8007b4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b4e:	460c      	mov	r4, r1
 8007b50:	2001      	movs	r0, #1
 8007b52:	e7a5      	b.n	8007aa0 <_svfiprintf_r+0xd4>
 8007b54:	2300      	movs	r3, #0
 8007b56:	3401      	adds	r4, #1
 8007b58:	9305      	str	r3, [sp, #20]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	f04f 0c0a 	mov.w	ip, #10
 8007b60:	4620      	mov	r0, r4
 8007b62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b66:	3a30      	subs	r2, #48	; 0x30
 8007b68:	2a09      	cmp	r2, #9
 8007b6a:	d903      	bls.n	8007b74 <_svfiprintf_r+0x1a8>
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0c5      	beq.n	8007afc <_svfiprintf_r+0x130>
 8007b70:	9105      	str	r1, [sp, #20]
 8007b72:	e7c3      	b.n	8007afc <_svfiprintf_r+0x130>
 8007b74:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b78:	4604      	mov	r4, r0
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e7f0      	b.n	8007b60 <_svfiprintf_r+0x194>
 8007b7e:	ab03      	add	r3, sp, #12
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	462a      	mov	r2, r5
 8007b84:	4b0f      	ldr	r3, [pc, #60]	; (8007bc4 <_svfiprintf_r+0x1f8>)
 8007b86:	a904      	add	r1, sp, #16
 8007b88:	4638      	mov	r0, r7
 8007b8a:	f3af 8000 	nop.w
 8007b8e:	1c42      	adds	r2, r0, #1
 8007b90:	4606      	mov	r6, r0
 8007b92:	d1d6      	bne.n	8007b42 <_svfiprintf_r+0x176>
 8007b94:	89ab      	ldrh	r3, [r5, #12]
 8007b96:	065b      	lsls	r3, r3, #25
 8007b98:	f53f af2c 	bmi.w	80079f4 <_svfiprintf_r+0x28>
 8007b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b9e:	b01d      	add	sp, #116	; 0x74
 8007ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba4:	ab03      	add	r3, sp, #12
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	462a      	mov	r2, r5
 8007baa:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <_svfiprintf_r+0x1f8>)
 8007bac:	a904      	add	r1, sp, #16
 8007bae:	4638      	mov	r0, r7
 8007bb0:	f000 f87a 	bl	8007ca8 <_printf_i>
 8007bb4:	e7eb      	b.n	8007b8e <_svfiprintf_r+0x1c2>
 8007bb6:	bf00      	nop
 8007bb8:	08008208 	.word	0x08008208
 8007bbc:	08008212 	.word	0x08008212
 8007bc0:	00000000 	.word	0x00000000
 8007bc4:	08007915 	.word	0x08007915
 8007bc8:	0800820e 	.word	0x0800820e

08007bcc <_printf_common>:
 8007bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd0:	4616      	mov	r6, r2
 8007bd2:	4699      	mov	r9, r3
 8007bd4:	688a      	ldr	r2, [r1, #8]
 8007bd6:	690b      	ldr	r3, [r1, #16]
 8007bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	bfb8      	it	lt
 8007be0:	4613      	movlt	r3, r2
 8007be2:	6033      	str	r3, [r6, #0]
 8007be4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007be8:	4607      	mov	r7, r0
 8007bea:	460c      	mov	r4, r1
 8007bec:	b10a      	cbz	r2, 8007bf2 <_printf_common+0x26>
 8007bee:	3301      	adds	r3, #1
 8007bf0:	6033      	str	r3, [r6, #0]
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	0699      	lsls	r1, r3, #26
 8007bf6:	bf42      	ittt	mi
 8007bf8:	6833      	ldrmi	r3, [r6, #0]
 8007bfa:	3302      	addmi	r3, #2
 8007bfc:	6033      	strmi	r3, [r6, #0]
 8007bfe:	6825      	ldr	r5, [r4, #0]
 8007c00:	f015 0506 	ands.w	r5, r5, #6
 8007c04:	d106      	bne.n	8007c14 <_printf_common+0x48>
 8007c06:	f104 0a19 	add.w	sl, r4, #25
 8007c0a:	68e3      	ldr	r3, [r4, #12]
 8007c0c:	6832      	ldr	r2, [r6, #0]
 8007c0e:	1a9b      	subs	r3, r3, r2
 8007c10:	42ab      	cmp	r3, r5
 8007c12:	dc26      	bgt.n	8007c62 <_printf_common+0x96>
 8007c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c18:	1e13      	subs	r3, r2, #0
 8007c1a:	6822      	ldr	r2, [r4, #0]
 8007c1c:	bf18      	it	ne
 8007c1e:	2301      	movne	r3, #1
 8007c20:	0692      	lsls	r2, r2, #26
 8007c22:	d42b      	bmi.n	8007c7c <_printf_common+0xb0>
 8007c24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c28:	4649      	mov	r1, r9
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	47c0      	blx	r8
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d01e      	beq.n	8007c70 <_printf_common+0xa4>
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	68e5      	ldr	r5, [r4, #12]
 8007c36:	6832      	ldr	r2, [r6, #0]
 8007c38:	f003 0306 	and.w	r3, r3, #6
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	bf08      	it	eq
 8007c40:	1aad      	subeq	r5, r5, r2
 8007c42:	68a3      	ldr	r3, [r4, #8]
 8007c44:	6922      	ldr	r2, [r4, #16]
 8007c46:	bf0c      	ite	eq
 8007c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c4c:	2500      	movne	r5, #0
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	bfc4      	itt	gt
 8007c52:	1a9b      	subgt	r3, r3, r2
 8007c54:	18ed      	addgt	r5, r5, r3
 8007c56:	2600      	movs	r6, #0
 8007c58:	341a      	adds	r4, #26
 8007c5a:	42b5      	cmp	r5, r6
 8007c5c:	d11a      	bne.n	8007c94 <_printf_common+0xc8>
 8007c5e:	2000      	movs	r0, #0
 8007c60:	e008      	b.n	8007c74 <_printf_common+0xa8>
 8007c62:	2301      	movs	r3, #1
 8007c64:	4652      	mov	r2, sl
 8007c66:	4649      	mov	r1, r9
 8007c68:	4638      	mov	r0, r7
 8007c6a:	47c0      	blx	r8
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d103      	bne.n	8007c78 <_printf_common+0xac>
 8007c70:	f04f 30ff 	mov.w	r0, #4294967295
 8007c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c78:	3501      	adds	r5, #1
 8007c7a:	e7c6      	b.n	8007c0a <_printf_common+0x3e>
 8007c7c:	18e1      	adds	r1, r4, r3
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	2030      	movs	r0, #48	; 0x30
 8007c82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c86:	4422      	add	r2, r4
 8007c88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c90:	3302      	adds	r3, #2
 8007c92:	e7c7      	b.n	8007c24 <_printf_common+0x58>
 8007c94:	2301      	movs	r3, #1
 8007c96:	4622      	mov	r2, r4
 8007c98:	4649      	mov	r1, r9
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	47c0      	blx	r8
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	d0e6      	beq.n	8007c70 <_printf_common+0xa4>
 8007ca2:	3601      	adds	r6, #1
 8007ca4:	e7d9      	b.n	8007c5a <_printf_common+0x8e>
	...

08007ca8 <_printf_i>:
 8007ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cac:	7e0f      	ldrb	r7, [r1, #24]
 8007cae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cb0:	2f78      	cmp	r7, #120	; 0x78
 8007cb2:	4691      	mov	r9, r2
 8007cb4:	4680      	mov	r8, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	469a      	mov	sl, r3
 8007cba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cbe:	d807      	bhi.n	8007cd0 <_printf_i+0x28>
 8007cc0:	2f62      	cmp	r7, #98	; 0x62
 8007cc2:	d80a      	bhi.n	8007cda <_printf_i+0x32>
 8007cc4:	2f00      	cmp	r7, #0
 8007cc6:	f000 80d8 	beq.w	8007e7a <_printf_i+0x1d2>
 8007cca:	2f58      	cmp	r7, #88	; 0x58
 8007ccc:	f000 80a3 	beq.w	8007e16 <_printf_i+0x16e>
 8007cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cd8:	e03a      	b.n	8007d50 <_printf_i+0xa8>
 8007cda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cde:	2b15      	cmp	r3, #21
 8007ce0:	d8f6      	bhi.n	8007cd0 <_printf_i+0x28>
 8007ce2:	a101      	add	r1, pc, #4	; (adr r1, 8007ce8 <_printf_i+0x40>)
 8007ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ce8:	08007d41 	.word	0x08007d41
 8007cec:	08007d55 	.word	0x08007d55
 8007cf0:	08007cd1 	.word	0x08007cd1
 8007cf4:	08007cd1 	.word	0x08007cd1
 8007cf8:	08007cd1 	.word	0x08007cd1
 8007cfc:	08007cd1 	.word	0x08007cd1
 8007d00:	08007d55 	.word	0x08007d55
 8007d04:	08007cd1 	.word	0x08007cd1
 8007d08:	08007cd1 	.word	0x08007cd1
 8007d0c:	08007cd1 	.word	0x08007cd1
 8007d10:	08007cd1 	.word	0x08007cd1
 8007d14:	08007e61 	.word	0x08007e61
 8007d18:	08007d85 	.word	0x08007d85
 8007d1c:	08007e43 	.word	0x08007e43
 8007d20:	08007cd1 	.word	0x08007cd1
 8007d24:	08007cd1 	.word	0x08007cd1
 8007d28:	08007e83 	.word	0x08007e83
 8007d2c:	08007cd1 	.word	0x08007cd1
 8007d30:	08007d85 	.word	0x08007d85
 8007d34:	08007cd1 	.word	0x08007cd1
 8007d38:	08007cd1 	.word	0x08007cd1
 8007d3c:	08007e4b 	.word	0x08007e4b
 8007d40:	682b      	ldr	r3, [r5, #0]
 8007d42:	1d1a      	adds	r2, r3, #4
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	602a      	str	r2, [r5, #0]
 8007d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d50:	2301      	movs	r3, #1
 8007d52:	e0a3      	b.n	8007e9c <_printf_i+0x1f4>
 8007d54:	6820      	ldr	r0, [r4, #0]
 8007d56:	6829      	ldr	r1, [r5, #0]
 8007d58:	0606      	lsls	r6, r0, #24
 8007d5a:	f101 0304 	add.w	r3, r1, #4
 8007d5e:	d50a      	bpl.n	8007d76 <_printf_i+0xce>
 8007d60:	680e      	ldr	r6, [r1, #0]
 8007d62:	602b      	str	r3, [r5, #0]
 8007d64:	2e00      	cmp	r6, #0
 8007d66:	da03      	bge.n	8007d70 <_printf_i+0xc8>
 8007d68:	232d      	movs	r3, #45	; 0x2d
 8007d6a:	4276      	negs	r6, r6
 8007d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d70:	485e      	ldr	r0, [pc, #376]	; (8007eec <_printf_i+0x244>)
 8007d72:	230a      	movs	r3, #10
 8007d74:	e019      	b.n	8007daa <_printf_i+0x102>
 8007d76:	680e      	ldr	r6, [r1, #0]
 8007d78:	602b      	str	r3, [r5, #0]
 8007d7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d7e:	bf18      	it	ne
 8007d80:	b236      	sxthne	r6, r6
 8007d82:	e7ef      	b.n	8007d64 <_printf_i+0xbc>
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	6820      	ldr	r0, [r4, #0]
 8007d88:	1d19      	adds	r1, r3, #4
 8007d8a:	6029      	str	r1, [r5, #0]
 8007d8c:	0601      	lsls	r1, r0, #24
 8007d8e:	d501      	bpl.n	8007d94 <_printf_i+0xec>
 8007d90:	681e      	ldr	r6, [r3, #0]
 8007d92:	e002      	b.n	8007d9a <_printf_i+0xf2>
 8007d94:	0646      	lsls	r6, r0, #25
 8007d96:	d5fb      	bpl.n	8007d90 <_printf_i+0xe8>
 8007d98:	881e      	ldrh	r6, [r3, #0]
 8007d9a:	4854      	ldr	r0, [pc, #336]	; (8007eec <_printf_i+0x244>)
 8007d9c:	2f6f      	cmp	r7, #111	; 0x6f
 8007d9e:	bf0c      	ite	eq
 8007da0:	2308      	moveq	r3, #8
 8007da2:	230a      	movne	r3, #10
 8007da4:	2100      	movs	r1, #0
 8007da6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007daa:	6865      	ldr	r5, [r4, #4]
 8007dac:	60a5      	str	r5, [r4, #8]
 8007dae:	2d00      	cmp	r5, #0
 8007db0:	bfa2      	ittt	ge
 8007db2:	6821      	ldrge	r1, [r4, #0]
 8007db4:	f021 0104 	bicge.w	r1, r1, #4
 8007db8:	6021      	strge	r1, [r4, #0]
 8007dba:	b90e      	cbnz	r6, 8007dc0 <_printf_i+0x118>
 8007dbc:	2d00      	cmp	r5, #0
 8007dbe:	d04d      	beq.n	8007e5c <_printf_i+0x1b4>
 8007dc0:	4615      	mov	r5, r2
 8007dc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dc6:	fb03 6711 	mls	r7, r3, r1, r6
 8007dca:	5dc7      	ldrb	r7, [r0, r7]
 8007dcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007dd0:	4637      	mov	r7, r6
 8007dd2:	42bb      	cmp	r3, r7
 8007dd4:	460e      	mov	r6, r1
 8007dd6:	d9f4      	bls.n	8007dc2 <_printf_i+0x11a>
 8007dd8:	2b08      	cmp	r3, #8
 8007dda:	d10b      	bne.n	8007df4 <_printf_i+0x14c>
 8007ddc:	6823      	ldr	r3, [r4, #0]
 8007dde:	07de      	lsls	r6, r3, #31
 8007de0:	d508      	bpl.n	8007df4 <_printf_i+0x14c>
 8007de2:	6923      	ldr	r3, [r4, #16]
 8007de4:	6861      	ldr	r1, [r4, #4]
 8007de6:	4299      	cmp	r1, r3
 8007de8:	bfde      	ittt	le
 8007dea:	2330      	movle	r3, #48	; 0x30
 8007dec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007df0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007df4:	1b52      	subs	r2, r2, r5
 8007df6:	6122      	str	r2, [r4, #16]
 8007df8:	f8cd a000 	str.w	sl, [sp]
 8007dfc:	464b      	mov	r3, r9
 8007dfe:	aa03      	add	r2, sp, #12
 8007e00:	4621      	mov	r1, r4
 8007e02:	4640      	mov	r0, r8
 8007e04:	f7ff fee2 	bl	8007bcc <_printf_common>
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d14c      	bne.n	8007ea6 <_printf_i+0x1fe>
 8007e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e10:	b004      	add	sp, #16
 8007e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e16:	4835      	ldr	r0, [pc, #212]	; (8007eec <_printf_i+0x244>)
 8007e18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e1c:	6829      	ldr	r1, [r5, #0]
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e24:	6029      	str	r1, [r5, #0]
 8007e26:	061d      	lsls	r5, r3, #24
 8007e28:	d514      	bpl.n	8007e54 <_printf_i+0x1ac>
 8007e2a:	07df      	lsls	r7, r3, #31
 8007e2c:	bf44      	itt	mi
 8007e2e:	f043 0320 	orrmi.w	r3, r3, #32
 8007e32:	6023      	strmi	r3, [r4, #0]
 8007e34:	b91e      	cbnz	r6, 8007e3e <_printf_i+0x196>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	f023 0320 	bic.w	r3, r3, #32
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	2310      	movs	r3, #16
 8007e40:	e7b0      	b.n	8007da4 <_printf_i+0xfc>
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	f043 0320 	orr.w	r3, r3, #32
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	2378      	movs	r3, #120	; 0x78
 8007e4c:	4828      	ldr	r0, [pc, #160]	; (8007ef0 <_printf_i+0x248>)
 8007e4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e52:	e7e3      	b.n	8007e1c <_printf_i+0x174>
 8007e54:	0659      	lsls	r1, r3, #25
 8007e56:	bf48      	it	mi
 8007e58:	b2b6      	uxthmi	r6, r6
 8007e5a:	e7e6      	b.n	8007e2a <_printf_i+0x182>
 8007e5c:	4615      	mov	r5, r2
 8007e5e:	e7bb      	b.n	8007dd8 <_printf_i+0x130>
 8007e60:	682b      	ldr	r3, [r5, #0]
 8007e62:	6826      	ldr	r6, [r4, #0]
 8007e64:	6961      	ldr	r1, [r4, #20]
 8007e66:	1d18      	adds	r0, r3, #4
 8007e68:	6028      	str	r0, [r5, #0]
 8007e6a:	0635      	lsls	r5, r6, #24
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	d501      	bpl.n	8007e74 <_printf_i+0x1cc>
 8007e70:	6019      	str	r1, [r3, #0]
 8007e72:	e002      	b.n	8007e7a <_printf_i+0x1d2>
 8007e74:	0670      	lsls	r0, r6, #25
 8007e76:	d5fb      	bpl.n	8007e70 <_printf_i+0x1c8>
 8007e78:	8019      	strh	r1, [r3, #0]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	6123      	str	r3, [r4, #16]
 8007e7e:	4615      	mov	r5, r2
 8007e80:	e7ba      	b.n	8007df8 <_printf_i+0x150>
 8007e82:	682b      	ldr	r3, [r5, #0]
 8007e84:	1d1a      	adds	r2, r3, #4
 8007e86:	602a      	str	r2, [r5, #0]
 8007e88:	681d      	ldr	r5, [r3, #0]
 8007e8a:	6862      	ldr	r2, [r4, #4]
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	4628      	mov	r0, r5
 8007e90:	f7f8 f9a6 	bl	80001e0 <memchr>
 8007e94:	b108      	cbz	r0, 8007e9a <_printf_i+0x1f2>
 8007e96:	1b40      	subs	r0, r0, r5
 8007e98:	6060      	str	r0, [r4, #4]
 8007e9a:	6863      	ldr	r3, [r4, #4]
 8007e9c:	6123      	str	r3, [r4, #16]
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ea4:	e7a8      	b.n	8007df8 <_printf_i+0x150>
 8007ea6:	6923      	ldr	r3, [r4, #16]
 8007ea8:	462a      	mov	r2, r5
 8007eaa:	4649      	mov	r1, r9
 8007eac:	4640      	mov	r0, r8
 8007eae:	47d0      	blx	sl
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	d0ab      	beq.n	8007e0c <_printf_i+0x164>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	079b      	lsls	r3, r3, #30
 8007eb8:	d413      	bmi.n	8007ee2 <_printf_i+0x23a>
 8007eba:	68e0      	ldr	r0, [r4, #12]
 8007ebc:	9b03      	ldr	r3, [sp, #12]
 8007ebe:	4298      	cmp	r0, r3
 8007ec0:	bfb8      	it	lt
 8007ec2:	4618      	movlt	r0, r3
 8007ec4:	e7a4      	b.n	8007e10 <_printf_i+0x168>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	4632      	mov	r2, r6
 8007eca:	4649      	mov	r1, r9
 8007ecc:	4640      	mov	r0, r8
 8007ece:	47d0      	blx	sl
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	d09b      	beq.n	8007e0c <_printf_i+0x164>
 8007ed4:	3501      	adds	r5, #1
 8007ed6:	68e3      	ldr	r3, [r4, #12]
 8007ed8:	9903      	ldr	r1, [sp, #12]
 8007eda:	1a5b      	subs	r3, r3, r1
 8007edc:	42ab      	cmp	r3, r5
 8007ede:	dcf2      	bgt.n	8007ec6 <_printf_i+0x21e>
 8007ee0:	e7eb      	b.n	8007eba <_printf_i+0x212>
 8007ee2:	2500      	movs	r5, #0
 8007ee4:	f104 0619 	add.w	r6, r4, #25
 8007ee8:	e7f5      	b.n	8007ed6 <_printf_i+0x22e>
 8007eea:	bf00      	nop
 8007eec:	08008219 	.word	0x08008219
 8007ef0:	0800822a 	.word	0x0800822a

08007ef4 <memmove>:
 8007ef4:	4288      	cmp	r0, r1
 8007ef6:	b510      	push	{r4, lr}
 8007ef8:	eb01 0402 	add.w	r4, r1, r2
 8007efc:	d902      	bls.n	8007f04 <memmove+0x10>
 8007efe:	4284      	cmp	r4, r0
 8007f00:	4623      	mov	r3, r4
 8007f02:	d807      	bhi.n	8007f14 <memmove+0x20>
 8007f04:	1e43      	subs	r3, r0, #1
 8007f06:	42a1      	cmp	r1, r4
 8007f08:	d008      	beq.n	8007f1c <memmove+0x28>
 8007f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f12:	e7f8      	b.n	8007f06 <memmove+0x12>
 8007f14:	4402      	add	r2, r0
 8007f16:	4601      	mov	r1, r0
 8007f18:	428a      	cmp	r2, r1
 8007f1a:	d100      	bne.n	8007f1e <memmove+0x2a>
 8007f1c:	bd10      	pop	{r4, pc}
 8007f1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f26:	e7f7      	b.n	8007f18 <memmove+0x24>

08007f28 <_free_r>:
 8007f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f2a:	2900      	cmp	r1, #0
 8007f2c:	d044      	beq.n	8007fb8 <_free_r+0x90>
 8007f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f32:	9001      	str	r0, [sp, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f1a1 0404 	sub.w	r4, r1, #4
 8007f3a:	bfb8      	it	lt
 8007f3c:	18e4      	addlt	r4, r4, r3
 8007f3e:	f000 f913 	bl	8008168 <__malloc_lock>
 8007f42:	4a1e      	ldr	r2, [pc, #120]	; (8007fbc <_free_r+0x94>)
 8007f44:	9801      	ldr	r0, [sp, #4]
 8007f46:	6813      	ldr	r3, [r2, #0]
 8007f48:	b933      	cbnz	r3, 8007f58 <_free_r+0x30>
 8007f4a:	6063      	str	r3, [r4, #4]
 8007f4c:	6014      	str	r4, [r2, #0]
 8007f4e:	b003      	add	sp, #12
 8007f50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f54:	f000 b90e 	b.w	8008174 <__malloc_unlock>
 8007f58:	42a3      	cmp	r3, r4
 8007f5a:	d908      	bls.n	8007f6e <_free_r+0x46>
 8007f5c:	6825      	ldr	r5, [r4, #0]
 8007f5e:	1961      	adds	r1, r4, r5
 8007f60:	428b      	cmp	r3, r1
 8007f62:	bf01      	itttt	eq
 8007f64:	6819      	ldreq	r1, [r3, #0]
 8007f66:	685b      	ldreq	r3, [r3, #4]
 8007f68:	1949      	addeq	r1, r1, r5
 8007f6a:	6021      	streq	r1, [r4, #0]
 8007f6c:	e7ed      	b.n	8007f4a <_free_r+0x22>
 8007f6e:	461a      	mov	r2, r3
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	b10b      	cbz	r3, 8007f78 <_free_r+0x50>
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	d9fa      	bls.n	8007f6e <_free_r+0x46>
 8007f78:	6811      	ldr	r1, [r2, #0]
 8007f7a:	1855      	adds	r5, r2, r1
 8007f7c:	42a5      	cmp	r5, r4
 8007f7e:	d10b      	bne.n	8007f98 <_free_r+0x70>
 8007f80:	6824      	ldr	r4, [r4, #0]
 8007f82:	4421      	add	r1, r4
 8007f84:	1854      	adds	r4, r2, r1
 8007f86:	42a3      	cmp	r3, r4
 8007f88:	6011      	str	r1, [r2, #0]
 8007f8a:	d1e0      	bne.n	8007f4e <_free_r+0x26>
 8007f8c:	681c      	ldr	r4, [r3, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	6053      	str	r3, [r2, #4]
 8007f92:	4421      	add	r1, r4
 8007f94:	6011      	str	r1, [r2, #0]
 8007f96:	e7da      	b.n	8007f4e <_free_r+0x26>
 8007f98:	d902      	bls.n	8007fa0 <_free_r+0x78>
 8007f9a:	230c      	movs	r3, #12
 8007f9c:	6003      	str	r3, [r0, #0]
 8007f9e:	e7d6      	b.n	8007f4e <_free_r+0x26>
 8007fa0:	6825      	ldr	r5, [r4, #0]
 8007fa2:	1961      	adds	r1, r4, r5
 8007fa4:	428b      	cmp	r3, r1
 8007fa6:	bf04      	itt	eq
 8007fa8:	6819      	ldreq	r1, [r3, #0]
 8007faa:	685b      	ldreq	r3, [r3, #4]
 8007fac:	6063      	str	r3, [r4, #4]
 8007fae:	bf04      	itt	eq
 8007fb0:	1949      	addeq	r1, r1, r5
 8007fb2:	6021      	streq	r1, [r4, #0]
 8007fb4:	6054      	str	r4, [r2, #4]
 8007fb6:	e7ca      	b.n	8007f4e <_free_r+0x26>
 8007fb8:	b003      	add	sp, #12
 8007fba:	bd30      	pop	{r4, r5, pc}
 8007fbc:	20001e34 	.word	0x20001e34

08007fc0 <sbrk_aligned>:
 8007fc0:	b570      	push	{r4, r5, r6, lr}
 8007fc2:	4e0e      	ldr	r6, [pc, #56]	; (8007ffc <sbrk_aligned+0x3c>)
 8007fc4:	460c      	mov	r4, r1
 8007fc6:	6831      	ldr	r1, [r6, #0]
 8007fc8:	4605      	mov	r5, r0
 8007fca:	b911      	cbnz	r1, 8007fd2 <sbrk_aligned+0x12>
 8007fcc:	f000 f8bc 	bl	8008148 <_sbrk_r>
 8007fd0:	6030      	str	r0, [r6, #0]
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f000 f8b7 	bl	8008148 <_sbrk_r>
 8007fda:	1c43      	adds	r3, r0, #1
 8007fdc:	d00a      	beq.n	8007ff4 <sbrk_aligned+0x34>
 8007fde:	1cc4      	adds	r4, r0, #3
 8007fe0:	f024 0403 	bic.w	r4, r4, #3
 8007fe4:	42a0      	cmp	r0, r4
 8007fe6:	d007      	beq.n	8007ff8 <sbrk_aligned+0x38>
 8007fe8:	1a21      	subs	r1, r4, r0
 8007fea:	4628      	mov	r0, r5
 8007fec:	f000 f8ac 	bl	8008148 <_sbrk_r>
 8007ff0:	3001      	adds	r0, #1
 8007ff2:	d101      	bne.n	8007ff8 <sbrk_aligned+0x38>
 8007ff4:	f04f 34ff 	mov.w	r4, #4294967295
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}
 8007ffc:	20001e38 	.word	0x20001e38

08008000 <_malloc_r>:
 8008000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008004:	1ccd      	adds	r5, r1, #3
 8008006:	f025 0503 	bic.w	r5, r5, #3
 800800a:	3508      	adds	r5, #8
 800800c:	2d0c      	cmp	r5, #12
 800800e:	bf38      	it	cc
 8008010:	250c      	movcc	r5, #12
 8008012:	2d00      	cmp	r5, #0
 8008014:	4607      	mov	r7, r0
 8008016:	db01      	blt.n	800801c <_malloc_r+0x1c>
 8008018:	42a9      	cmp	r1, r5
 800801a:	d905      	bls.n	8008028 <_malloc_r+0x28>
 800801c:	230c      	movs	r3, #12
 800801e:	603b      	str	r3, [r7, #0]
 8008020:	2600      	movs	r6, #0
 8008022:	4630      	mov	r0, r6
 8008024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008028:	4e2e      	ldr	r6, [pc, #184]	; (80080e4 <_malloc_r+0xe4>)
 800802a:	f000 f89d 	bl	8008168 <__malloc_lock>
 800802e:	6833      	ldr	r3, [r6, #0]
 8008030:	461c      	mov	r4, r3
 8008032:	bb34      	cbnz	r4, 8008082 <_malloc_r+0x82>
 8008034:	4629      	mov	r1, r5
 8008036:	4638      	mov	r0, r7
 8008038:	f7ff ffc2 	bl	8007fc0 <sbrk_aligned>
 800803c:	1c43      	adds	r3, r0, #1
 800803e:	4604      	mov	r4, r0
 8008040:	d14d      	bne.n	80080de <_malloc_r+0xde>
 8008042:	6834      	ldr	r4, [r6, #0]
 8008044:	4626      	mov	r6, r4
 8008046:	2e00      	cmp	r6, #0
 8008048:	d140      	bne.n	80080cc <_malloc_r+0xcc>
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	4631      	mov	r1, r6
 800804e:	4638      	mov	r0, r7
 8008050:	eb04 0803 	add.w	r8, r4, r3
 8008054:	f000 f878 	bl	8008148 <_sbrk_r>
 8008058:	4580      	cmp	r8, r0
 800805a:	d13a      	bne.n	80080d2 <_malloc_r+0xd2>
 800805c:	6821      	ldr	r1, [r4, #0]
 800805e:	3503      	adds	r5, #3
 8008060:	1a6d      	subs	r5, r5, r1
 8008062:	f025 0503 	bic.w	r5, r5, #3
 8008066:	3508      	adds	r5, #8
 8008068:	2d0c      	cmp	r5, #12
 800806a:	bf38      	it	cc
 800806c:	250c      	movcc	r5, #12
 800806e:	4629      	mov	r1, r5
 8008070:	4638      	mov	r0, r7
 8008072:	f7ff ffa5 	bl	8007fc0 <sbrk_aligned>
 8008076:	3001      	adds	r0, #1
 8008078:	d02b      	beq.n	80080d2 <_malloc_r+0xd2>
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	442b      	add	r3, r5
 800807e:	6023      	str	r3, [r4, #0]
 8008080:	e00e      	b.n	80080a0 <_malloc_r+0xa0>
 8008082:	6822      	ldr	r2, [r4, #0]
 8008084:	1b52      	subs	r2, r2, r5
 8008086:	d41e      	bmi.n	80080c6 <_malloc_r+0xc6>
 8008088:	2a0b      	cmp	r2, #11
 800808a:	d916      	bls.n	80080ba <_malloc_r+0xba>
 800808c:	1961      	adds	r1, r4, r5
 800808e:	42a3      	cmp	r3, r4
 8008090:	6025      	str	r5, [r4, #0]
 8008092:	bf18      	it	ne
 8008094:	6059      	strne	r1, [r3, #4]
 8008096:	6863      	ldr	r3, [r4, #4]
 8008098:	bf08      	it	eq
 800809a:	6031      	streq	r1, [r6, #0]
 800809c:	5162      	str	r2, [r4, r5]
 800809e:	604b      	str	r3, [r1, #4]
 80080a0:	4638      	mov	r0, r7
 80080a2:	f104 060b 	add.w	r6, r4, #11
 80080a6:	f000 f865 	bl	8008174 <__malloc_unlock>
 80080aa:	f026 0607 	bic.w	r6, r6, #7
 80080ae:	1d23      	adds	r3, r4, #4
 80080b0:	1af2      	subs	r2, r6, r3
 80080b2:	d0b6      	beq.n	8008022 <_malloc_r+0x22>
 80080b4:	1b9b      	subs	r3, r3, r6
 80080b6:	50a3      	str	r3, [r4, r2]
 80080b8:	e7b3      	b.n	8008022 <_malloc_r+0x22>
 80080ba:	6862      	ldr	r2, [r4, #4]
 80080bc:	42a3      	cmp	r3, r4
 80080be:	bf0c      	ite	eq
 80080c0:	6032      	streq	r2, [r6, #0]
 80080c2:	605a      	strne	r2, [r3, #4]
 80080c4:	e7ec      	b.n	80080a0 <_malloc_r+0xa0>
 80080c6:	4623      	mov	r3, r4
 80080c8:	6864      	ldr	r4, [r4, #4]
 80080ca:	e7b2      	b.n	8008032 <_malloc_r+0x32>
 80080cc:	4634      	mov	r4, r6
 80080ce:	6876      	ldr	r6, [r6, #4]
 80080d0:	e7b9      	b.n	8008046 <_malloc_r+0x46>
 80080d2:	230c      	movs	r3, #12
 80080d4:	603b      	str	r3, [r7, #0]
 80080d6:	4638      	mov	r0, r7
 80080d8:	f000 f84c 	bl	8008174 <__malloc_unlock>
 80080dc:	e7a1      	b.n	8008022 <_malloc_r+0x22>
 80080de:	6025      	str	r5, [r4, #0]
 80080e0:	e7de      	b.n	80080a0 <_malloc_r+0xa0>
 80080e2:	bf00      	nop
 80080e4:	20001e34 	.word	0x20001e34

080080e8 <_realloc_r>:
 80080e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ec:	4680      	mov	r8, r0
 80080ee:	4614      	mov	r4, r2
 80080f0:	460e      	mov	r6, r1
 80080f2:	b921      	cbnz	r1, 80080fe <_realloc_r+0x16>
 80080f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080f8:	4611      	mov	r1, r2
 80080fa:	f7ff bf81 	b.w	8008000 <_malloc_r>
 80080fe:	b92a      	cbnz	r2, 800810c <_realloc_r+0x24>
 8008100:	f7ff ff12 	bl	8007f28 <_free_r>
 8008104:	4625      	mov	r5, r4
 8008106:	4628      	mov	r0, r5
 8008108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800810c:	f000 f838 	bl	8008180 <_malloc_usable_size_r>
 8008110:	4284      	cmp	r4, r0
 8008112:	4607      	mov	r7, r0
 8008114:	d802      	bhi.n	800811c <_realloc_r+0x34>
 8008116:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800811a:	d812      	bhi.n	8008142 <_realloc_r+0x5a>
 800811c:	4621      	mov	r1, r4
 800811e:	4640      	mov	r0, r8
 8008120:	f7ff ff6e 	bl	8008000 <_malloc_r>
 8008124:	4605      	mov	r5, r0
 8008126:	2800      	cmp	r0, #0
 8008128:	d0ed      	beq.n	8008106 <_realloc_r+0x1e>
 800812a:	42bc      	cmp	r4, r7
 800812c:	4622      	mov	r2, r4
 800812e:	4631      	mov	r1, r6
 8008130:	bf28      	it	cs
 8008132:	463a      	movcs	r2, r7
 8008134:	f7ff fbb8 	bl	80078a8 <memcpy>
 8008138:	4631      	mov	r1, r6
 800813a:	4640      	mov	r0, r8
 800813c:	f7ff fef4 	bl	8007f28 <_free_r>
 8008140:	e7e1      	b.n	8008106 <_realloc_r+0x1e>
 8008142:	4635      	mov	r5, r6
 8008144:	e7df      	b.n	8008106 <_realloc_r+0x1e>
	...

08008148 <_sbrk_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4d06      	ldr	r5, [pc, #24]	; (8008164 <_sbrk_r+0x1c>)
 800814c:	2300      	movs	r3, #0
 800814e:	4604      	mov	r4, r0
 8008150:	4608      	mov	r0, r1
 8008152:	602b      	str	r3, [r5, #0]
 8008154:	f7f8 fc08 	bl	8000968 <_sbrk>
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d102      	bne.n	8008162 <_sbrk_r+0x1a>
 800815c:	682b      	ldr	r3, [r5, #0]
 800815e:	b103      	cbz	r3, 8008162 <_sbrk_r+0x1a>
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	bd38      	pop	{r3, r4, r5, pc}
 8008164:	20001e3c 	.word	0x20001e3c

08008168 <__malloc_lock>:
 8008168:	4801      	ldr	r0, [pc, #4]	; (8008170 <__malloc_lock+0x8>)
 800816a:	f000 b811 	b.w	8008190 <__retarget_lock_acquire_recursive>
 800816e:	bf00      	nop
 8008170:	20001e40 	.word	0x20001e40

08008174 <__malloc_unlock>:
 8008174:	4801      	ldr	r0, [pc, #4]	; (800817c <__malloc_unlock+0x8>)
 8008176:	f000 b80c 	b.w	8008192 <__retarget_lock_release_recursive>
 800817a:	bf00      	nop
 800817c:	20001e40 	.word	0x20001e40

08008180 <_malloc_usable_size_r>:
 8008180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008184:	1f18      	subs	r0, r3, #4
 8008186:	2b00      	cmp	r3, #0
 8008188:	bfbc      	itt	lt
 800818a:	580b      	ldrlt	r3, [r1, r0]
 800818c:	18c0      	addlt	r0, r0, r3
 800818e:	4770      	bx	lr

08008190 <__retarget_lock_acquire_recursive>:
 8008190:	4770      	bx	lr

08008192 <__retarget_lock_release_recursive>:
 8008192:	4770      	bx	lr

08008194 <_init>:
 8008194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008196:	bf00      	nop
 8008198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800819a:	bc08      	pop	{r3}
 800819c:	469e      	mov	lr, r3
 800819e:	4770      	bx	lr

080081a0 <_fini>:
 80081a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a2:	bf00      	nop
 80081a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081a6:	bc08      	pop	{r3}
 80081a8:	469e      	mov	lr, r3
 80081aa:	4770      	bx	lr
